# Note, this grammar is at least as permissive as the final Bison grammar, but is not equivalent to it 

# Type system 
type ::= ["const"] non-reference-type | ["const"] reference-type
non-reference-type ::= type-core | type-core '*' | type-core '[' [int-literal] ']'
type-core ::= identifier [type-template-parameters]
type-template-parameters ::= '!' '(' type-list ')'
type-list ::= type | type-list ',' type
reference-type ::= "ref" non-reference-type | "rref" non-reference-type

# Expressions
expression ::= assignment-arg-expression | xvalue-expression '=' rvalue-expression
prvalue-expression:
    literal
    "super"
    rvalue-expression '+' rvalue-expression
    rvalue-expression '-' rvalue-expression 
    rvalue-expresison '*' rvalue-expression
    rvalue-expression '/' rvalue-expression 
    rvalue-expression '//' rvalue-expression
    rvalue-expression '^^' rvalue-expression
    xvalue-expression '+=' rvalue-expression
    xvalue-expression '-=' rvalue-expression 
    xvalue-expresison '*=' rvalue-expression
    xvalue-expression '/=' rvalue-expression 
    xvalue-expression '//=' rvalue-expression
    xvalue-expression '^^=' rvalue-expression
    rvalue-expression '>' rvalue-expression 
    rvalue-expression '>=' rvalue-expression 
    rvalue-expression '<=' rvalue-expression 
    rvalue-expression '<=>' rvalue-expression 
    rvalue-expression '&&' rvalue-expression 
    rvalue-expression '' rvalue-expression 
    rvalue-expression '&' rvalue-expression 
    rvalue-expression '^' rvalue-expression 
    rvalue-expression '' rvalue-expression 
    rvalue-expression '~' rvalue-expression 
    rvalue-expression '>>' rvalue-expression 
    rvalue-expression '<<' rvalue-expression 
    xvalue-expression '&=' rvalue-expression 
    xvalue-expression '^=' rvalue-expression 
    xvalue-expression '=' rvalue-expression 
    xvalue-expression '~=' rvalue-expression 
    xvalue-expression '>>=' rvalue-expression 
    xvalue-expression '<<=' rvalue-expression 
    rvalue-expression 'is' type 
    '!' rvalue-expression 
    '-' rvalue-expression
    "typeof" '(' rvalue-expression ')' 
    "castas" '(' type ')' '(' rvalue-expression ')' 
    '(' rvalue-expression ')' '?' rvalue-expression ':' rvalue-expression
    new-expression 
    lambda-expression
rvalue-expresison ::= prvalue-expression | xvalue-expresison
xvalue-expression ::=
    "this" 
    '++' xvalue-expression 
    '--' xvalue-expression 
    xvalue-expression '++'
    xvalue-expression '--'
    '*' xvalue-expression
    xvalue-expression '.' xvalue-expression 
    xvalue-expression '->' xvalue-expression 
    '(' rvalue-expression ')' 
    '[' array-index-list ']' 
    function-call
literal ::= BOOL | NPTR | INT | FLOAT | STRING | CHAR
lambda_expression ::=
    "(" function_argument_list ")" "->" return_types_list "=>" block_statement 
new_expression:
    "new" type "(" function_call_list ")"
    "new" "heap" type "(" function_call_list ")"
array_index_list ::=
    array_index |
    array_index_list "," array_index
array_index ::= [expression] ":" [expression]
function_call ::=  xvalue_expression "(" [function_argument_list] ")"
function_call_list ::= function_call_arg | function_call_list "," function_call_arg
function_call_arg:
    expression 

# Statements
statement ::= 
    block-statement
    conditional-statement 
    loop-statement
    exception-statement
    clean-up-statement
    jump-statement
    expression-statement
    variable-declaration-statement
    no-op-statement
block-statement ::= statement | block-statement statement
loop-statement ::= while-loop-statement | do-loop-statement | for-loop-statement
while-loop-statement ::= "while" '(' expression ')' block-statement "endwhile"
do-loop-statement ::= "do" block-statement "while" '(' expression ')' "endwhile"
for-loop-statement ::= "for" '(' for-loop-condition ')' block-statement "endfor"
for-loop-condition ::= 
    [expression] ';' [expression] ';' [expression]
    variable-declaration 'in' expression
conditional-statement ::= if-statement-sequence | switch-statement
if-statement-sequence ::= if-statement [else-if-statements] [else-statement]
if-statement ::= "if" '(' expression ')' block-statement
elseif-statements ::= elseif-statement | elseif-statements elseif-statement
elseif-statement ::= "else-if" '(' expression ')' block-statement
else-statement ::= "else" block-statement
switch-statement ::= "switch" '(' expression ')' case-blocks [default-block] "endswitch"
case-blocks ::= case-block | case-blocks case-block
case-block ::= "case" expression ':' block-statement jump-statement |
default-block ::= "default" ":" block-statement jump-statement
exception-statement ::= try-block catch-blocks "endcatch"
try-block ::= "try" block-statement "endtry"
catch-blocks ::= catch-block | catch-blocks catch-block
catch-block ::= "catch" '(' variable-declaration ')' block-statement | "catch-all" block-statement
# The clean-up statement provides an extension to the RAII idiom that Arbor follows. It allows 
# the user to specify at run-time code (in the form of a function pointer, anoynomous function, or lambda), 
# additional code to be run when the object is destroyed. The clean-up code is called before the destructor 
# is called. 
#   file f; 
#   cleanup(f, () => {print("In clean up wooo");} -> void);
#   file* f2
#   cleanup(*f2, () => {print("In clean up 2 wooo");} -> void)
# Whenever ~f() is called, the lambda will be called. If more than one clean-up statements are provided, the 
# code will be expected in the order the clean-up statements are created. Clean-up statements are per variable 
# not per type. 
clean-up-statement ::= "cleanup" '(' identifier ',' clean-up-arg ')' ';'
clean-up-arg ::= lambda-expression | function?? | identifier 
jump-statement ::= 
    "return" ';'
    "break" ';'
    "continue" ';'
    "throw" expression ';'
    "rethrow" ";"
    "yield" ';'
    "goto" identifier ':'
expression-statement ::= expression ';'
variable-declaration-statement ::= variable-declaration ';'
variable_declaration ::= "let" variable_declaration_block_list
variable_declaration_block_list ::= variable_declaration_block | variable_declaration_block_list "," variable_declaration_block
variable_declaration_block ::= "let" type IDENTIFIER | "let" type IDENTIFIER "=" expression;
no-op-statement ::= ';'

#functions 
function = function-header block-statement "endfunc"
anoynmous-function = anoynmous-function-header block-statement "endfunc"
function-header = "func" ["virtual"] ["static"] ["compeval"] identifier '(' function-argument-list ')' throwable-expression '->' return-types-list
function-argument-list ::= function-argument | function-argument-list ',' function-argument 
function-argument ::= type ['...'] identifier ['=' expression]
throwable-expression ::= "nothrowable" ['(' expression ')']
return-types-list ::= return-type | return-types-list "," return-type
return-type ::= type | "typeof" "(" expression ")"
anoynmous-function-header = "func" ["compeval"] '(' function-argument-list ')' throwable-expression '->' return-types
operator-overload = operator-overload-header block-statement "endfuc" | operator-overload-header '=' function-options ';'
operator-overload = "operator" operator '(' function-argument-list ')' throwable-expression '->' return-types
function-options = "default" | "delete"
callable = function | operator-overload

#enums
enum ::= "enum" "{" enum-members-list "}"
enum-members-list ::= enum-member | enum-members-list ',' enum-member
enumber-member ::= identifier ["=" INT]

program = [callables]
callables = callable | callables callable
