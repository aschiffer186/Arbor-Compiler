Terminals unused in grammar

    "initialize"


Grammar

    0 $accept: start $end

    1 start: program_units
    2      | %empty

    3 type: "const" type_root
    4     | type_root

    5 type_root: non_reference_type
    6          | reference_type

    7 non_reference_type: type_core
    8                   | type_core POINTER_TYPE
    9                   | type_core "weak" POINTER_TYPE
   10                   | type_core ARRAYL xvalue_expression ARRAYR

   11 type_core: TYPENAME type_template_paramaters
   12          | TYPENAME
   13          | "bit"
   14          | "bool"
   15          | "short"
   16          | "int"
   17          | "long"
   18          | "float"
   19          | "char"

   20 type_template_paramaters: T_BEGIN type_list T_END

   21 type_list: type
   22          | type_list "," type

   23 reference_type: "ref" non_reference_type
   24               | "rref" non_reference_type

   25 expression: assignment_arg_expression
   26           | xvalue_expression "=" rvalue_expression

   27 expression0: expression
   28            | %empty

   29 assignment_arg_expression: xvalue_expression
   30                          | prvalue_expression

   31 prvalue_expression: literal
   32                   | "super"
   33                   | rvalue_expression "+" rvalue_expression
   34                   | rvalue_expression "-" rvalue_expression
   35                   | rvalue_expression "*" rvalue_expression
   36                   | rvalue_expression "/" rvalue_expression
   37                   | rvalue_expression "//" rvalue_expression
   38                   | rvalue_expression "^^" rvalue_expression
   39                   | xvalue_expression "+=" rvalue_expression
   40                   | xvalue_expression "-=" rvalue_expression
   41                   | xvalue_expression "*=" rvalue_expression
   42                   | xvalue_expression "/=" rvalue_expression
   43                   | xvalue_expression "//=" rvalue_expression
   44                   | xvalue_expression "^^=" rvalue_expression
   45                   | rvalue_expression ">" rvalue_expression
   46                   | rvalue_expression ">=" rvalue_expression
   47                   | rvalue_expression "<=" rvalue_expression
   48                   | rvalue_expression "<=>" rvalue_expression
   49                   | rvalue_expression "&&" rvalue_expression
   50                   | rvalue_expression "||" rvalue_expression
   51                   | rvalue_expression "&" rvalue_expression
   52                   | rvalue_expression "^" rvalue_expression
   53                   | rvalue_expression "|" rvalue_expression
   54                   | rvalue_expression "~" rvalue_expression
   55                   | rvalue_expression ">>" rvalue_expression
   56                   | rvalue_expression "<<" rvalue_expression
   57                   | xvalue_expression "&=" rvalue_expression
   58                   | xvalue_expression "^=" rvalue_expression
   59                   | xvalue_expression "|=" rvalue_expression
   60                   | xvalue_expression "~=" rvalue_expression
   61                   | xvalue_expression ">>=" rvalue_expression
   62                   | xvalue_expression "<<=" rvalue_expression
   63                   | rvalue_expression "is" type
   64                   | "!" rvalue_expression
   65                   | "-" rvalue_expression
   66                   | "typeof" "(" rvalue_expression ")"
   67                   | "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | new_expression
   70                   | lambda_expression

   71 rvalue_expression: prvalue_expression
   72                  | xvalue_expression

   73 xvalue_expression: IDENTIFIER
   74                  | "this"
   75                  | "++" xvalue_expression
   76                  | "--" xvalue_expression
   77                  | xvalue_expression "++"
   78                  | xvalue_expression "--"
   79                  | "*" xvalue_expression
   80                  | xvalue_expression "." xvalue_expression
   81                  | xvalue_expression "->" xvalue_expression
   82                  | "(" rvalue_expression ")"
   83                  | "[" array_index_list "]"
   84                  | function_call

   85 literal: BOOL
   86        | NPTR
   87        | INT
   88        | FLOAT
   89        | STRING
   90        | CHAR

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement

   92 new_expression: "new" type "(" function_call_list ")"
   93               | "new" "heap" type "(" function_call_list ")"

   94 array_index_list: array_index
   95                 | array_index_list "," array_index

   96 array_index: expression
   97            | expression0 ":" expression0

   98 function_call: xvalue_expression "(" function_argument_list ")"
   99              | xvalue_expression "(" ")"

  100 function_call_list: function_call_arg
  101                   | function_call_list "," function_call_arg ";"

  102 function_call_arg: expression

  103 statement: block_statement
  104          | loop_statement
  105          | conditional_statement
  106          | exception_statement
  107          | clean_up_statement
  108          | jump_statement
  109          | expression_statement
  110          | variable_declaration_statement
  111          | no_op_statement

  112 block_statement: "{" statements0 "}"

  113 statements0: statements
  114            | %empty

  115 statements: statement
  116           | statements statement

  117 loop_statement: while_loop_statement
  118               | do_loop_statement
  119               | for_loop_statement

  120 while_loop_statement: "while" "(" expression ")" block_statement

  121 do_loop_statement: "do" block_statement "while" "(" expression ")"

  122 for_loop_statement: "for" "(" for_loop_condition ")" block_statement

  123 for_loop_condition: variable_declaration ";" expression0 ";" expression0
  124                   | variable_declaration "in" expression

  125 conditional_statement: if_statement_sequence
  126                      | switch_statement

  127 if_statement_sequence: if_statement else_if_statements0 else_statement0

  128 if_statement: "if" "(" expression ")" block_statement

  129 else_if_statements0: else_if_statements
  130                    | %empty

  131 else_if_statements: else_if_statement
  132                   | else_if_statements else_if_statement

  133 else_if_statement: "else-if" "(" expression ")" block_statement

  134 else_statement0: else_statement
  135                | %empty

  136 else_statement: "else" block_statement

  137 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0

  138 case_blocks0: case_blocks
  139             | %empty

  140 case_blocks: case_block
  141            | case_blocks case_block

  142 case_block: "case" expression ":" block_statement jump_statement

  143 default_block0: default_block
  144               | %empty

  145 default_block: "default" ":" block_statement jump_statement

  146 exception_statement: try_block catch_blocks

  147 try_block: "try" block_statement

  148 catch_blocks: catch_block
  149             | catch_blocks catch_block

  150 catch_block: "catch" "(" variable_declaration ")" block_statement
  151            | "catch-all" block_statement

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"

  153 clean_up_arg: IDENTIFIER
  154             | lambda_expression
  155             | function
  156             | anonymous_function

  157 jump_statement: "return" ";"
  158               | "break" ";"
  159               | "continue" ";"
  160               | "rethrow" ";"
  161               | "throw" expression ";"
  162               | "yield" ";"
  163               | "goto" IDENTIFIER ";"

  164 expression_statement: expression ";"

  165 variable_declaration_statement: variable_declaration ";"

  166 variable_declaration: "let" access_modifier0 variable_declaration_block_list

  167 variable_declaration_block_list: variable_declaration_block
  168                                | variable_declaration_block_list "," variable_declaration_block

  169 variable_declaration_block: "let" type IDENTIFIER
  170                           | "let" type IDENTIFIER "=" expression

  171 access_modifier0: access_modifier
  172                 | %empty

  173 access_modifier: "public"
  174                | "private"
  175                | "protected"

  176 no_op_statement: ";"

  177 function: function_header block_statement

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

  180 function_modifiers: "virtual"
  181                   | "compeval"
  182                   | "static"
  183                   | "static" "compeval"

  184 function_argument_list: function_argument
  185                       | function_argument_list "," function_argument

  186 function_argument: type IDENTIFIER
  187                  | type "..."
  188                  | type IDENTIFIER "=" expression

  189 throwable_expression: "nothrowable"
  190                     | "nothrowable" "(" expression ")"

  191 return_types_list: return_type
  192                  | return_types_list "," return_type

  193 return_type: type
  194            | "typeof" "(" expression ")"

  195 anonymous_function: anonymous_function_header block_statement

  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  197                          | "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

  198 operator_overload: operator_overload_header block_statement
  199                  | operator_overload_header "=" function_options ";"

  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list

  201 operator: "+"
  202         | "-"
  203         | "*"
  204         | "/"
  205         | "//"
  206         | "^^"
  207         | "%"
  208         | "+="
  209         | "-="
  210         | "*="
  211         | "/="
  212         | "//="
  213         | "^^="
  214         | "%="
  215         | ">"
  216         | ">="
  217         | "<"
  218         | "<="
  219         | "<=>"
  220         | "=="
  221         | "!="
  222         | "^"
  223         | "&"
  224         | "~"
  225         | "<<"
  226         | ">>"
  227         | "="
  228         | "++"
  229         | "--"
  230         | "[" "]"
  231         | "(" ")"
  232         | "->"
  233         | "new"
  234         | type

  235 function_options: "delete"
  236                 | "default"

  237 callable: function
  238         | operator_overload

  239 enum: "enum" "{" enum_members_list "}"

  240 enum_members_list: enum_member
  241                  | enum_members_list "," enum_member

  242 enum_member: IDENTIFIER
  243            | IDENTIFIER "=" INT

  244 class: class_header "{" class_statements "}"
  245      | class_header "{" "}"

  246 class_header: "class" IDENTIFIER
  247             | "class" IDENTIFIER inheritance

  248 inheritance: "inherits" class_names_list

  249 class_names_list: class_name
  250                 | class_names_list "," class_name

  251 class_name: IDENTIFIER
  252           | IDENTIFIER type_template_paramaters

  253 class_statements: class_statement
  254                 | class_statements class_statement

  255 class_statement: variable_declaration_statement
  256                | callable
  257                | constructor
  258                | destructor
  259                | property
  260                | class

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

  262 property_blocks: get_block
  263                | set_block
  264                | get_block set_block
  265                | set_block get_block

  266 get_block: "get" "(" ")" "=>" IDENTIFIER ";"
  267          | "get" "(" ")" block_statement

  268 set_block: "set" "(" ")" "=>" IDENTIFIER ";"
  269          | "set" "(" ")" block_statement

  270 constructor: constructor_header initializer_list block_statement
  271            | constructor_header initializer_list ";"
  272            | constructor_header block_statement
  273            | constructor_header "=" function_options ";"

  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

  275 initializer_list: "=>" "initailize" "(" initializer_blocks_list ")"

  276 initializer_blocks_list: initializer_block
  277                        | initializer_blocks_list "," initializer_block

  278 initializer_block: IDENTIFIER ":" rvalue_expression

  279 compeval0: "compeval"
  280          | %empty

  281 destructor: destructor_header block_statement
  282           | destructor_header "=" function_options ";"

  283 destructor_header: "~" IDENTIFIER "(" ")"

  284 module: "module" module_name ";"
  285       | "module" module_name ":" IDENTIFIER ";"

  286 module_name: IDENTIFIER
  287            | module_name "." IDENTIFIER
  288            | module_name "-" IDENTIFIER

  289 import: "import" module_name ";"
  290       | "import" ":" IDENTIFIER ";"

  291 type_definition: "define" type "as" IDENTIFIER ";"

  292 namespace: "namespace" module_name "{" namespace_units "}"
  293          | "namespace" module_name "{" "}"

  294 namespace_units: namespace_unit
  295                | namespace_units namespace_unit

  296 namespace_unit: class
  297               | enum
  298               | callable
  299               | type_definition
  300               | variable_declaration_statement

  301 program_units: program_unit
  302              | program_units program_unit

  303 program_unit: module
  304             | import
  305             | type_definition
  306             | callable
  307             | variable_declaration_statement
  308             | class
  309             | enum
  310             | namespace


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <std::string> (258) 73 152 153 163 169 170 178 179 186 188 242 243 246 247 251 252 261 266 268 274 278 283 285 286 287 288 290 291
    TYPENAME <std::string> (259) 11 12
    NPTR (260) 86
    BOOL <bool> (261) 85
    INT <int> (262) 87 243
    FLOAT <double> (263) 88
    CHAR <std::string> (264) 90
    STRING <std::string> (265) 89
    "as" (266) 291
    "break" (267) 158
    "bit" (268) 13
    "bool" (269) 14
    "case" (270) 142
    "castas" (271) 67
    "catch" (272) 150
    "catch-all" (273) 151
    "char" (274) 19
    "class" (275) 246 247
    "cleanup" (276) 152
    "const" (277) 3
    "continue" (278) 159
    "compeval" (279) 181 183 196 279
    "ctor" (280) 274
    "default" (281) 145 236
    "define" (282) 291
    "delete" (283) 235
    "do" (284) 121
    "else" (285) 136
    "else-if" (286) 133
    "enum" (287) 239
    "float" (288) 18
    "for" (289) 122
    "func" (290) 178 179 196 197
    "get" (291) 266 267
    "goto" (292) 163
    "heap" (293) 93
    "if" (294) 128
    "import" (295) 289 290
    "in" (296) 124
    "inherits" (297) 248
    "initialize" (298)
    "int" (299) 16
    "is" (300) 63
    "let" (301) 166 169 170 261
    "long" (302) 17
    "module" (303) 284 285
    "new" (304) 92 93 233
    "nothrowable" (305) 189 190
    "operator" (306) 200
    "private" (307) 174
    "property" (308) 261
    "protected" (309) 175
    "public" (310) 173
    "ref" (311) 23
    "rref" (312) 24
    "rethrow" (313) 160
    "return" (314) 157
    "set" (315) 268 269
    "short" (316) 15
    "static" (317) 182 183
    "super" (318) 32
    "switch" (319) 137
    "this" (320) 74
    "throw" (321) 161
    "try" (322) 147
    "typeof" (323) 66 194
    "virtual" (324) 180
    "weak" (325) 9
    "while" (326) 120 121
    "yield" (327) 162
    "[" (328) 83 230
    "]" (329) 83 230
    "<" (330) 67 217
    ">" (331) 45 67 215
    "," (332) 22 95 101 152 168 185 192 241 250 277
    "+" (333) 33 201
    "-" (334) 34 65 202 288
    "/" (335) 36 204
    "//" (336) 37 205
    "*" (337) 35 79 203
    "^^" (338) 38 206
    "%" (339) 207
    "+=" (340) 39 208
    "-=" (341) 40 209
    "*=" (342) 41 210
    "/=" (343) 42 211
    "//=" (344) 43 212
    "^^=" (345) 44 213
    "%=" (346) 214
    "<=" (347) 47 218
    ">=" (348) 46 216
    "==" (349) 220
    "!=" (350) 221
    "<=>" (351) 48 219
    "&&" (352) 49
    "||" (353) 50
    "&" (354) 51 223
    "|" (355) 53
    "!" (356) 64
    "^" (357) 52 222
    "~" (358) 54 224 283
    ">>" (359) 55 226
    "<<" (360) 56 225
    "=" (361) 26 170 188 199 227 243 273 282
    "++" (362) 75 77 228
    "--" (363) 76 78 229
    "(" (364) 66 67 68 82 91 92 93 98 99 120 121 122 128 133 137 150 152 178 179 190 194 196 197 200 231 266 267 268 269 274 275 283
    ")" (365) 66 67 68 82 91 92 93 98 99 120 121 122 128 133 137 150 152 178 179 190 194 196 197 200 231 266 267 268 269 274 275 283
    "?" (366) 68
    ":" (367) 68 97 142 145 278 285 290
    "." (368) 80 287
    "->" (369) 81 91 178 179 196 197 200 232
    "{" (370) 112 239 244 245 261 292 293
    "}" (371) 112 239 244 245 261 292 293
    "=>" (372) 91 266 268 275
    ";" (373) 101 123 152 157 158 159 160 161 162 163 164 165 176 199 261 266 268 271 273 282 284 285 289 290 291
    "..." (374) 187
    "&=" (375) 57
    "^=" (376) 58
    "|=" (377) 59
    "~=" (378) 60
    "<<=" (379) 62
    ">>=" (380) 61
    POINTER_TYPE (381) 8 9
    ARRAYL (382) 10
    ARRAYR (383) 10
    T_BEGIN (384) 20
    T_END (385) 20
    UMINUS (386)
    POSTINC (387)
    POSTDEC (388)
    TERN (389)
    DEREF (390)
    "initailize" (391) 275
    "namespace" (392) 292 293


Nonterminals, with rules where they appear

    $accept (138)
        on left: 0
    start (139)
        on left: 1 2
        on right: 0
    type (140)
        on left: 3 4
        on right: 21 22 63 67 92 93 169 170 186 187 188 193 234 261 291
    type_root (141)
        on left: 5 6
        on right: 3 4
    non_reference_type (142)
        on left: 7 8 9 10
        on right: 5 23 24
    type_core (143)
        on left: 11 12 13 14 15 16 17 18 19
        on right: 7 8 9 10
    type_template_paramaters (144)
        on left: 20
        on right: 11 252
    type_list (145)
        on left: 21 22
        on right: 20 22
    reference_type (146)
        on left: 23 24
        on right: 6
    expression (147)
        on left: 25 26
        on right: 27 96 102 120 121 124 128 133 137 142 161 164 170 188 190 194
    expression0 (148)
        on left: 27 28
        on right: 97 123
    assignment_arg_expression (149)
        on left: 29 30
        on right: 25
    prvalue_expression (150)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
        on right: 30 71
    rvalue_expression (151)
        on left: 71 72
        on right: 26 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 82 278
    xvalue_expression (152)
        on left: 73 74 75 76 77 78 79 80 81 82 83 84
        on right: 10 26 29 39 40 41 42 43 44 57 58 59 60 61 62 72 75 76 77 78 79 80 81 98 99
    literal (153)
        on left: 85 86 87 88 89 90
        on right: 31
    lambda_expression (154)
        on left: 91
        on right: 70 154
    new_expression (155)
        on left: 92 93
        on right: 69
    array_index_list (156)
        on left: 94 95
        on right: 83 95
    array_index (157)
        on left: 96 97
        on right: 94 95
    function_call (158)
        on left: 98 99
        on right: 84
    function_call_list (159)
        on left: 100 101
        on right: 92 93 101
    function_call_arg (160)
        on left: 102
        on right: 100 101
    statement (161)
        on left: 103 104 105 106 107 108 109 110 111
        on right: 115 116
    block_statement (162)
        on left: 112
        on right: 91 103 120 121 122 128 133 136 142 145 147 150 151 177 195 198 267 269 270 272 281
    statements0 (163)
        on left: 113 114
        on right: 112
    statements (164)
        on left: 115 116
        on right: 113 116
    loop_statement (165)
        on left: 117 118 119
        on right: 104
    while_loop_statement (166)
        on left: 120
        on right: 117
    do_loop_statement (167)
        on left: 121
        on right: 118
    for_loop_statement (168)
        on left: 122
        on right: 119
    for_loop_condition (169)
        on left: 123 124
        on right: 122
    conditional_statement (170)
        on left: 125 126
        on right: 105
    if_statement_sequence (171)
        on left: 127
        on right: 125
    if_statement (172)
        on left: 128
        on right: 127
    else_if_statements0 (173)
        on left: 129 130
        on right: 127
    else_if_statements (174)
        on left: 131 132
        on right: 129 132
    else_if_statement (175)
        on left: 133
        on right: 131 132
    else_statement0 (176)
        on left: 134 135
        on right: 127
    else_statement (177)
        on left: 136
        on right: 134
    switch_statement (178)
        on left: 137
        on right: 126
    case_blocks0 (179)
        on left: 138 139
        on right: 137
    case_blocks (180)
        on left: 140 141
        on right: 138 141
    case_block (181)
        on left: 142
        on right: 140 141
    default_block0 (182)
        on left: 143 144
        on right: 137
    default_block (183)
        on left: 145
        on right: 143
    exception_statement (184)
        on left: 146
        on right: 106
    try_block (185)
        on left: 147
        on right: 146
    catch_blocks (186)
        on left: 148 149
        on right: 146 149
    catch_block (187)
        on left: 150 151
        on right: 148 149
    clean_up_statement (188)
        on left: 152
        on right: 107
    clean_up_arg (189)
        on left: 153 154 155 156
        on right: 152
    jump_statement (190)
        on left: 157 158 159 160 161 162 163
        on right: 108 142 145
    expression_statement (191)
        on left: 164
        on right: 109
    variable_declaration_statement (192)
        on left: 165
        on right: 110 255 300 307
    variable_declaration (193)
        on left: 166
        on right: 123 124 150 165
    variable_declaration_block_list (194)
        on left: 167 168
        on right: 166 168
    variable_declaration_block (195)
        on left: 169 170
        on right: 167 168
    access_modifier0 (196)
        on left: 171 172
        on right: 166
    access_modifier (197)
        on left: 173 174 175
        on right: 171 178 261 274
    no_op_statement (198)
        on left: 176
        on right: 111
    function (199)
        on left: 177
        on right: 155 237
    function_header (200)
        on left: 178 179
        on right: 177
    function_modifiers (201)
        on left: 180 181 182 183
        on right: 178
    function_argument_list (202)
        on left: 184 185
        on right: 91 98 178 179 185 196 197 200 274
    function_argument (203)
        on left: 186 187 188
        on right: 184 185
    throwable_expression (204)
        on left: 189 190
        on right: 178 179 196 197 200 274
    return_types_list (205)
        on left: 191 192
        on right: 91 178 179 192 196 197 200
    return_type (206)
        on left: 193 194
        on right: 191 192
    anonymous_function (207)
        on left: 195
        on right: 156
    anonymous_function_header (208)
        on left: 196 197
        on right: 195
    operator_overload (209)
        on left: 198 199
        on right: 238
    operator_overload_header (210)
        on left: 200
        on right: 198 199
    operator (211)
        on left: 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234
        on right: 200
    function_options (212)
        on left: 235 236
        on right: 199 273 282
    callable (213)
        on left: 237 238
        on right: 256 298 306
    enum (214)
        on left: 239
        on right: 297 309
    enum_members_list (215)
        on left: 240 241
        on right: 239 241
    enum_member (216)
        on left: 242 243
        on right: 240 241
    class (217)
        on left: 244 245
        on right: 260 296 308
    class_header (218)
        on left: 246 247
        on right: 244 245
    inheritance (219)
        on left: 248
        on right: 247
    class_names_list (220)
        on left: 249 250
        on right: 248 250
    class_name (221)
        on left: 251 252
        on right: 249 250
    class_statements (222)
        on left: 253 254
        on right: 244 254
    class_statement (223)
        on left: 255 256 257 258 259 260
        on right: 253 254
    property (224)
        on left: 261
        on right: 259
    property_blocks (225)
        on left: 262 263 264 265
        on right: 261
    get_block (226)
        on left: 266 267
        on right: 262 264 265
    set_block (227)
        on left: 268 269
        on right: 263 264 265
    constructor (228)
        on left: 270 271 272 273
        on right: 257
    constructor_header (229)
        on left: 274
        on right: 270 271 272 273
    initializer_list (230)
        on left: 275
        on right: 270 271
    initializer_blocks_list (231)
        on left: 276 277
        on right: 275 277
    initializer_block (232)
        on left: 278
        on right: 276 277
    compeval0 (233)
        on left: 279 280
        on right: 274
    destructor (234)
        on left: 281 282
        on right: 258
    destructor_header (235)
        on left: 283
        on right: 281 282
    module (236)
        on left: 284 285
        on right: 303
    module_name (237)
        on left: 286 287 288
        on right: 284 285 287 288 289 292 293
    import (238)
        on left: 289 290
        on right: 304
    type_definition (239)
        on left: 291
        on right: 299 305
    namespace (240)
        on left: 292 293
        on right: 310
    namespace_units (241)
        on left: 294 295
        on right: 292 295
    namespace_unit (242)
        on left: 296 297 298 299 300
        on right: 294 295
    program_units (243)
        on left: 301 302
        on right: 1 302
    program_unit (244)
        on left: 303 304 305 306 307 308 309 310
        on right: 301 302


State 0

    0 $accept: • start $end
    1 start: • program_units
    2      | • %empty  [$end]
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  284 module: • "module" module_name ";"
  285       | • "module" module_name ":" IDENTIFIER ";"
  289 import: • "import" module_name ";"
  290       | • "import" ":" IDENTIFIER ";"
  291 type_definition: • "define" type "as" IDENTIFIER ";"
  292 namespace: • "namespace" module_name "{" namespace_units "}"
  293          | • "namespace" module_name "{" "}"
  301 program_units: • program_unit
  302              | • program_units program_unit
  303 program_unit: • module
  304             | • import
  305             | • type_definition
  306             | • callable
  307             | • variable_declaration_statement
  308             | • class
  309             | • enum
  310             | • namespace

    "class"      shift, and go to state 1
    "define"     shift, and go to state 2
    "enum"       shift, and go to state 3
    "func"       shift, and go to state 4
    "import"     shift, and go to state 5
    "let"        shift, and go to state 6
    "module"     shift, and go to state 7
    "operator"   shift, and go to state 8
    "namespace"  shift, and go to state 9

    $default  reduce using rule 2 (start)

    start                           go to state 10
    variable_declaration_statement  go to state 11
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 17
    enum                            go to state 18
    class                           go to state 19
    class_header                    go to state 20
    module                          go to state 21
    import                          go to state 22
    type_definition                 go to state 23
    namespace                       go to state 24
    program_units                   go to state 25
    program_unit                    go to state 26


State 1

  246 class_header: "class" • IDENTIFIER
  247             | "class" • IDENTIFIER inheritance

    IDENTIFIER  shift, and go to state 27


State 2

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  291 type_definition: "define" • type "as" IDENTIFIER ";"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 39
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 3

  239 enum: "enum" • "{" enum_members_list "}"

    "{"  shift, and go to state 44


State 4

  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  178 function_header: "func" • access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER   shift, and go to state 45
    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    access_modifier  go to state 49


State 5

  286 module_name: • IDENTIFIER
  287            | • module_name "." IDENTIFIER
  288            | • module_name "-" IDENTIFIER
  289 import: "import" • module_name ";"
  290       | "import" • ":" IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 50
    ":"         shift, and go to state 51

    module_name  go to state 52


State 6

  166 variable_declaration: "let" • access_modifier0 variable_declaration_block_list
  171 access_modifier0: • access_modifier
  172                 | • %empty  ["let"]
  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"

    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    $default  reduce using rule 172 (access_modifier0)

    access_modifier0  go to state 53
    access_modifier   go to state 54


State 7

  284 module: "module" • module_name ";"
  285       | "module" • module_name ":" IDENTIFIER ";"
  286 module_name: • IDENTIFIER
  287            | • module_name "." IDENTIFIER
  288            | • module_name "-" IDENTIFIER

    IDENTIFIER  shift, and go to state 50

    module_name  go to state 55


State 8

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  200 operator_overload_header: "operator" • operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  201 operator: • "+"
  202         | • "-"
  203         | • "*"
  204         | • "/"
  205         | • "//"
  206         | • "^^"
  207         | • "%"
  208         | • "+="
  209         | • "-="
  210         | • "*="
  211         | • "/="
  212         | • "//="
  213         | • "^^="
  214         | • "%="
  215         | • ">"
  216         | • ">="
  217         | • "<"
  218         | • "<="
  219         | • "<=>"
  220         | • "=="
  221         | • "!="
  222         | • "^"
  223         | • "&"
  224         | • "~"
  225         | • "<<"
  226         | • ">>"
  227         | • "="
  228         | • "++"
  229         | • "--"
  230         | • "[" "]"
  231         | • "(" ")"
  232         | • "->"
  233         | • "new"
  234         | • type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "new"     shift, and go to state 56
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "["       shift, and go to state 57
    "<"       shift, and go to state 58
    ">"       shift, and go to state 59
    "+"       shift, and go to state 60
    "-"       shift, and go to state 61
    "/"       shift, and go to state 62
    "//"      shift, and go to state 63
    "*"       shift, and go to state 64
    "^^"      shift, and go to state 65
    "%"       shift, and go to state 66
    "+="      shift, and go to state 67
    "-="      shift, and go to state 68
    "*="      shift, and go to state 69
    "/="      shift, and go to state 70
    "//="     shift, and go to state 71
    "^^="     shift, and go to state 72
    "%="      shift, and go to state 73
    "<="      shift, and go to state 74
    ">="      shift, and go to state 75
    "=="      shift, and go to state 76
    "!="      shift, and go to state 77
    "<=>"     shift, and go to state 78
    "&"       shift, and go to state 79
    "^"       shift, and go to state 80
    "~"       shift, and go to state 81
    ">>"      shift, and go to state 82
    "<<"      shift, and go to state 83
    "="       shift, and go to state 84
    "++"      shift, and go to state 85
    "--"      shift, and go to state 86
    "("       shift, and go to state 87
    "->"      shift, and go to state 88

    type                go to state 89
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    operator            go to state 90


State 9

  286 module_name: • IDENTIFIER
  287            | • module_name "." IDENTIFIER
  288            | • module_name "-" IDENTIFIER
  292 namespace: "namespace" • module_name "{" namespace_units "}"
  293          | "namespace" • module_name "{" "}"

    IDENTIFIER  shift, and go to state 50

    module_name  go to state 91


State 10

    0 $accept: start • $end

    $end  shift, and go to state 92


State 11

  307 program_unit: variable_declaration_statement •

    $default  reduce using rule 307 (program_unit)


State 12

  165 variable_declaration_statement: variable_declaration • ";"

    ";"  shift, and go to state 93


State 13

  237 callable: function •

    $default  reduce using rule 237 (callable)


State 14

  112 block_statement: • "{" statements0 "}"
  177 function: function_header • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 95


State 15

  238 callable: operator_overload •

    $default  reduce using rule 238 (callable)


State 16

  112 block_statement: • "{" statements0 "}"
  198 operator_overload: operator_overload_header • block_statement
  199                  | operator_overload_header • "=" function_options ";"

    "="  shift, and go to state 96
    "{"  shift, and go to state 94

    block_statement  go to state 97


State 17

  306 program_unit: callable •

    $default  reduce using rule 306 (program_unit)


State 18

  309 program_unit: enum •

    $default  reduce using rule 309 (program_unit)


State 19

  308 program_unit: class •

    $default  reduce using rule 308 (program_unit)


State 20

  244 class: class_header • "{" class_statements "}"
  245      | class_header • "{" "}"

    "{"  shift, and go to state 98


State 21

  303 program_unit: module •

    $default  reduce using rule 303 (program_unit)


State 22

  304 program_unit: import •

    $default  reduce using rule 304 (program_unit)


State 23

  305 program_unit: type_definition •

    $default  reduce using rule 305 (program_unit)


State 24

  310 program_unit: namespace •

    $default  reduce using rule 310 (program_unit)


State 25

    1 start: program_units •  [$end]
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  284 module: • "module" module_name ";"
  285       | • "module" module_name ":" IDENTIFIER ";"
  289 import: • "import" module_name ";"
  290       | • "import" ":" IDENTIFIER ";"
  291 type_definition: • "define" type "as" IDENTIFIER ";"
  292 namespace: • "namespace" module_name "{" namespace_units "}"
  293          | • "namespace" module_name "{" "}"
  302 program_units: program_units • program_unit
  303 program_unit: • module
  304             | • import
  305             | • type_definition
  306             | • callable
  307             | • variable_declaration_statement
  308             | • class
  309             | • enum
  310             | • namespace

    "class"      shift, and go to state 1
    "define"     shift, and go to state 2
    "enum"       shift, and go to state 3
    "func"       shift, and go to state 4
    "import"     shift, and go to state 5
    "let"        shift, and go to state 6
    "module"     shift, and go to state 7
    "operator"   shift, and go to state 8
    "namespace"  shift, and go to state 9

    $default  reduce using rule 1 (start)

    variable_declaration_statement  go to state 11
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 17
    enum                            go to state 18
    class                           go to state 19
    class_header                    go to state 20
    module                          go to state 21
    import                          go to state 22
    type_definition                 go to state 23
    namespace                       go to state 24
    program_unit                    go to state 99


State 26

  301 program_units: program_unit •

    $default  reduce using rule 301 (program_units)


State 27

  246 class_header: "class" IDENTIFIER •  ["{"]
  247             | "class" IDENTIFIER • inheritance
  248 inheritance: • "inherits" class_names_list

    "inherits"  shift, and go to state 100

    $default  reduce using rule 246 (class_header)

    inheritance  go to state 101


State 28

   11 type_core: TYPENAME • type_template_paramaters
   12          | TYPENAME •  [IDENTIFIER, "as", "in", "is", "weak", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", POINTER_TYPE, ARRAYL, T_END]
   20 type_template_paramaters: • T_BEGIN type_list T_END

    T_BEGIN  shift, and go to state 102

    $default  reduce using rule 12 (type_core)

    type_template_paramaters  go to state 103


State 29

   13 type_core: "bit" •

    $default  reduce using rule 13 (type_core)


State 30

   14 type_core: "bool" •

    $default  reduce using rule 14 (type_core)


State 31

   19 type_core: "char" •

    $default  reduce using rule 19 (type_core)


State 32

    3 type: "const" • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type_root           go to state 104
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 33

   18 type_core: "float" •

    $default  reduce using rule 18 (type_core)


State 34

   16 type_core: "int" •

    $default  reduce using rule 16 (type_core)


State 35

   17 type_core: "long" •

    $default  reduce using rule 17 (type_core)


State 36

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: "ref" • non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "short"   shift, and go to state 38

    non_reference_type  go to state 105
    type_core           go to state 42


State 37

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   24 reference_type: "rref" • non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "short"   shift, and go to state 38

    non_reference_type  go to state 106
    type_core           go to state 42


State 38

   15 type_core: "short" •

    $default  reduce using rule 15 (type_core)


State 39

  291 type_definition: "define" type • "as" IDENTIFIER ";"

    "as"  shift, and go to state 107


State 40

    4 type: type_root •

    $default  reduce using rule 4 (type)


State 41

    5 type_root: non_reference_type •

    $default  reduce using rule 5 (type_root)


State 42

    7 non_reference_type: type_core •  [IDENTIFIER, "as", "in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", T_END]
    8                   | type_core • POINTER_TYPE
    9                   | type_core • "weak" POINTER_TYPE
   10                   | type_core • ARRAYL xvalue_expression ARRAYR

    "weak"        shift, and go to state 108
    POINTER_TYPE  shift, and go to state 109
    ARRAYL        shift, and go to state 110

    $default  reduce using rule 7 (non_reference_type)


State 43

    6 type_root: reference_type •

    $default  reduce using rule 6 (type_root)


State 44

  239 enum: "enum" "{" • enum_members_list "}"
  240 enum_members_list: • enum_member
  241                  | • enum_members_list "," enum_member
  242 enum_member: • IDENTIFIER
  243            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 111

    enum_members_list  go to state 112
    enum_member        go to state 113


State 45

  179 function_header: "func" IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 114


State 46

  174 access_modifier: "private" •

    $default  reduce using rule 174 (access_modifier)


State 47

  175 access_modifier: "protected" •

    $default  reduce using rule 175 (access_modifier)


State 48

  173 access_modifier: "public" •

    $default  reduce using rule 173 (access_modifier)


State 49

  178 function_header: "func" access_modifier • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  180 function_modifiers: • "virtual"
  181                   | • "compeval"
  182                   | • "static"
  183                   | • "static" "compeval"

    "compeval"  shift, and go to state 115
    "static"    shift, and go to state 116
    "virtual"   shift, and go to state 117

    function_modifiers  go to state 118


State 50

  286 module_name: IDENTIFIER •

    $default  reduce using rule 286 (module_name)


State 51

  290 import: "import" ":" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 119


State 52

  287 module_name: module_name • "." IDENTIFIER
  288            | module_name • "-" IDENTIFIER
  289 import: "import" module_name • ";"

    "-"  shift, and go to state 120
    "."  shift, and go to state 121
    ";"  shift, and go to state 122


State 53

  166 variable_declaration: "let" access_modifier0 • variable_declaration_block_list
  167 variable_declaration_block_list: • variable_declaration_block
  168                                | • variable_declaration_block_list "," variable_declaration_block
  169 variable_declaration_block: • "let" type IDENTIFIER
  170                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 123

    variable_declaration_block_list  go to state 124
    variable_declaration_block       go to state 125


State 54

  171 access_modifier0: access_modifier •

    $default  reduce using rule 171 (access_modifier0)


State 55

  284 module: "module" module_name • ";"
  285       | "module" module_name • ":" IDENTIFIER ";"
  287 module_name: module_name • "." IDENTIFIER
  288            | module_name • "-" IDENTIFIER

    "-"  shift, and go to state 120
    ":"  shift, and go to state 126
    "."  shift, and go to state 121
    ";"  shift, and go to state 127


State 56

  233 operator: "new" •

    $default  reduce using rule 233 (operator)


State 57

  230 operator: "[" • "]"

    "]"  shift, and go to state 128


State 58

  217 operator: "<" •

    $default  reduce using rule 217 (operator)


State 59

  215 operator: ">" •

    $default  reduce using rule 215 (operator)


State 60

  201 operator: "+" •

    $default  reduce using rule 201 (operator)


State 61

  202 operator: "-" •

    $default  reduce using rule 202 (operator)


State 62

  204 operator: "/" •

    $default  reduce using rule 204 (operator)


State 63

  205 operator: "//" •

    $default  reduce using rule 205 (operator)


State 64

  203 operator: "*" •

    $default  reduce using rule 203 (operator)


State 65

  206 operator: "^^" •

    $default  reduce using rule 206 (operator)


State 66

  207 operator: "%" •

    $default  reduce using rule 207 (operator)


State 67

  208 operator: "+=" •

    $default  reduce using rule 208 (operator)


State 68

  209 operator: "-=" •

    $default  reduce using rule 209 (operator)


State 69

  210 operator: "*=" •

    $default  reduce using rule 210 (operator)


State 70

  211 operator: "/=" •

    $default  reduce using rule 211 (operator)


State 71

  212 operator: "//=" •

    $default  reduce using rule 212 (operator)


State 72

  213 operator: "^^=" •

    $default  reduce using rule 213 (operator)


State 73

  214 operator: "%=" •

    $default  reduce using rule 214 (operator)


State 74

  218 operator: "<=" •

    $default  reduce using rule 218 (operator)


State 75

  216 operator: ">=" •

    $default  reduce using rule 216 (operator)


State 76

  220 operator: "==" •

    $default  reduce using rule 220 (operator)


State 77

  221 operator: "!=" •

    $default  reduce using rule 221 (operator)


State 78

  219 operator: "<=>" •

    $default  reduce using rule 219 (operator)


State 79

  223 operator: "&" •

    $default  reduce using rule 223 (operator)


State 80

  222 operator: "^" •

    $default  reduce using rule 222 (operator)


State 81

  224 operator: "~" •

    $default  reduce using rule 224 (operator)


State 82

  226 operator: ">>" •

    $default  reduce using rule 226 (operator)


State 83

  225 operator: "<<" •

    $default  reduce using rule 225 (operator)


State 84

  227 operator: "=" •

    $default  reduce using rule 227 (operator)


State 85

  228 operator: "++" •

    $default  reduce using rule 228 (operator)


State 86

  229 operator: "--" •

    $default  reduce using rule 229 (operator)


State 87

  231 operator: "(" • ")"

    ")"  shift, and go to state 129


State 88

  232 operator: "->" •

    $default  reduce using rule 232 (operator)


State 89

  234 operator: type •

    $default  reduce using rule 234 (operator)


State 90

  200 operator_overload_header: "operator" operator • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 130


State 91

  287 module_name: module_name • "." IDENTIFIER
  288            | module_name • "-" IDENTIFIER
  292 namespace: "namespace" module_name • "{" namespace_units "}"
  293          | "namespace" module_name • "{" "}"

    "-"  shift, and go to state 120
    "."  shift, and go to state 121
    "{"  shift, and go to state 131


State 92

    0 $accept: start $end •

    $default  accept


State 93

  165 variable_declaration_statement: variable_declaration ";" •

    $default  reduce using rule 165 (variable_declaration_statement)


State 94

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  103 statement: • block_statement
  104          | • loop_statement
  105          | • conditional_statement
  106          | • exception_statement
  107          | • clean_up_statement
  108          | • jump_statement
  109          | • expression_statement
  110          | • variable_declaration_statement
  111          | • no_op_statement
  112 block_statement: • "{" statements0 "}"
  112                | "{" • statements0 "}"
  113 statements0: • statements
  114            | • %empty  ["}"]
  115 statements: • statement
  116           | • statements statement
  117 loop_statement: • while_loop_statement
  118               | • do_loop_statement
  119               | • for_loop_statement
  120 while_loop_statement: • "while" "(" expression ")" block_statement
  121 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  122 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  125 conditional_statement: • if_statement_sequence
  126                      | • switch_statement
  127 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  128 if_statement: • "if" "(" expression ")" block_statement
  137 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  146 exception_statement: • try_block catch_blocks
  147 try_block: • "try" block_statement
  152 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"
  164 expression_statement: • expression ";"
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  176 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "break"     shift, and go to state 139
    "castas"    shift, and go to state 140
    "cleanup"   shift, and go to state 141
    "continue"  shift, and go to state 142
    "do"        shift, and go to state 143
    "for"       shift, and go to state 144
    "goto"      shift, and go to state 145
    "if"        shift, and go to state 146
    "let"       shift, and go to state 6
    "new"       shift, and go to state 147
    "rethrow"   shift, and go to state 148
    "return"    shift, and go to state 149
    "super"     shift, and go to state 150
    "switch"    shift, and go to state 151
    "this"      shift, and go to state 152
    "throw"     shift, and go to state 153
    "try"       shift, and go to state 154
    "typeof"    shift, and go to state 155
    "while"     shift, and go to state 156
    "yield"     shift, and go to state 157
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164
    "{"         shift, and go to state 94
    ";"         shift, and go to state 165

    $default  reduce using rule 114 (statements0)

    expression                      go to state 166
    assignment_arg_expression       go to state 167
    prvalue_expression              go to state 168
    rvalue_expression               go to state 169
    xvalue_expression               go to state 170
    literal                         go to state 171
    lambda_expression               go to state 172
    new_expression                  go to state 173
    function_call                   go to state 174
    statement                       go to state 175
    block_statement                 go to state 176
    statements0                     go to state 177
    statements                      go to state 178
    loop_statement                  go to state 179
    while_loop_statement            go to state 180
    do_loop_statement               go to state 181
    for_loop_statement              go to state 182
    conditional_statement           go to state 183
    if_statement_sequence           go to state 184
    if_statement                    go to state 185
    switch_statement                go to state 186
    exception_statement             go to state 187
    try_block                       go to state 188
    clean_up_statement              go to state 189
    jump_statement                  go to state 190
    expression_statement            go to state 191
    variable_declaration_statement  go to state 192
    variable_declaration            go to state 12
    no_op_statement                 go to state 193


State 95

  177 function: function_header block_statement •

    $default  reduce using rule 177 (function)


State 96

  199 operator_overload: operator_overload_header "=" • function_options ";"
  235 function_options: • "delete"
  236                 | • "default"

    "default"  shift, and go to state 194
    "delete"   shift, and go to state 195

    function_options  go to state 196


State 97

  198 operator_overload: operator_overload_header block_statement •

    $default  reduce using rule 198 (operator_overload)


State 98

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  244 class: • class_header "{" class_statements "}"
  244      | class_header "{" • class_statements "}"
  245      | • class_header "{" "}"
  245      | class_header "{" • "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  253 class_statements: • class_statement
  254                 | • class_statements class_statement
  255 class_statement: • variable_declaration_statement
  256                | • callable
  257                | • constructor
  258                | • destructor
  259                | • property
  260                | • class
  261 property: • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270 constructor: • constructor_header initializer_list block_statement
  271            | • constructor_header initializer_list ";"
  272            | • constructor_header block_statement
  273            | • constructor_header "=" function_options ";"
  274 constructor_header: • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  281 destructor: • destructor_header block_statement
  282           | • destructor_header "=" function_options ";"
  283 destructor_header: • "~" IDENTIFIER "(" ")"

    "class"     shift, and go to state 1
    "ctor"      shift, and go to state 197
    "func"      shift, and go to state 4
    "let"       shift, and go to state 198
    "operator"  shift, and go to state 8
    "~"         shift, and go to state 199
    "}"         shift, and go to state 200

    variable_declaration_statement  go to state 201
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 202
    class                           go to state 203
    class_header                    go to state 20
    class_statements                go to state 204
    class_statement                 go to state 205
    property                        go to state 206
    constructor                     go to state 207
    constructor_header              go to state 208
    destructor                      go to state 209
    destructor_header               go to state 210


State 99

  302 program_units: program_units program_unit •

    $default  reduce using rule 302 (program_units)


State 100

  248 inheritance: "inherits" • class_names_list
  249 class_names_list: • class_name
  250                 | • class_names_list "," class_name
  251 class_name: • IDENTIFIER
  252           | • IDENTIFIER type_template_paramaters

    IDENTIFIER  shift, and go to state 211

    class_names_list  go to state 212
    class_name        go to state 213


State 101

  247 class_header: "class" IDENTIFIER inheritance •

    $default  reduce using rule 247 (class_header)


State 102

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   20 type_template_paramaters: T_BEGIN • type_list T_END
   21 type_list: • type
   22          | • type_list "," type
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 214
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    type_list           go to state 215
    reference_type      go to state 43


State 103

   11 type_core: TYPENAME type_template_paramaters •

    $default  reduce using rule 11 (type_core)


State 104

    3 type: "const" type_root •

    $default  reduce using rule 3 (type)


State 105

   23 reference_type: "ref" non_reference_type •

    $default  reduce using rule 23 (reference_type)


State 106

   24 reference_type: "rref" non_reference_type •

    $default  reduce using rule 24 (reference_type)


State 107

  291 type_definition: "define" type "as" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 216


State 108

    9 non_reference_type: type_core "weak" • POINTER_TYPE

    POINTER_TYPE  shift, and go to state 217


State 109

    8 non_reference_type: type_core POINTER_TYPE •

    $default  reduce using rule 8 (non_reference_type)


State 110

   10 non_reference_type: type_core ARRAYL • xvalue_expression ARRAYR
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    "this"      shift, and go to state 152
    "["         shift, and go to state 158
    "*"         shift, and go to state 160
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 218

    xvalue_expression  go to state 219
    function_call      go to state 174


State 111

  242 enum_member: IDENTIFIER •  [",", "}"]
  243            | IDENTIFIER • "=" INT

    "="  shift, and go to state 220

    $default  reduce using rule 242 (enum_member)


State 112

  239 enum: "enum" "{" enum_members_list • "}"
  241 enum_members_list: enum_members_list • "," enum_member

    ","  shift, and go to state 221
    "}"  shift, and go to state 222


State 113

  240 enum_members_list: enum_member •

    $default  reduce using rule 240 (enum_members_list)


State 114

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  179 function_header: "func" IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 224
    function_argument       go to state 225


State 115

  181 function_modifiers: "compeval" •

    $default  reduce using rule 181 (function_modifiers)


State 116

  182 function_modifiers: "static" •  [IDENTIFIER]
  183                   | "static" • "compeval"

    "compeval"  shift, and go to state 226

    $default  reduce using rule 182 (function_modifiers)


State 117

  180 function_modifiers: "virtual" •

    $default  reduce using rule 180 (function_modifiers)


State 118

  178 function_header: "func" access_modifier function_modifiers • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 227


State 119

  290 import: "import" ":" IDENTIFIER • ";"

    ";"  shift, and go to state 228


State 120

  288 module_name: module_name "-" • IDENTIFIER

    IDENTIFIER  shift, and go to state 229


State 121

  287 module_name: module_name "." • IDENTIFIER

    IDENTIFIER  shift, and go to state 230


State 122

  289 import: "import" module_name ";" •

    $default  reduce using rule 289 (import)


State 123

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  169 variable_declaration_block: "let" • type IDENTIFIER
  170                           | "let" • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 231
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 124

  166 variable_declaration: "let" access_modifier0 variable_declaration_block_list •  ["in", ")", ";"]
  168 variable_declaration_block_list: variable_declaration_block_list • "," variable_declaration_block

    ","  shift, and go to state 232

    $default  reduce using rule 166 (variable_declaration)


State 125

  167 variable_declaration_block_list: variable_declaration_block •

    $default  reduce using rule 167 (variable_declaration_block_list)


State 126

  285 module: "module" module_name ":" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 233


State 127

  284 module: "module" module_name ";" •

    $default  reduce using rule 284 (module)


State 128

  230 operator: "[" "]" •

    $default  reduce using rule 230 (operator)


State 129

  231 operator: "(" ")" •

    $default  reduce using rule 231 (operator)


State 130

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  200 operator_overload_header: "operator" operator "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 234
    function_argument       go to state 225


State 131

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  291 type_definition: • "define" type "as" IDENTIFIER ";"
  292 namespace: "namespace" module_name "{" • namespace_units "}"
  293          | "namespace" module_name "{" • "}"
  294 namespace_units: • namespace_unit
  295                | • namespace_units namespace_unit
  296 namespace_unit: • class
  297               | • enum
  298               | • callable
  299               | • type_definition
  300               | • variable_declaration_statement

    "class"     shift, and go to state 1
    "define"    shift, and go to state 2
    "enum"      shift, and go to state 3
    "func"      shift, and go to state 4
    "let"       shift, and go to state 6
    "operator"  shift, and go to state 8
    "}"         shift, and go to state 235

    variable_declaration_statement  go to state 236
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 237
    enum                            go to state 238
    class                           go to state 239
    class_header                    go to state 20
    type_definition                 go to state 240
    namespace_units                 go to state 241
    namespace_unit                  go to state 242


State 132

   73 xvalue_expression: IDENTIFIER •

    $default  reduce using rule 73 (xvalue_expression)


State 133

   86 literal: NPTR •

    $default  reduce using rule 86 (literal)


State 134

   85 literal: BOOL •

    $default  reduce using rule 85 (literal)


State 135

   87 literal: INT •

    $default  reduce using rule 87 (literal)


State 136

   88 literal: FLOAT •

    $default  reduce using rule 88 (literal)


State 137

   90 literal: CHAR •

    $default  reduce using rule 90 (literal)


State 138

   89 literal: STRING •

    $default  reduce using rule 89 (literal)


State 139

  158 jump_statement: "break" • ";"

    ";"  shift, and go to state 243


State 140

   67 prvalue_expression: "castas" • "<" type ">" "(" rvalue_expression ")"

    "<"  shift, and go to state 244


State 141

  152 clean_up_statement: "cleanup" • "(" IDENTIFIER "," clean_up_arg ")" ";"

    "("  shift, and go to state 245


State 142

  159 jump_statement: "continue" • ";"

    ";"  shift, and go to state 246


State 143

  112 block_statement: • "{" statements0 "}"
  121 do_loop_statement: "do" • block_statement "while" "(" expression ")"

    "{"  shift, and go to state 94

    block_statement  go to state 247


State 144

  122 for_loop_statement: "for" • "(" for_loop_condition ")" block_statement

    "("  shift, and go to state 248


State 145

  163 jump_statement: "goto" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 249


State 146

  128 if_statement: "if" • "(" expression ")" block_statement

    "("  shift, and go to state 250


State 147

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   92 new_expression: "new" • type "(" function_call_list ")"
   93               | "new" • "heap" type "(" function_call_list ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "heap"    shift, and go to state 251
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 252
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 148

  160 jump_statement: "rethrow" • ";"

    ";"  shift, and go to state 253


State 149

  157 jump_statement: "return" • ";"

    ";"  shift, and go to state 254


State 150

   32 prvalue_expression: "super" •

    $default  reduce using rule 32 (prvalue_expression)


State 151

  137 switch_statement: "switch" • "(" expression ")" case_blocks0 default_block0

    "("  shift, and go to state 255


State 152

   74 xvalue_expression: "this" •

    $default  reduce using rule 74 (xvalue_expression)


State 153

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  161 jump_statement: "throw" • expression ";"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 256
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 154

  112 block_statement: • "{" statements0 "}"
  147 try_block: "try" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 257


State 155

   66 prvalue_expression: "typeof" • "(" rvalue_expression ")"

    "("  shift, and go to state 258


State 156

  120 while_loop_statement: "while" • "(" expression ")" block_statement

    "("  shift, and go to state 259


State 157

  162 jump_statement: "yield" • ";"

    ";"  shift, and go to state 260


State 158

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [":"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   83                  | "[" • array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   94 array_index_list: • array_index
   95                 | • array_index_list "," array_index
   96 array_index: • expression
   97            | • expression0 ":" expression0
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    $default  reduce using rule 28 (expression0)

    expression                 go to state 261
    expression0                go to state 262
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    array_index_list           go to state 263
    array_index                go to state 264
    function_call              go to state 174


State 159

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   65                   | "-" • rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 266
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 160

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   79                  | "*" • xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    "this"      shift, and go to state 152
    "["         shift, and go to state 158
    "*"         shift, and go to state 160
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 218

    xvalue_expression  go to state 268
    function_call      go to state 174


State 161

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   64                   | "!" • rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 269
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 162

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   75                  | "++" • xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    "this"      shift, and go to state 152
    "["         shift, and go to state 158
    "*"         shift, and go to state 160
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 218

    xvalue_expression  go to state 270
    function_call      go to state 174


State 163

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   76                  | "--" • xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    "this"      shift, and go to state 152
    "["         shift, and go to state 158
    "*"         shift, and go to state 160
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 218

    xvalue_expression  go to state 271
    function_call      go to state 174


State 164

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | "(" • rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   82                  | "(" • rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91                  | "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 132
    TYPENAME    shift, and go to state 28
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "bit"       shift, and go to state 29
    "bool"      shift, and go to state 30
    "castas"    shift, and go to state 140
    "char"      shift, and go to state 31
    "const"     shift, and go to state 32
    "float"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "new"       shift, and go to state 147
    "ref"       shift, and go to state 36
    "rref"      shift, and go to state 37
    "short"     shift, and go to state 38
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    prvalue_expression      go to state 265
    rvalue_expression       go to state 272
    xvalue_expression       go to state 267
    literal                 go to state 171
    lambda_expression       go to state 172
    new_expression          go to state 173
    function_call           go to state 174
    function_argument_list  go to state 273
    function_argument       go to state 225


State 165

  176 no_op_statement: ";" •

    $default  reduce using rule 176 (no_op_statement)


State 166

  164 expression_statement: expression • ";"

    ";"  shift, and go to state 274


State 167

   25 expression: assignment_arg_expression •

    $default  reduce using rule 25 (expression)


State 168

   30 assignment_arg_expression: prvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   71 rvalue_expression: prvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]

    "in"      reduce using rule 30 (assignment_arg_expression)
    "]"       reduce using rule 30 (assignment_arg_expression)
    ","       reduce using rule 30 (assignment_arg_expression)
    ")"       reduce using rule 30 (assignment_arg_expression)
    ":"       reduce using rule 30 (assignment_arg_expression)
    ";"       reduce using rule 30 (assignment_arg_expression)
    $default  reduce using rule 71 (rvalue_expression)


State 169

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293


State 170

   26 expression: xvalue_expression • "=" rvalue_expression
   29 assignment_arg_expression: xvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   39 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   40                   | xvalue_expression • "-=" rvalue_expression
   41                   | xvalue_expression • "*=" rvalue_expression
   42                   | xvalue_expression • "/=" rvalue_expression
   43                   | xvalue_expression • "//=" rvalue_expression
   44                   | xvalue_expression • "^^=" rvalue_expression
   57                   | xvalue_expression • "&=" rvalue_expression
   58                   | xvalue_expression • "^=" rvalue_expression
   59                   | xvalue_expression • "|=" rvalue_expression
   60                   | xvalue_expression • "~=" rvalue_expression
   61                   | xvalue_expression • ">>=" rvalue_expression
   62                   | xvalue_expression • "<<=" rvalue_expression
   72 rvalue_expression: xvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]
   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 294
    "-="   shift, and go to state 295
    "*="   shift, and go to state 296
    "/="   shift, and go to state 297
    "//="  shift, and go to state 298
    "^^="  shift, and go to state 299
    "="    shift, and go to state 300
    "++"   shift, and go to state 301
    "--"   shift, and go to state 302
    "("    shift, and go to state 303
    "."    shift, and go to state 304
    "->"   shift, and go to state 305
    "&="   shift, and go to state 306
    "^="   shift, and go to state 307
    "|="   shift, and go to state 308
    "~="   shift, and go to state 309
    "<<="  shift, and go to state 310
    ">>="  shift, and go to state 311

    "in"      reduce using rule 29 (assignment_arg_expression)
    "]"       reduce using rule 29 (assignment_arg_expression)
    ","       reduce using rule 29 (assignment_arg_expression)
    ")"       reduce using rule 29 (assignment_arg_expression)
    ":"       reduce using rule 29 (assignment_arg_expression)
    ";"       reduce using rule 29 (assignment_arg_expression)
    $default  reduce using rule 72 (rvalue_expression)


State 171

   31 prvalue_expression: literal •

    $default  reduce using rule 31 (prvalue_expression)


State 172

   70 prvalue_expression: lambda_expression •

    $default  reduce using rule 70 (prvalue_expression)


State 173

   69 prvalue_expression: new_expression •

    $default  reduce using rule 69 (prvalue_expression)


State 174

   84 xvalue_expression: function_call •

    $default  reduce using rule 84 (xvalue_expression)


State 175

  115 statements: statement •

    $default  reduce using rule 115 (statements)


State 176

  103 statement: block_statement •

    $default  reduce using rule 103 (statement)


State 177

  112 block_statement: "{" statements0 • "}"

    "}"  shift, and go to state 312


State 178

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  103 statement: • block_statement
  104          | • loop_statement
  105          | • conditional_statement
  106          | • exception_statement
  107          | • clean_up_statement
  108          | • jump_statement
  109          | • expression_statement
  110          | • variable_declaration_statement
  111          | • no_op_statement
  112 block_statement: • "{" statements0 "}"
  113 statements0: statements •  ["}"]
  116 statements: statements • statement
  117 loop_statement: • while_loop_statement
  118               | • do_loop_statement
  119               | • for_loop_statement
  120 while_loop_statement: • "while" "(" expression ")" block_statement
  121 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  122 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  125 conditional_statement: • if_statement_sequence
  126                      | • switch_statement
  127 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  128 if_statement: • "if" "(" expression ")" block_statement
  137 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  146 exception_statement: • try_block catch_blocks
  147 try_block: • "try" block_statement
  152 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"
  164 expression_statement: • expression ";"
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  176 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "break"     shift, and go to state 139
    "castas"    shift, and go to state 140
    "cleanup"   shift, and go to state 141
    "continue"  shift, and go to state 142
    "do"        shift, and go to state 143
    "for"       shift, and go to state 144
    "goto"      shift, and go to state 145
    "if"        shift, and go to state 146
    "let"       shift, and go to state 6
    "new"       shift, and go to state 147
    "rethrow"   shift, and go to state 148
    "return"    shift, and go to state 149
    "super"     shift, and go to state 150
    "switch"    shift, and go to state 151
    "this"      shift, and go to state 152
    "throw"     shift, and go to state 153
    "try"       shift, and go to state 154
    "typeof"    shift, and go to state 155
    "while"     shift, and go to state 156
    "yield"     shift, and go to state 157
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164
    "{"         shift, and go to state 94
    ";"         shift, and go to state 165

    $default  reduce using rule 113 (statements0)

    expression                      go to state 166
    assignment_arg_expression       go to state 167
    prvalue_expression              go to state 168
    rvalue_expression               go to state 169
    xvalue_expression               go to state 170
    literal                         go to state 171
    lambda_expression               go to state 172
    new_expression                  go to state 173
    function_call                   go to state 174
    statement                       go to state 313
    block_statement                 go to state 176
    loop_statement                  go to state 179
    while_loop_statement            go to state 180
    do_loop_statement               go to state 181
    for_loop_statement              go to state 182
    conditional_statement           go to state 183
    if_statement_sequence           go to state 184
    if_statement                    go to state 185
    switch_statement                go to state 186
    exception_statement             go to state 187
    try_block                       go to state 188
    clean_up_statement              go to state 189
    jump_statement                  go to state 190
    expression_statement            go to state 191
    variable_declaration_statement  go to state 192
    variable_declaration            go to state 12
    no_op_statement                 go to state 193


State 179

  104 statement: loop_statement •

    $default  reduce using rule 104 (statement)


State 180

  117 loop_statement: while_loop_statement •

    $default  reduce using rule 117 (loop_statement)


State 181

  118 loop_statement: do_loop_statement •

    $default  reduce using rule 118 (loop_statement)


State 182

  119 loop_statement: for_loop_statement •

    $default  reduce using rule 119 (loop_statement)


State 183

  105 statement: conditional_statement •

    $default  reduce using rule 105 (statement)


State 184

  125 conditional_statement: if_statement_sequence •

    $default  reduce using rule 125 (conditional_statement)


State 185

  127 if_statement_sequence: if_statement • else_if_statements0 else_statement0
  129 else_if_statements0: • else_if_statements
  130                    | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  131 else_if_statements: • else_if_statement
  132                   | • else_if_statements else_if_statement
  133 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 314

    $default  reduce using rule 130 (else_if_statements0)

    else_if_statements0  go to state 315
    else_if_statements   go to state 316
    else_if_statement    go to state 317


State 186

  126 conditional_statement: switch_statement •

    $default  reduce using rule 126 (conditional_statement)


State 187

  106 statement: exception_statement •

    $default  reduce using rule 106 (statement)


State 188

  146 exception_statement: try_block • catch_blocks
  148 catch_blocks: • catch_block
  149             | • catch_blocks catch_block
  150 catch_block: • "catch" "(" variable_declaration ")" block_statement
  151            | • "catch-all" block_statement

    "catch"      shift, and go to state 318
    "catch-all"  shift, and go to state 319

    catch_blocks  go to state 320
    catch_block   go to state 321


State 189

  107 statement: clean_up_statement •

    $default  reduce using rule 107 (statement)


State 190

  108 statement: jump_statement •

    $default  reduce using rule 108 (statement)


State 191

  109 statement: expression_statement •

    $default  reduce using rule 109 (statement)


State 192

  110 statement: variable_declaration_statement •

    $default  reduce using rule 110 (statement)


State 193

  111 statement: no_op_statement •

    $default  reduce using rule 111 (statement)


State 194

  236 function_options: "default" •

    $default  reduce using rule 236 (function_options)


State 195

  235 function_options: "delete" •

    $default  reduce using rule 235 (function_options)


State 196

  199 operator_overload: operator_overload_header "=" function_options • ";"

    ";"  shift, and go to state 322


State 197

  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  274 constructor_header: "ctor" • access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    access_modifier  go to state 323


State 198

  166 variable_declaration: "let" • access_modifier0 variable_declaration_block_list
  171 access_modifier0: • access_modifier
  172                 | • %empty  ["let"]
  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  261 property: "let" • access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    $default  reduce using rule 172 (access_modifier0)

    access_modifier0  go to state 53
    access_modifier   go to state 324


State 199

  283 destructor_header: "~" • IDENTIFIER "(" ")"

    IDENTIFIER  shift, and go to state 325


State 200

  245 class: class_header "{" "}" •

    $default  reduce using rule 245 (class)


State 201

  255 class_statement: variable_declaration_statement •

    $default  reduce using rule 255 (class_statement)


State 202

  256 class_statement: callable •

    $default  reduce using rule 256 (class_statement)


State 203

  260 class_statement: class •

    $default  reduce using rule 260 (class_statement)


State 204

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  244 class: • class_header "{" class_statements "}"
  244      | class_header "{" class_statements • "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  254 class_statements: class_statements • class_statement
  255 class_statement: • variable_declaration_statement
  256                | • callable
  257                | • constructor
  258                | • destructor
  259                | • property
  260                | • class
  261 property: • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270 constructor: • constructor_header initializer_list block_statement
  271            | • constructor_header initializer_list ";"
  272            | • constructor_header block_statement
  273            | • constructor_header "=" function_options ";"
  274 constructor_header: • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  281 destructor: • destructor_header block_statement
  282           | • destructor_header "=" function_options ";"
  283 destructor_header: • "~" IDENTIFIER "(" ")"

    "class"     shift, and go to state 1
    "ctor"      shift, and go to state 197
    "func"      shift, and go to state 4
    "let"       shift, and go to state 198
    "operator"  shift, and go to state 8
    "~"         shift, and go to state 199
    "}"         shift, and go to state 326

    variable_declaration_statement  go to state 201
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 202
    class                           go to state 203
    class_header                    go to state 20
    class_statement                 go to state 327
    property                        go to state 206
    constructor                     go to state 207
    constructor_header              go to state 208
    destructor                      go to state 209
    destructor_header               go to state 210


State 205

  253 class_statements: class_statement •

    $default  reduce using rule 253 (class_statements)


State 206

  259 class_statement: property •

    $default  reduce using rule 259 (class_statement)


State 207

  257 class_statement: constructor •

    $default  reduce using rule 257 (class_statement)


State 208

  112 block_statement: • "{" statements0 "}"
  270 constructor: constructor_header • initializer_list block_statement
  271            | constructor_header • initializer_list ";"
  272            | constructor_header • block_statement
  273            | constructor_header • "=" function_options ";"
  275 initializer_list: • "=>" "initailize" "(" initializer_blocks_list ")"

    "="   shift, and go to state 328
    "{"   shift, and go to state 94
    "=>"  shift, and go to state 329

    block_statement   go to state 330
    initializer_list  go to state 331


State 209

  258 class_statement: destructor •

    $default  reduce using rule 258 (class_statement)


State 210

  112 block_statement: • "{" statements0 "}"
  281 destructor: destructor_header • block_statement
  282           | destructor_header • "=" function_options ";"

    "="  shift, and go to state 332
    "{"  shift, and go to state 94

    block_statement  go to state 333


State 211

   20 type_template_paramaters: • T_BEGIN type_list T_END
  251 class_name: IDENTIFIER •  [",", "{"]
  252           | IDENTIFIER • type_template_paramaters

    T_BEGIN  shift, and go to state 102

    $default  reduce using rule 251 (class_name)

    type_template_paramaters  go to state 334


State 212

  248 inheritance: "inherits" class_names_list •  ["{"]
  250 class_names_list: class_names_list • "," class_name

    ","  shift, and go to state 335

    $default  reduce using rule 248 (inheritance)


State 213

  249 class_names_list: class_name •

    $default  reduce using rule 249 (class_names_list)


State 214

   21 type_list: type •

    $default  reduce using rule 21 (type_list)


State 215

   20 type_template_paramaters: T_BEGIN type_list • T_END
   22 type_list: type_list • "," type

    ","    shift, and go to state 336
    T_END  shift, and go to state 337


State 216

  291 type_definition: "define" type "as" IDENTIFIER • ";"

    ";"  shift, and go to state 338


State 217

    9 non_reference_type: type_core "weak" POINTER_TYPE •

    $default  reduce using rule 9 (non_reference_type)


State 218

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   82                  | "(" • rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 339
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 219

   10 non_reference_type: type_core ARRAYL xvalue_expression • ARRAYR
   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"    shift, and go to state 301
    "--"    shift, and go to state 302
    "("     shift, and go to state 303
    "."     shift, and go to state 304
    "->"    shift, and go to state 305
    ARRAYR  shift, and go to state 340


State 220

  243 enum_member: IDENTIFIER "=" • INT

    INT  shift, and go to state 341


State 221

  241 enum_members_list: enum_members_list "," • enum_member
  242 enum_member: • IDENTIFIER
  243            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 111

    enum_member  go to state 342


State 222

  239 enum: "enum" "{" enum_members_list "}" •

    $default  reduce using rule 239 (enum)


State 223

  186 function_argument: type • IDENTIFIER
  187                  | type • "..."
  188                  | type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 343
    "..."       shift, and go to state 344


State 224

  179 function_header: "func" IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 345
    ")"  shift, and go to state 346


State 225

  184 function_argument_list: function_argument •

    $default  reduce using rule 184 (function_argument_list)


State 226

  183 function_modifiers: "static" "compeval" •

    $default  reduce using rule 183 (function_modifiers)


State 227

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 347


State 228

  290 import: "import" ":" IDENTIFIER ";" •

    $default  reduce using rule 290 (import)


State 229

  288 module_name: module_name "-" IDENTIFIER •

    $default  reduce using rule 288 (module_name)


State 230

  287 module_name: module_name "." IDENTIFIER •

    $default  reduce using rule 287 (module_name)


State 231

  169 variable_declaration_block: "let" type • IDENTIFIER
  170                           | "let" type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 348


State 232

  168 variable_declaration_block_list: variable_declaration_block_list "," • variable_declaration_block
  169 variable_declaration_block: • "let" type IDENTIFIER
  170                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 123

    variable_declaration_block  go to state 349


State 233

  285 module: "module" module_name ":" IDENTIFIER • ";"

    ";"  shift, and go to state 350


State 234

  185 function_argument_list: function_argument_list • "," function_argument
  200 operator_overload_header: "operator" operator "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 345
    ")"  shift, and go to state 351


State 235

  293 namespace: "namespace" module_name "{" "}" •

    $default  reduce using rule 293 (namespace)


State 236

  300 namespace_unit: variable_declaration_statement •

    $default  reduce using rule 300 (namespace_unit)


State 237

  298 namespace_unit: callable •

    $default  reduce using rule 298 (namespace_unit)


State 238

  297 namespace_unit: enum •

    $default  reduce using rule 297 (namespace_unit)


State 239

  296 namespace_unit: class •

    $default  reduce using rule 296 (namespace_unit)


State 240

  299 namespace_unit: type_definition •

    $default  reduce using rule 299 (namespace_unit)


State 241

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  291 type_definition: • "define" type "as" IDENTIFIER ";"
  292 namespace: "namespace" module_name "{" namespace_units • "}"
  295 namespace_units: namespace_units • namespace_unit
  296 namespace_unit: • class
  297               | • enum
  298               | • callable
  299               | • type_definition
  300               | • variable_declaration_statement

    "class"     shift, and go to state 1
    "define"    shift, and go to state 2
    "enum"      shift, and go to state 3
    "func"      shift, and go to state 4
    "let"       shift, and go to state 6
    "operator"  shift, and go to state 8
    "}"         shift, and go to state 352

    variable_declaration_statement  go to state 236
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 237
    enum                            go to state 238
    class                           go to state 239
    class_header                    go to state 20
    type_definition                 go to state 240
    namespace_unit                  go to state 353


State 242

  294 namespace_units: namespace_unit •

    $default  reduce using rule 294 (namespace_units)


State 243

  158 jump_statement: "break" ";" •

    $default  reduce using rule 158 (jump_statement)


State 244

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   67 prvalue_expression: "castas" "<" • type ">" "(" rvalue_expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 354
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 245

  152 clean_up_statement: "cleanup" "(" • IDENTIFIER "," clean_up_arg ")" ";"

    IDENTIFIER  shift, and go to state 355


State 246

  159 jump_statement: "continue" ";" •

    $default  reduce using rule 159 (jump_statement)


State 247

  121 do_loop_statement: "do" block_statement • "while" "(" expression ")"

    "while"  shift, and go to state 356


State 248

  122 for_loop_statement: "for" "(" • for_loop_condition ")" block_statement
  123 for_loop_condition: • variable_declaration ";" expression0 ";" expression0
  124                   | • variable_declaration "in" expression
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list

    "let"  shift, and go to state 6

    for_loop_condition    go to state 357
    variable_declaration  go to state 358


State 249

  163 jump_statement: "goto" IDENTIFIER • ";"

    ";"  shift, and go to state 359


State 250

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  128 if_statement: "if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 360
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 251

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   93 new_expression: "new" "heap" • type "(" function_call_list ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 361
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 252

   92 new_expression: "new" type • "(" function_call_list ")"

    "("  shift, and go to state 362


State 253

  160 jump_statement: "rethrow" ";" •

    $default  reduce using rule 160 (jump_statement)


State 254

  157 jump_statement: "return" ";" •

    $default  reduce using rule 157 (jump_statement)


State 255

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  137 switch_statement: "switch" "(" • expression ")" case_blocks0 default_block0

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 363
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 256

  161 jump_statement: "throw" expression • ";"

    ";"  shift, and go to state 364


State 257

  147 try_block: "try" block_statement •

    $default  reduce using rule 147 (try_block)


State 258

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   66                   | "typeof" "(" • rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 365
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 259

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  120 while_loop_statement: "while" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 366
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 260

  162 jump_statement: "yield" ";" •

    $default  reduce using rule 162 (jump_statement)


State 261

   27 expression0: expression •  [":"]
   96 array_index: expression •  ["]", ","]

    ":"       reduce using rule 27 (expression0)
    $default  reduce using rule 96 (array_index)


State 262

   97 array_index: expression0 • ":" expression0

    ":"  shift, and go to state 367


State 263

   83 xvalue_expression: "[" array_index_list • "]"
   95 array_index_list: array_index_list • "," array_index

    "]"  shift, and go to state 368
    ","  shift, and go to state 369


State 264

   94 array_index_list: array_index •

    $default  reduce using rule 94 (array_index_list)


State 265

   71 rvalue_expression: prvalue_expression •

    $default  reduce using rule 71 (rvalue_expression)


State 266

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   65                   | "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 291

    $default  reduce using rule 65 (prvalue_expression)

    Conflict between rule 65 and token "is" resolved as reduce ("is" < UMINUS).
    Conflict between rule 65 and token ">" resolved as reduce (">" < UMINUS).
    Conflict between rule 65 and token "+" resolved as reduce ("+" < UMINUS).
    Conflict between rule 65 and token "-" resolved as reduce ("-" < UMINUS).
    Conflict between rule 65 and token "/" resolved as reduce ("/" < UMINUS).
    Conflict between rule 65 and token "//" resolved as reduce ("//" < UMINUS).
    Conflict between rule 65 and token "*" resolved as reduce ("*" < UMINUS).
    Conflict between rule 65 and token "^^" resolved as reduce ("^^" < UMINUS).
    Conflict between rule 65 and token "<=" resolved as reduce ("<=" < UMINUS).
    Conflict between rule 65 and token ">=" resolved as reduce (">=" < UMINUS).
    Conflict between rule 65 and token "<=>" resolved as reduce ("<=>" < UMINUS).
    Conflict between rule 65 and token "&&" resolved as reduce ("&&" < UMINUS).
    Conflict between rule 65 and token "||" resolved as reduce ("||" < UMINUS).
    Conflict between rule 65 and token "&" resolved as reduce ("&" < UMINUS).
    Conflict between rule 65 and token "|" resolved as reduce ("|" < UMINUS).
    Conflict between rule 65 and token "^" resolved as reduce ("^" < UMINUS).
    Conflict between rule 65 and token "~" resolved as shift (%right "~").
    Conflict between rule 65 and token ">>" resolved as reduce (">>" < UMINUS).
    Conflict between rule 65 and token "<<" resolved as reduce ("<<" < UMINUS).


State 267

   39 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   40                   | xvalue_expression • "-=" rvalue_expression
   41                   | xvalue_expression • "*=" rvalue_expression
   42                   | xvalue_expression • "/=" rvalue_expression
   43                   | xvalue_expression • "//=" rvalue_expression
   44                   | xvalue_expression • "^^=" rvalue_expression
   57                   | xvalue_expression • "&=" rvalue_expression
   58                   | xvalue_expression • "^=" rvalue_expression
   59                   | xvalue_expression • "|=" rvalue_expression
   60                   | xvalue_expression • "~=" rvalue_expression
   61                   | xvalue_expression • ">>=" rvalue_expression
   62                   | xvalue_expression • "<<=" rvalue_expression
   72 rvalue_expression: xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", ")", ":", ";"]
   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 294
    "-="   shift, and go to state 295
    "*="   shift, and go to state 296
    "/="   shift, and go to state 297
    "//="  shift, and go to state 298
    "^^="  shift, and go to state 299
    "++"   shift, and go to state 301
    "--"   shift, and go to state 302
    "("    shift, and go to state 303
    "."    shift, and go to state 304
    "->"   shift, and go to state 305
    "&="   shift, and go to state 306
    "^="   shift, and go to state 307
    "|="   shift, and go to state 308
    "~="   shift, and go to state 309
    "<<="  shift, and go to state 310
    ">>="  shift, and go to state 311

    $default  reduce using rule 72 (rvalue_expression)


State 268

   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   79                  | "*" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 301
    "--"  shift, and go to state 302
    "("   shift, and go to state 303
    "."   shift, and go to state 304
    "->"  shift, and go to state 305

    $default  reduce using rule 79 (xvalue_expression)

    Conflict between rule 79 and token "++" resolved as shift (%right "++").
    Conflict between rule 79 and token "--" resolved as shift (%right "--").
    Conflict between rule 79 and token "(" resolved as shift (DEREF < "(").
    Conflict between rule 79 and token "." resolved as shift (DEREF < ".").
    Conflict between rule 79 and token "->" resolved as shift (DEREF < "->").


State 269

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   64                   | "!" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 291

    $default  reduce using rule 64 (prvalue_expression)

    Conflict between rule 64 and token "is" resolved as reduce ("is" < "!").
    Conflict between rule 64 and token ">" resolved as reduce (">" < "!").
    Conflict between rule 64 and token "+" resolved as reduce ("+" < "!").
    Conflict between rule 64 and token "-" resolved as reduce ("-" < "!").
    Conflict between rule 64 and token "/" resolved as reduce ("/" < "!").
    Conflict between rule 64 and token "//" resolved as reduce ("//" < "!").
    Conflict between rule 64 and token "*" resolved as reduce ("*" < "!").
    Conflict between rule 64 and token "^^" resolved as reduce ("^^" < "!").
    Conflict between rule 64 and token "<=" resolved as reduce ("<=" < "!").
    Conflict between rule 64 and token ">=" resolved as reduce (">=" < "!").
    Conflict between rule 64 and token "<=>" resolved as reduce ("<=>" < "!").
    Conflict between rule 64 and token "&&" resolved as reduce ("&&" < "!").
    Conflict between rule 64 and token "||" resolved as reduce ("||" < "!").
    Conflict between rule 64 and token "&" resolved as reduce ("&" < "!").
    Conflict between rule 64 and token "|" resolved as reduce ("|" < "!").
    Conflict between rule 64 and token "^" resolved as reduce ("^" < "!").
    Conflict between rule 64 and token "~" resolved as shift (%right "~").
    Conflict between rule 64 and token ">>" resolved as reduce (">>" < "!").
    Conflict between rule 64 and token "<<" resolved as reduce ("<<" < "!").


State 270

   75 xvalue_expression: "++" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   77                  | xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 301
    "--"  shift, and go to state 302
    "("   shift, and go to state 303
    "."   shift, and go to state 304
    "->"  shift, and go to state 305

    $default  reduce using rule 75 (xvalue_expression)

    Conflict between rule 75 and token "++" resolved as shift (%right "++").
    Conflict between rule 75 and token "--" resolved as shift (%right "--").
    Conflict between rule 75 and token "(" resolved as shift ("++" < "(").
    Conflict between rule 75 and token "." resolved as shift ("++" < ".").
    Conflict between rule 75 and token "->" resolved as shift ("++" < "->").


State 271

   76 xvalue_expression: "--" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   77                  | xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 301
    "--"  shift, and go to state 302
    "("   shift, and go to state 303
    "."   shift, and go to state 304
    "->"  shift, and go to state 305

    $default  reduce using rule 76 (xvalue_expression)

    Conflict between rule 76 and token "++" resolved as shift (%right "++").
    Conflict between rule 76 and token "--" resolved as shift (%right "--").
    Conflict between rule 76 and token "(" resolved as shift ("--" < "(").
    Conflict between rule 76 and token "." resolved as shift ("--" < ".").
    Conflict between rule 76 and token "->" resolved as shift ("--" < "->").


State 272

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   68                   | "(" rvalue_expression • ")" "?" rvalue_expression ":" rvalue_expression
   82 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293
    ")"    shift, and go to state 370


State 273

   91 lambda_expression: "(" function_argument_list • ")" "->" return_types_list "=>" block_statement
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 345
    ")"  shift, and go to state 371


State 274

  164 expression_statement: expression ";" •

    $default  reduce using rule 164 (expression_statement)


State 275

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   63 prvalue_expression: rvalue_expression "is" • type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 372
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 276

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   45                   | rvalue_expression ">" • rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 373
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 277

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   33                   | rvalue_expression "+" • rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 374
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 278

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   34                   | rvalue_expression "-" • rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 375
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 279

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   36                   | rvalue_expression "/" • rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 376
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 280

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   37                   | rvalue_expression "//" • rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 377
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 281

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   35                   | rvalue_expression "*" • rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 378
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 282

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   38                   | rvalue_expression "^^" • rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 379
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 283

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   47                   | rvalue_expression "<=" • rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 380
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 284

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   46                   | rvalue_expression ">=" • rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 381
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 285

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   48                   | rvalue_expression "<=>" • rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 382
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 286

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   49                   | rvalue_expression "&&" • rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 383
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 287

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   50                   | rvalue_expression "||" • rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 384
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 288

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   51                   | rvalue_expression "&" • rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 385
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 289

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   53                   | rvalue_expression "|" • rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 386
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 290

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   52                   | rvalue_expression "^" • rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 387
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 291

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   54                   | rvalue_expression "~" • rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 388
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 292

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   55                   | rvalue_expression ">>" • rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 389
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 293

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   56                   | rvalue_expression "<<" • rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 390
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 294

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   39                   | xvalue_expression "+=" • rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 391
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 295

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   40                   | xvalue_expression "-=" • rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 392
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 296

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   41                   | xvalue_expression "*=" • rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 393
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 297

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   42                   | xvalue_expression "/=" • rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 394
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 298

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   43                   | xvalue_expression "//=" • rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 395
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 299

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   44                   | xvalue_expression "^^=" • rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 396
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 300

   26 expression: xvalue_expression "=" • rvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 397
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 301

   77 xvalue_expression: xvalue_expression "++" •

    $default  reduce using rule 77 (xvalue_expression)


State 302

   78 xvalue_expression: xvalue_expression "--" •

    $default  reduce using rule 78 (xvalue_expression)


State 303

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   98 function_call: xvalue_expression "(" • function_argument_list ")"
   99              | xvalue_expression "(" • ")"
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    ")"       shift, and go to state 398

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 399
    function_argument       go to state 225


State 304

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   80                  | xvalue_expression "." • xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    "this"      shift, and go to state 152
    "["         shift, and go to state 158
    "*"         shift, and go to state 160
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 218

    xvalue_expression  go to state 400
    function_call      go to state 174


State 305

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   81                  | xvalue_expression "->" • xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    "this"      shift, and go to state 152
    "["         shift, and go to state 158
    "*"         shift, and go to state 160
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 218

    xvalue_expression  go to state 401
    function_call      go to state 174


State 306

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   57                   | xvalue_expression "&=" • rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 402
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 307

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   58                   | xvalue_expression "^=" • rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 403
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 308

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   59                   | xvalue_expression "|=" • rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 404
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 309

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   60                   | xvalue_expression "~=" • rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 405
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 310

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   62                   | xvalue_expression "<<=" • rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 406
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 311

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   61                   | xvalue_expression ">>=" • rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 407
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 312

  112 block_statement: "{" statements0 "}" •

    $default  reduce using rule 112 (block_statement)


State 313

  116 statements: statements statement •

    $default  reduce using rule 116 (statements)


State 314

  133 else_if_statement: "else-if" • "(" expression ")" block_statement

    "("  shift, and go to state 408


State 315

  127 if_statement_sequence: if_statement else_if_statements0 • else_statement0
  134 else_statement0: • else_statement
  135                | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  136 else_statement: • "else" block_statement

    "else"  shift, and go to state 409

    $default  reduce using rule 135 (else_statement0)

    else_statement0  go to state 410
    else_statement   go to state 411


State 316

  129 else_if_statements0: else_if_statements •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  132 else_if_statements: else_if_statements • else_if_statement
  133 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 314

    $default  reduce using rule 129 (else_if_statements0)

    else_if_statement  go to state 412


State 317

  131 else_if_statements: else_if_statement •

    $default  reduce using rule 131 (else_if_statements)


State 318

  150 catch_block: "catch" • "(" variable_declaration ")" block_statement

    "("  shift, and go to state 413


State 319

  112 block_statement: • "{" statements0 "}"
  151 catch_block: "catch-all" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 414


State 320

  146 exception_statement: try_block catch_blocks •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  149 catch_blocks: catch_blocks • catch_block
  150 catch_block: • "catch" "(" variable_declaration ")" block_statement
  151            | • "catch-all" block_statement

    "catch"      shift, and go to state 318
    "catch-all"  shift, and go to state 319

    $default  reduce using rule 146 (exception_statement)

    catch_block  go to state 415


State 321

  148 catch_blocks: catch_block •

    $default  reduce using rule 148 (catch_blocks)


State 322

  199 operator_overload: operator_overload_header "=" function_options ";" •

    $default  reduce using rule 199 (operator_overload)


State 323

  274 constructor_header: "ctor" access_modifier • compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  279 compeval0: • "compeval"
  280          | • %empty  [IDENTIFIER]

    "compeval"  shift, and go to state 416

    $default  reduce using rule 280 (compeval0)

    compeval0  go to state 417


State 324

  171 access_modifier0: access_modifier •  ["let"]
  261 property: "let" access_modifier • "property" type IDENTIFIER "{" property_blocks "}" ";"

    "property"  shift, and go to state 418

    $default  reduce using rule 171 (access_modifier0)


State 325

  283 destructor_header: "~" IDENTIFIER • "(" ")"

    "("  shift, and go to state 419


State 326

  244 class: class_header "{" class_statements "}" •

    $default  reduce using rule 244 (class)


State 327

  254 class_statements: class_statements class_statement •

    $default  reduce using rule 254 (class_statements)


State 328

  235 function_options: • "delete"
  236                 | • "default"
  273 constructor: constructor_header "=" • function_options ";"

    "default"  shift, and go to state 194
    "delete"   shift, and go to state 195

    function_options  go to state 420


State 329

  275 initializer_list: "=>" • "initailize" "(" initializer_blocks_list ")"

    "initailize"  shift, and go to state 421


State 330

  272 constructor: constructor_header block_statement •

    $default  reduce using rule 272 (constructor)


State 331

  112 block_statement: • "{" statements0 "}"
  270 constructor: constructor_header initializer_list • block_statement
  271            | constructor_header initializer_list • ";"

    "{"  shift, and go to state 94
    ";"  shift, and go to state 422

    block_statement  go to state 423


State 332

  235 function_options: • "delete"
  236                 | • "default"
  282 destructor: destructor_header "=" • function_options ";"

    "default"  shift, and go to state 194
    "delete"   shift, and go to state 195

    function_options  go to state 424


State 333

  281 destructor: destructor_header block_statement •

    $default  reduce using rule 281 (destructor)


State 334

  252 class_name: IDENTIFIER type_template_paramaters •

    $default  reduce using rule 252 (class_name)


State 335

  250 class_names_list: class_names_list "," • class_name
  251 class_name: • IDENTIFIER
  252           | • IDENTIFIER type_template_paramaters

    IDENTIFIER  shift, and go to state 211

    class_name  go to state 425


State 336

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   22 type_list: type_list "," • type
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 426
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 337

   20 type_template_paramaters: T_BEGIN type_list T_END •

    $default  reduce using rule 20 (type_template_paramaters)


State 338

  291 type_definition: "define" type "as" IDENTIFIER ";" •

    $default  reduce using rule 291 (type_definition)


State 339

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   82 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293
    ")"    shift, and go to state 427


State 340

   10 non_reference_type: type_core ARRAYL xvalue_expression ARRAYR •

    $default  reduce using rule 10 (non_reference_type)


State 341

  243 enum_member: IDENTIFIER "=" INT •

    $default  reduce using rule 243 (enum_member)


State 342

  241 enum_members_list: enum_members_list "," enum_member •

    $default  reduce using rule 241 (enum_members_list)


State 343

  186 function_argument: type IDENTIFIER •  [",", ")"]
  188                  | type IDENTIFIER • "=" expression

    "="  shift, and go to state 428

    $default  reduce using rule 186 (function_argument)


State 344

  187 function_argument: type "..." •

    $default  reduce using rule 187 (function_argument)


State 345

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  185 function_argument_list: function_argument_list "," • function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 223
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    function_argument   go to state 429


State 346

  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 430

    throwable_expression  go to state 431


State 347

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 432
    function_argument       go to state 225


State 348

  169 variable_declaration_block: "let" type IDENTIFIER •  ["in", ",", ")", ";"]
  170                           | "let" type IDENTIFIER • "=" expression

    "="  shift, and go to state 433

    $default  reduce using rule 169 (variable_declaration_block)


State 349

  168 variable_declaration_block_list: variable_declaration_block_list "," variable_declaration_block •

    $default  reduce using rule 168 (variable_declaration_block_list)


State 350

  285 module: "module" module_name ":" IDENTIFIER ";" •

    $default  reduce using rule 285 (module)


State 351

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  200 operator_overload_header: "operator" operator "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 430

    throwable_expression  go to state 434


State 352

  292 namespace: "namespace" module_name "{" namespace_units "}" •

    $default  reduce using rule 292 (namespace)


State 353

  295 namespace_units: namespace_units namespace_unit •

    $default  reduce using rule 295 (namespace_units)


State 354

   67 prvalue_expression: "castas" "<" type • ">" "(" rvalue_expression ")"

    ">"  shift, and go to state 435


State 355

  152 clean_up_statement: "cleanup" "(" IDENTIFIER • "," clean_up_arg ")" ";"

    ","  shift, and go to state 436


State 356

  121 do_loop_statement: "do" block_statement "while" • "(" expression ")"

    "("  shift, and go to state 437


State 357

  122 for_loop_statement: "for" "(" for_loop_condition • ")" block_statement

    ")"  shift, and go to state 438


State 358

  123 for_loop_condition: variable_declaration • ";" expression0 ";" expression0
  124                   | variable_declaration • "in" expression

    "in"  shift, and go to state 439
    ";"   shift, and go to state 440


State 359

  163 jump_statement: "goto" IDENTIFIER ";" •

    $default  reduce using rule 163 (jump_statement)


State 360

  128 if_statement: "if" "(" expression • ")" block_statement

    ")"  shift, and go to state 441


State 361

   93 new_expression: "new" "heap" type • "(" function_call_list ")"

    "("  shift, and go to state 442


State 362

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   92               | "new" type "(" • function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  100 function_call_list: • function_call_arg
  101                   | • function_call_list "," function_call_arg ";"
  102 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 443
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174
    function_call_list         go to state 444
    function_call_arg          go to state 445


State 363

  137 switch_statement: "switch" "(" expression • ")" case_blocks0 default_block0

    ")"  shift, and go to state 446


State 364

  161 jump_statement: "throw" expression ";" •

    $default  reduce using rule 161 (jump_statement)


State 365

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   66                   | "typeof" "(" rvalue_expression • ")"

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293
    ")"    shift, and go to state 447


State 366

  120 while_loop_statement: "while" "(" expression • ")" block_statement

    ")"  shift, and go to state 448


State 367

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  ["]", ","]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   97 array_index: expression0 ":" • expression0
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    $default  reduce using rule 28 (expression0)

    expression                 go to state 449
    expression0                go to state 450
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 368

   83 xvalue_expression: "[" array_index_list "]" •

    $default  reduce using rule 83 (xvalue_expression)


State 369

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [":"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   95 array_index_list: array_index_list "," • array_index
   96 array_index: • expression
   97            | • expression0 ":" expression0
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    $default  reduce using rule 28 (expression0)

    expression                 go to state 261
    expression0                go to state 262
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    array_index                go to state 451
    function_call              go to state 174


State 370

   68 prvalue_expression: "(" rvalue_expression ")" • "?" rvalue_expression ":" rvalue_expression
   82 xvalue_expression: "(" rvalue_expression ")" •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]

    "?"  shift, and go to state 452

    $default  reduce using rule 82 (xvalue_expression)


State 371

   91 lambda_expression: "(" function_argument_list ")" • "->" return_types_list "=>" block_statement

    "->"  shift, and go to state 453


State 372

   63 prvalue_expression: rvalue_expression "is" type •

    $default  reduce using rule 63 (prvalue_expression)


State 373

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression ">" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<=>"  shift, and go to state 285
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 45 (prvalue_expression)

    Conflict between rule 45 and token "is" resolved as reduce ("is" < ">").
    Conflict between rule 45 and token ">" resolved as reduce (%left ">").
    Conflict between rule 45 and token "+" resolved as shift (">" < "+").
    Conflict between rule 45 and token "-" resolved as shift (">" < "-").
    Conflict between rule 45 and token "/" resolved as shift (">" < "/").
    Conflict between rule 45 and token "//" resolved as shift (">" < "//").
    Conflict between rule 45 and token "*" resolved as shift (">" < "*").
    Conflict between rule 45 and token "^^" resolved as shift (">" < "^^").
    Conflict between rule 45 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 45 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 45 and token "<=>" resolved as shift (">" < "<=>").
    Conflict between rule 45 and token "&&" resolved as reduce ("&&" < ">").
    Conflict between rule 45 and token "||" resolved as reduce ("||" < ">").
    Conflict between rule 45 and token "&" resolved as reduce ("&" < ">").
    Conflict between rule 45 and token "|" resolved as reduce ("|" < ">").
    Conflict between rule 45 and token "^" resolved as reduce ("^" < ">").
    Conflict between rule 45 and token "~" resolved as shift (">" < "~").
    Conflict between rule 45 and token ">>" resolved as shift (">" < ">>").
    Conflict between rule 45 and token "<<" resolved as shift (">" < "<<").


State 374

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression "+" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "/"   shift, and go to state 279
    "//"  shift, and go to state 280
    "*"   shift, and go to state 281
    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 33 (prvalue_expression)

    Conflict between rule 33 and token "is" resolved as reduce ("is" < "+").
    Conflict between rule 33 and token ">" resolved as reduce (">" < "+").
    Conflict between rule 33 and token "+" resolved as reduce (%left "+").
    Conflict between rule 33 and token "-" resolved as reduce (%left "-").
    Conflict between rule 33 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 33 and token "//" resolved as shift ("+" < "//").
    Conflict between rule 33 and token "*" resolved as shift ("+" < "*").
    Conflict between rule 33 and token "^^" resolved as shift ("+" < "^^").
    Conflict between rule 33 and token "<=" resolved as reduce ("<=" < "+").
    Conflict between rule 33 and token ">=" resolved as reduce (">=" < "+").
    Conflict between rule 33 and token "<=>" resolved as reduce ("<=>" < "+").
    Conflict between rule 33 and token "&&" resolved as reduce ("&&" < "+").
    Conflict between rule 33 and token "||" resolved as reduce ("||" < "+").
    Conflict between rule 33 and token "&" resolved as reduce ("&" < "+").
    Conflict between rule 33 and token "|" resolved as reduce ("|" < "+").
    Conflict between rule 33 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 33 and token "~" resolved as shift ("+" < "~").
    Conflict between rule 33 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 33 and token "<<" resolved as reduce ("<<" < "+").


State 375

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "/"   shift, and go to state 279
    "//"  shift, and go to state 280
    "*"   shift, and go to state 281
    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 34 (prvalue_expression)

    Conflict between rule 34 and token "is" resolved as reduce ("is" < "-").
    Conflict between rule 34 and token ">" resolved as reduce (">" < "-").
    Conflict between rule 34 and token "+" resolved as reduce (%left "+").
    Conflict between rule 34 and token "-" resolved as reduce (%left "-").
    Conflict between rule 34 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 34 and token "//" resolved as shift ("-" < "//").
    Conflict between rule 34 and token "*" resolved as shift ("-" < "*").
    Conflict between rule 34 and token "^^" resolved as shift ("-" < "^^").
    Conflict between rule 34 and token "<=" resolved as reduce ("<=" < "-").
    Conflict between rule 34 and token ">=" resolved as reduce (">=" < "-").
    Conflict between rule 34 and token "<=>" resolved as reduce ("<=>" < "-").
    Conflict between rule 34 and token "&&" resolved as reduce ("&&" < "-").
    Conflict between rule 34 and token "||" resolved as reduce ("||" < "-").
    Conflict between rule 34 and token "&" resolved as reduce ("&" < "-").
    Conflict between rule 34 and token "|" resolved as reduce ("|" < "-").
    Conflict between rule 34 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 34 and token "~" resolved as shift ("-" < "~").
    Conflict between rule 34 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 34 and token "<<" resolved as reduce ("<<" < "-").


State 376

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression "/" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 36 (prvalue_expression)

    Conflict between rule 36 and token "is" resolved as reduce ("is" < "/").
    Conflict between rule 36 and token ">" resolved as reduce (">" < "/").
    Conflict between rule 36 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 36 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 36 and token "/" resolved as reduce (%left "/").
    Conflict between rule 36 and token "//" resolved as reduce (%left "//").
    Conflict between rule 36 and token "*" resolved as reduce (%left "*").
    Conflict between rule 36 and token "^^" resolved as shift ("/" < "^^").
    Conflict between rule 36 and token "<=" resolved as reduce ("<=" < "/").
    Conflict between rule 36 and token ">=" resolved as reduce (">=" < "/").
    Conflict between rule 36 and token "<=>" resolved as reduce ("<=>" < "/").
    Conflict between rule 36 and token "&&" resolved as reduce ("&&" < "/").
    Conflict between rule 36 and token "||" resolved as reduce ("||" < "/").
    Conflict between rule 36 and token "&" resolved as reduce ("&" < "/").
    Conflict between rule 36 and token "|" resolved as reduce ("|" < "/").
    Conflict between rule 36 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 36 and token "~" resolved as shift ("/" < "~").
    Conflict between rule 36 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 36 and token "<<" resolved as reduce ("<<" < "/").


State 377

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression "//" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 37 (prvalue_expression)

    Conflict between rule 37 and token "is" resolved as reduce ("is" < "//").
    Conflict between rule 37 and token ">" resolved as reduce (">" < "//").
    Conflict between rule 37 and token "+" resolved as reduce ("+" < "//").
    Conflict between rule 37 and token "-" resolved as reduce ("-" < "//").
    Conflict between rule 37 and token "/" resolved as reduce (%left "/").
    Conflict between rule 37 and token "//" resolved as reduce (%left "//").
    Conflict between rule 37 and token "*" resolved as reduce (%left "*").
    Conflict between rule 37 and token "^^" resolved as shift ("//" < "^^").
    Conflict between rule 37 and token "<=" resolved as reduce ("<=" < "//").
    Conflict between rule 37 and token ">=" resolved as reduce (">=" < "//").
    Conflict between rule 37 and token "<=>" resolved as reduce ("<=>" < "//").
    Conflict between rule 37 and token "&&" resolved as reduce ("&&" < "//").
    Conflict between rule 37 and token "||" resolved as reduce ("||" < "//").
    Conflict between rule 37 and token "&" resolved as reduce ("&" < "//").
    Conflict between rule 37 and token "|" resolved as reduce ("|" < "//").
    Conflict between rule 37 and token "^" resolved as reduce ("^" < "//").
    Conflict between rule 37 and token "~" resolved as shift ("//" < "~").
    Conflict between rule 37 and token ">>" resolved as reduce (">>" < "//").
    Conflict between rule 37 and token "<<" resolved as reduce ("<<" < "//").


State 378

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression "*" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 35 (prvalue_expression)

    Conflict between rule 35 and token "is" resolved as reduce ("is" < "*").
    Conflict between rule 35 and token ">" resolved as reduce (">" < "*").
    Conflict between rule 35 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 35 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 35 and token "/" resolved as reduce (%left "/").
    Conflict between rule 35 and token "//" resolved as reduce (%left "//").
    Conflict between rule 35 and token "*" resolved as reduce (%left "*").
    Conflict between rule 35 and token "^^" resolved as shift ("*" < "^^").
    Conflict between rule 35 and token "<=" resolved as reduce ("<=" < "*").
    Conflict between rule 35 and token ">=" resolved as reduce (">=" < "*").
    Conflict between rule 35 and token "<=>" resolved as reduce ("<=>" < "*").
    Conflict between rule 35 and token "&&" resolved as reduce ("&&" < "*").
    Conflict between rule 35 and token "||" resolved as reduce ("||" < "*").
    Conflict between rule 35 and token "&" resolved as reduce ("&" < "*").
    Conflict between rule 35 and token "|" resolved as reduce ("|" < "*").
    Conflict between rule 35 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 35 and token "~" resolved as shift ("*" < "~").
    Conflict between rule 35 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 35 and token "<<" resolved as reduce ("<<" < "*").


State 379

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   38                   | rvalue_expression "^^" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 38 (prvalue_expression)

    Conflict between rule 38 and token "is" resolved as reduce ("is" < "^^").
    Conflict between rule 38 and token ">" resolved as reduce (">" < "^^").
    Conflict between rule 38 and token "+" resolved as reduce ("+" < "^^").
    Conflict between rule 38 and token "-" resolved as reduce ("-" < "^^").
    Conflict between rule 38 and token "/" resolved as reduce ("/" < "^^").
    Conflict between rule 38 and token "//" resolved as reduce ("//" < "^^").
    Conflict between rule 38 and token "*" resolved as reduce ("*" < "^^").
    Conflict between rule 38 and token "^^" resolved as shift (%right "^^").
    Conflict between rule 38 and token "<=" resolved as reduce ("<=" < "^^").
    Conflict between rule 38 and token ">=" resolved as reduce (">=" < "^^").
    Conflict between rule 38 and token "<=>" resolved as reduce ("<=>" < "^^").
    Conflict between rule 38 and token "&&" resolved as reduce ("&&" < "^^").
    Conflict between rule 38 and token "||" resolved as reduce ("||" < "^^").
    Conflict between rule 38 and token "&" resolved as reduce ("&" < "^^").
    Conflict between rule 38 and token "|" resolved as reduce ("|" < "^^").
    Conflict between rule 38 and token "^" resolved as reduce ("^" < "^^").
    Conflict between rule 38 and token "~" resolved as shift ("^^" < "~").
    Conflict between rule 38 and token ">>" resolved as reduce (">>" < "^^").
    Conflict between rule 38 and token "<<" resolved as reduce ("<<" < "^^").


State 380

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression "<=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<=>"  shift, and go to state 285
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 47 (prvalue_expression)

    Conflict between rule 47 and token "is" resolved as reduce ("is" < "<=").
    Conflict between rule 47 and token ">" resolved as reduce (%left ">").
    Conflict between rule 47 and token "+" resolved as shift ("<=" < "+").
    Conflict between rule 47 and token "-" resolved as shift ("<=" < "-").
    Conflict between rule 47 and token "/" resolved as shift ("<=" < "/").
    Conflict between rule 47 and token "//" resolved as shift ("<=" < "//").
    Conflict between rule 47 and token "*" resolved as shift ("<=" < "*").
    Conflict between rule 47 and token "^^" resolved as shift ("<=" < "^^").
    Conflict between rule 47 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 47 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 47 and token "<=>" resolved as shift ("<=" < "<=>").
    Conflict between rule 47 and token "&&" resolved as reduce ("&&" < "<=").
    Conflict between rule 47 and token "||" resolved as reduce ("||" < "<=").
    Conflict between rule 47 and token "&" resolved as reduce ("&" < "<=").
    Conflict between rule 47 and token "|" resolved as reduce ("|" < "<=").
    Conflict between rule 47 and token "^" resolved as reduce ("^" < "<=").
    Conflict between rule 47 and token "~" resolved as shift ("<=" < "~").
    Conflict between rule 47 and token ">>" resolved as shift ("<=" < ">>").
    Conflict between rule 47 and token "<<" resolved as shift ("<=" < "<<").


State 381

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression ">=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<=>"  shift, and go to state 285
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 46 (prvalue_expression)

    Conflict between rule 46 and token "is" resolved as reduce ("is" < ">=").
    Conflict between rule 46 and token ">" resolved as reduce (%left ">").
    Conflict between rule 46 and token "+" resolved as shift (">=" < "+").
    Conflict between rule 46 and token "-" resolved as shift (">=" < "-").
    Conflict between rule 46 and token "/" resolved as shift (">=" < "/").
    Conflict between rule 46 and token "//" resolved as shift (">=" < "//").
    Conflict between rule 46 and token "*" resolved as shift (">=" < "*").
    Conflict between rule 46 and token "^^" resolved as shift (">=" < "^^").
    Conflict between rule 46 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 46 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 46 and token "<=>" resolved as shift (">=" < "<=>").
    Conflict between rule 46 and token "&&" resolved as reduce ("&&" < ">=").
    Conflict between rule 46 and token "||" resolved as reduce ("||" < ">=").
    Conflict between rule 46 and token "&" resolved as reduce ("&" < ">=").
    Conflict between rule 46 and token "|" resolved as reduce ("|" < ">=").
    Conflict between rule 46 and token "^" resolved as reduce ("^" < ">=").
    Conflict between rule 46 and token "~" resolved as shift (">=" < "~").
    Conflict between rule 46 and token ">>" resolved as shift (">=" < ">>").
    Conflict between rule 46 and token "<<" resolved as shift (">=" < "<<").


State 382

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression "<=>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ")", ":", ";"]
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"   shift, and go to state 277
    "-"   shift, and go to state 278
    "/"   shift, and go to state 279
    "//"  shift, and go to state 280
    "*"   shift, and go to state 281
    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291
    ">>"  shift, and go to state 292
    "<<"  shift, and go to state 293

    $default  reduce using rule 48 (prvalue_expression)

    Conflict between rule 48 and token "is" resolved as reduce ("is" < "<=>").
    Conflict between rule 48 and token ">" resolved as reduce (">" < "<=>").
    Conflict between rule 48 and token "+" resolved as shift ("<=>" < "+").
    Conflict between rule 48 and token "-" resolved as shift ("<=>" < "-").
    Conflict between rule 48 and token "/" resolved as shift ("<=>" < "/").
    Conflict between rule 48 and token "//" resolved as shift ("<=>" < "//").
    Conflict between rule 48 and token "*" resolved as shift ("<=>" < "*").
    Conflict between rule 48 and token "^^" resolved as shift ("<=>" < "^^").
    Conflict between rule 48 and token "<=" resolved as reduce ("<=" < "<=>").
    Conflict between rule 48 and token ">=" resolved as reduce (">=" < "<=>").
    Conflict between rule 48 and token "<=>" resolved as reduce (%left "<=>").
    Conflict between rule 48 and token "&&" resolved as reduce ("&&" < "<=>").
    Conflict between rule 48 and token "||" resolved as reduce ("||" < "<=>").
    Conflict between rule 48 and token "&" resolved as reduce ("&" < "<=>").
    Conflict between rule 48 and token "|" resolved as reduce ("|" < "<=>").
    Conflict between rule 48 and token "^" resolved as reduce ("^" < "<=>").
    Conflict between rule 48 and token "~" resolved as shift ("<=>" < "~").
    Conflict between rule 48 and token ">>" resolved as shift ("<=>" < ">>").
    Conflict between rule 48 and token "<<" resolved as shift ("<=>" < "<<").


State 383

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression "&&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", ")", ":", ";"]
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 49 (prvalue_expression)

    Conflict between rule 49 and token "is" resolved as reduce ("is" < "&&").
    Conflict between rule 49 and token ">" resolved as shift ("&&" < ">").
    Conflict between rule 49 and token "+" resolved as shift ("&&" < "+").
    Conflict between rule 49 and token "-" resolved as shift ("&&" < "-").
    Conflict between rule 49 and token "/" resolved as shift ("&&" < "/").
    Conflict between rule 49 and token "//" resolved as shift ("&&" < "//").
    Conflict between rule 49 and token "*" resolved as shift ("&&" < "*").
    Conflict between rule 49 and token "^^" resolved as shift ("&&" < "^^").
    Conflict between rule 49 and token "<=" resolved as shift ("&&" < "<=").
    Conflict between rule 49 and token ">=" resolved as shift ("&&" < ">=").
    Conflict between rule 49 and token "<=>" resolved as shift ("&&" < "<=>").
    Conflict between rule 49 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 49 and token "||" resolved as reduce ("||" < "&&").
    Conflict between rule 49 and token "&" resolved as shift ("&&" < "&").
    Conflict between rule 49 and token "|" resolved as shift ("&&" < "|").
    Conflict between rule 49 and token "^" resolved as shift ("&&" < "^").
    Conflict between rule 49 and token "~" resolved as shift ("&&" < "~").
    Conflict between rule 49 and token ">>" resolved as shift ("&&" < ">>").
    Conflict between rule 49 and token "<<" resolved as shift ("&&" < "<<").


State 384

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression "||" rvalue_expression •  ["in", "is", "]", ",", "||", ")", ":", ";"]
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 50 (prvalue_expression)

    Conflict between rule 50 and token "is" resolved as reduce ("is" < "||").
    Conflict between rule 50 and token ">" resolved as shift ("||" < ">").
    Conflict between rule 50 and token "+" resolved as shift ("||" < "+").
    Conflict between rule 50 and token "-" resolved as shift ("||" < "-").
    Conflict between rule 50 and token "/" resolved as shift ("||" < "/").
    Conflict between rule 50 and token "//" resolved as shift ("||" < "//").
    Conflict between rule 50 and token "*" resolved as shift ("||" < "*").
    Conflict between rule 50 and token "^^" resolved as shift ("||" < "^^").
    Conflict between rule 50 and token "<=" resolved as shift ("||" < "<=").
    Conflict between rule 50 and token ">=" resolved as shift ("||" < ">=").
    Conflict between rule 50 and token "<=>" resolved as shift ("||" < "<=>").
    Conflict between rule 50 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 50 and token "||" resolved as reduce (%left "||").
    Conflict between rule 50 and token "&" resolved as shift ("||" < "&").
    Conflict between rule 50 and token "|" resolved as shift ("||" < "|").
    Conflict between rule 50 and token "^" resolved as shift ("||" < "^").
    Conflict between rule 50 and token "~" resolved as shift ("||" < "~").
    Conflict between rule 50 and token ">>" resolved as shift ("||" < ">>").
    Conflict between rule 50 and token "<<" resolved as shift ("||" < "<<").


State 385

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression "&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "&", "|", "^", ")", ":", ";"]
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 51 (prvalue_expression)

    Conflict between rule 51 and token "is" resolved as reduce ("is" < "&").
    Conflict between rule 51 and token ">" resolved as shift ("&" < ">").
    Conflict between rule 51 and token "+" resolved as shift ("&" < "+").
    Conflict between rule 51 and token "-" resolved as shift ("&" < "-").
    Conflict between rule 51 and token "/" resolved as shift ("&" < "/").
    Conflict between rule 51 and token "//" resolved as shift ("&" < "//").
    Conflict between rule 51 and token "*" resolved as shift ("&" < "*").
    Conflict between rule 51 and token "^^" resolved as shift ("&" < "^^").
    Conflict between rule 51 and token "<=" resolved as shift ("&" < "<=").
    Conflict between rule 51 and token ">=" resolved as shift ("&" < ">=").
    Conflict between rule 51 and token "<=>" resolved as shift ("&" < "<=>").
    Conflict between rule 51 and token "&&" resolved as reduce ("&&" < "&").
    Conflict between rule 51 and token "||" resolved as reduce ("||" < "&").
    Conflict between rule 51 and token "&" resolved as reduce (%left "&").
    Conflict between rule 51 and token "|" resolved as reduce ("|" < "&").
    Conflict between rule 51 and token "^" resolved as reduce ("^" < "&").
    Conflict between rule 51 and token "~" resolved as shift ("&" < "~").
    Conflict between rule 51 and token ">>" resolved as shift ("&" < ">>").
    Conflict between rule 51 and token "<<" resolved as shift ("&" < "<<").


State 386

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression "|" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", ")", ":", ";"]
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&"    shift, and go to state 288
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 53 (prvalue_expression)

    Conflict between rule 53 and token "is" resolved as reduce ("is" < "|").
    Conflict between rule 53 and token ">" resolved as shift ("|" < ">").
    Conflict between rule 53 and token "+" resolved as shift ("|" < "+").
    Conflict between rule 53 and token "-" resolved as shift ("|" < "-").
    Conflict between rule 53 and token "/" resolved as shift ("|" < "/").
    Conflict between rule 53 and token "//" resolved as shift ("|" < "//").
    Conflict between rule 53 and token "*" resolved as shift ("|" < "*").
    Conflict between rule 53 and token "^^" resolved as shift ("|" < "^^").
    Conflict between rule 53 and token "<=" resolved as shift ("|" < "<=").
    Conflict between rule 53 and token ">=" resolved as shift ("|" < ">=").
    Conflict between rule 53 and token "<=>" resolved as shift ("|" < "<=>").
    Conflict between rule 53 and token "&&" resolved as reduce ("&&" < "|").
    Conflict between rule 53 and token "||" resolved as reduce ("||" < "|").
    Conflict between rule 53 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 53 and token "|" resolved as reduce (%left "|").
    Conflict between rule 53 and token "^" resolved as shift ("|" < "^").
    Conflict between rule 53 and token "~" resolved as shift ("|" < "~").
    Conflict between rule 53 and token ">>" resolved as shift ("|" < ">>").
    Conflict between rule 53 and token "<<" resolved as shift ("|" < "<<").


State 387

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression "^" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", "^", ")", ":", ";"]
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&"    shift, and go to state 288
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 52 (prvalue_expression)

    Conflict between rule 52 and token "is" resolved as reduce ("is" < "^").
    Conflict between rule 52 and token ">" resolved as shift ("^" < ">").
    Conflict between rule 52 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 52 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 52 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 52 and token "//" resolved as shift ("^" < "//").
    Conflict between rule 52 and token "*" resolved as shift ("^" < "*").
    Conflict between rule 52 and token "^^" resolved as shift ("^" < "^^").
    Conflict between rule 52 and token "<=" resolved as shift ("^" < "<=").
    Conflict between rule 52 and token ">=" resolved as shift ("^" < ">=").
    Conflict between rule 52 and token "<=>" resolved as shift ("^" < "<=>").
    Conflict between rule 52 and token "&&" resolved as reduce ("&&" < "^").
    Conflict between rule 52 and token "||" resolved as reduce ("||" < "^").
    Conflict between rule 52 and token "&" resolved as shift ("^" < "&").
    Conflict between rule 52 and token "|" resolved as reduce ("|" < "^").
    Conflict between rule 52 and token "^" resolved as reduce (%left "^").
    Conflict between rule 52 and token "~" resolved as shift ("^" < "~").
    Conflict between rule 52 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 52 and token "<<" resolved as shift ("^" < "<<").


State 388

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression "~" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "~"  shift, and go to state 291

    $default  reduce using rule 54 (prvalue_expression)

    Conflict between rule 54 and token "is" resolved as reduce ("is" < "~").
    Conflict between rule 54 and token ">" resolved as reduce (">" < "~").
    Conflict between rule 54 and token "+" resolved as reduce ("+" < "~").
    Conflict between rule 54 and token "-" resolved as reduce ("-" < "~").
    Conflict between rule 54 and token "/" resolved as reduce ("/" < "~").
    Conflict between rule 54 and token "//" resolved as reduce ("//" < "~").
    Conflict between rule 54 and token "*" resolved as reduce ("*" < "~").
    Conflict between rule 54 and token "^^" resolved as reduce ("^^" < "~").
    Conflict between rule 54 and token "<=" resolved as reduce ("<=" < "~").
    Conflict between rule 54 and token ">=" resolved as reduce (">=" < "~").
    Conflict between rule 54 and token "<=>" resolved as reduce ("<=>" < "~").
    Conflict between rule 54 and token "&&" resolved as reduce ("&&" < "~").
    Conflict between rule 54 and token "||" resolved as reduce ("||" < "~").
    Conflict between rule 54 and token "&" resolved as reduce ("&" < "~").
    Conflict between rule 54 and token "|" resolved as reduce ("|" < "~").
    Conflict between rule 54 and token "^" resolved as reduce ("^" < "~").
    Conflict between rule 54 and token "~" resolved as shift (%right "~").
    Conflict between rule 54 and token ">>" resolved as reduce (">>" < "~").
    Conflict between rule 54 and token "<<" resolved as reduce ("<<" < "~").


State 389

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression ">>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"   shift, and go to state 277
    "-"   shift, and go to state 278
    "/"   shift, and go to state 279
    "//"  shift, and go to state 280
    "*"   shift, and go to state 281
    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 55 (prvalue_expression)

    Conflict between rule 55 and token "is" resolved as reduce ("is" < ">>").
    Conflict between rule 55 and token ">" resolved as reduce (">" < ">>").
    Conflict between rule 55 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 55 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 55 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 55 and token "//" resolved as shift (">>" < "//").
    Conflict between rule 55 and token "*" resolved as shift (">>" < "*").
    Conflict between rule 55 and token "^^" resolved as shift (">>" < "^^").
    Conflict between rule 55 and token "<=" resolved as reduce ("<=" < ">>").
    Conflict between rule 55 and token ">=" resolved as reduce (">=" < ">>").
    Conflict between rule 55 and token "<=>" resolved as reduce ("<=>" < ">>").
    Conflict between rule 55 and token "&&" resolved as reduce ("&&" < ">>").
    Conflict between rule 55 and token "||" resolved as reduce ("||" < ">>").
    Conflict between rule 55 and token "&" resolved as reduce ("&" < ">>").
    Conflict between rule 55 and token "|" resolved as reduce ("|" < ">>").
    Conflict between rule 55 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 55 and token "~" resolved as shift (">>" < "~").
    Conflict between rule 55 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 55 and token "<<" resolved as reduce (%left "<<").


State 390

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   56                   | rvalue_expression "<<" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "+"   shift, and go to state 277
    "-"   shift, and go to state 278
    "/"   shift, and go to state 279
    "//"  shift, and go to state 280
    "*"   shift, and go to state 281
    "^^"  shift, and go to state 282
    "~"   shift, and go to state 291

    $default  reduce using rule 56 (prvalue_expression)

    Conflict between rule 56 and token "is" resolved as reduce ("is" < "<<").
    Conflict between rule 56 and token ">" resolved as reduce (">" < "<<").
    Conflict between rule 56 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 56 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 56 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 56 and token "//" resolved as shift ("<<" < "//").
    Conflict between rule 56 and token "*" resolved as shift ("<<" < "*").
    Conflict between rule 56 and token "^^" resolved as shift ("<<" < "^^").
    Conflict between rule 56 and token "<=" resolved as reduce ("<=" < "<<").
    Conflict between rule 56 and token ">=" resolved as reduce (">=" < "<<").
    Conflict between rule 56 and token "<=>" resolved as reduce ("<=>" < "<<").
    Conflict between rule 56 and token "&&" resolved as reduce ("&&" < "<<").
    Conflict between rule 56 and token "||" resolved as reduce ("||" < "<<").
    Conflict between rule 56 and token "&" resolved as reduce ("&" < "<<").
    Conflict between rule 56 and token "|" resolved as reduce ("|" < "<<").
    Conflict between rule 56 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 56 and token "~" resolved as shift ("<<" < "~").
    Conflict between rule 56 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 56 and token "<<" resolved as reduce (%left "<<").


State 391

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   39                   | xvalue_expression "+=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 39 (prvalue_expression)

    Conflict between rule 39 and token "is" resolved as shift (%right "is").
    Conflict between rule 39 and token ">" resolved as shift ("+=" < ">").
    Conflict between rule 39 and token "+" resolved as shift ("+=" < "+").
    Conflict between rule 39 and token "-" resolved as shift ("+=" < "-").
    Conflict between rule 39 and token "/" resolved as shift ("+=" < "/").
    Conflict between rule 39 and token "//" resolved as shift ("+=" < "//").
    Conflict between rule 39 and token "*" resolved as shift ("+=" < "*").
    Conflict between rule 39 and token "^^" resolved as shift ("+=" < "^^").
    Conflict between rule 39 and token "<=" resolved as shift ("+=" < "<=").
    Conflict between rule 39 and token ">=" resolved as shift ("+=" < ">=").
    Conflict between rule 39 and token "<=>" resolved as shift ("+=" < "<=>").
    Conflict between rule 39 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 39 and token "||" resolved as shift ("+=" < "||").
    Conflict between rule 39 and token "&" resolved as shift ("+=" < "&").
    Conflict between rule 39 and token "|" resolved as shift ("+=" < "|").
    Conflict between rule 39 and token "^" resolved as shift ("+=" < "^").
    Conflict between rule 39 and token "~" resolved as shift ("+=" < "~").
    Conflict between rule 39 and token ">>" resolved as shift ("+=" < ">>").
    Conflict between rule 39 and token "<<" resolved as shift ("+=" < "<<").


State 392

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   40                   | xvalue_expression "-=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 40 (prvalue_expression)

    Conflict between rule 40 and token "is" resolved as shift (%right "is").
    Conflict between rule 40 and token ">" resolved as shift ("-=" < ">").
    Conflict between rule 40 and token "+" resolved as shift ("-=" < "+").
    Conflict between rule 40 and token "-" resolved as shift ("-=" < "-").
    Conflict between rule 40 and token "/" resolved as shift ("-=" < "/").
    Conflict between rule 40 and token "//" resolved as shift ("-=" < "//").
    Conflict between rule 40 and token "*" resolved as shift ("-=" < "*").
    Conflict between rule 40 and token "^^" resolved as shift ("-=" < "^^").
    Conflict between rule 40 and token "<=" resolved as shift ("-=" < "<=").
    Conflict between rule 40 and token ">=" resolved as shift ("-=" < ">=").
    Conflict between rule 40 and token "<=>" resolved as shift ("-=" < "<=>").
    Conflict between rule 40 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 40 and token "||" resolved as shift ("-=" < "||").
    Conflict between rule 40 and token "&" resolved as shift ("-=" < "&").
    Conflict between rule 40 and token "|" resolved as shift ("-=" < "|").
    Conflict between rule 40 and token "^" resolved as shift ("-=" < "^").
    Conflict between rule 40 and token "~" resolved as shift ("-=" < "~").
    Conflict between rule 40 and token ">>" resolved as shift ("-=" < ">>").
    Conflict between rule 40 and token "<<" resolved as shift ("-=" < "<<").


State 393

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   41                   | xvalue_expression "*=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 41 (prvalue_expression)

    Conflict between rule 41 and token "is" resolved as shift (%right "is").
    Conflict between rule 41 and token ">" resolved as shift ("*=" < ">").
    Conflict between rule 41 and token "+" resolved as shift ("*=" < "+").
    Conflict between rule 41 and token "-" resolved as shift ("*=" < "-").
    Conflict between rule 41 and token "/" resolved as shift ("*=" < "/").
    Conflict between rule 41 and token "//" resolved as shift ("*=" < "//").
    Conflict between rule 41 and token "*" resolved as shift ("*=" < "*").
    Conflict between rule 41 and token "^^" resolved as shift ("*=" < "^^").
    Conflict between rule 41 and token "<=" resolved as shift ("*=" < "<=").
    Conflict between rule 41 and token ">=" resolved as shift ("*=" < ">=").
    Conflict between rule 41 and token "<=>" resolved as shift ("*=" < "<=>").
    Conflict between rule 41 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 41 and token "||" resolved as shift ("*=" < "||").
    Conflict between rule 41 and token "&" resolved as shift ("*=" < "&").
    Conflict between rule 41 and token "|" resolved as shift ("*=" < "|").
    Conflict between rule 41 and token "^" resolved as shift ("*=" < "^").
    Conflict between rule 41 and token "~" resolved as shift ("*=" < "~").
    Conflict between rule 41 and token ">>" resolved as shift ("*=" < ">>").
    Conflict between rule 41 and token "<<" resolved as shift ("*=" < "<<").


State 394

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   42                   | xvalue_expression "/=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 42 (prvalue_expression)

    Conflict between rule 42 and token "is" resolved as shift (%right "is").
    Conflict between rule 42 and token ">" resolved as shift ("/=" < ">").
    Conflict between rule 42 and token "+" resolved as shift ("/=" < "+").
    Conflict between rule 42 and token "-" resolved as shift ("/=" < "-").
    Conflict between rule 42 and token "/" resolved as shift ("/=" < "/").
    Conflict between rule 42 and token "//" resolved as shift ("/=" < "//").
    Conflict between rule 42 and token "*" resolved as shift ("/=" < "*").
    Conflict between rule 42 and token "^^" resolved as shift ("/=" < "^^").
    Conflict between rule 42 and token "<=" resolved as shift ("/=" < "<=").
    Conflict between rule 42 and token ">=" resolved as shift ("/=" < ">=").
    Conflict between rule 42 and token "<=>" resolved as shift ("/=" < "<=>").
    Conflict between rule 42 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 42 and token "||" resolved as shift ("/=" < "||").
    Conflict between rule 42 and token "&" resolved as shift ("/=" < "&").
    Conflict between rule 42 and token "|" resolved as shift ("/=" < "|").
    Conflict between rule 42 and token "^" resolved as shift ("/=" < "^").
    Conflict between rule 42 and token "~" resolved as shift ("/=" < "~").
    Conflict between rule 42 and token ">>" resolved as shift ("/=" < ">>").
    Conflict between rule 42 and token "<<" resolved as shift ("/=" < "<<").


State 395

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   43                   | xvalue_expression "//=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 43 (prvalue_expression)

    Conflict between rule 43 and token "is" resolved as shift (%right "is").
    Conflict between rule 43 and token ">" resolved as shift ("//=" < ">").
    Conflict between rule 43 and token "+" resolved as shift ("//=" < "+").
    Conflict between rule 43 and token "-" resolved as shift ("//=" < "-").
    Conflict between rule 43 and token "/" resolved as shift ("//=" < "/").
    Conflict between rule 43 and token "//" resolved as shift ("//=" < "//").
    Conflict between rule 43 and token "*" resolved as shift ("//=" < "*").
    Conflict between rule 43 and token "^^" resolved as shift ("//=" < "^^").
    Conflict between rule 43 and token "<=" resolved as shift ("//=" < "<=").
    Conflict between rule 43 and token ">=" resolved as shift ("//=" < ">=").
    Conflict between rule 43 and token "<=>" resolved as shift ("//=" < "<=>").
    Conflict between rule 43 and token "&&" resolved as shift ("//=" < "&&").
    Conflict between rule 43 and token "||" resolved as shift ("//=" < "||").
    Conflict between rule 43 and token "&" resolved as shift ("//=" < "&").
    Conflict between rule 43 and token "|" resolved as shift ("//=" < "|").
    Conflict between rule 43 and token "^" resolved as shift ("//=" < "^").
    Conflict between rule 43 and token "~" resolved as shift ("//=" < "~").
    Conflict between rule 43 and token ">>" resolved as shift ("//=" < ">>").
    Conflict between rule 43 and token "<<" resolved as shift ("//=" < "<<").


State 396

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   44                   | xvalue_expression "^^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 44 (prvalue_expression)

    Conflict between rule 44 and token "is" resolved as shift (%right "is").
    Conflict between rule 44 and token ">" resolved as shift ("^^=" < ">").
    Conflict between rule 44 and token "+" resolved as shift ("^^=" < "+").
    Conflict between rule 44 and token "-" resolved as shift ("^^=" < "-").
    Conflict between rule 44 and token "/" resolved as shift ("^^=" < "/").
    Conflict between rule 44 and token "//" resolved as shift ("^^=" < "//").
    Conflict between rule 44 and token "*" resolved as shift ("^^=" < "*").
    Conflict between rule 44 and token "^^" resolved as shift ("^^=" < "^^").
    Conflict between rule 44 and token "<=" resolved as shift ("^^=" < "<=").
    Conflict between rule 44 and token ">=" resolved as shift ("^^=" < ">=").
    Conflict between rule 44 and token "<=>" resolved as shift ("^^=" < "<=>").
    Conflict between rule 44 and token "&&" resolved as shift ("^^=" < "&&").
    Conflict between rule 44 and token "||" resolved as shift ("^^=" < "||").
    Conflict between rule 44 and token "&" resolved as shift ("^^=" < "&").
    Conflict between rule 44 and token "|" resolved as shift ("^^=" < "|").
    Conflict between rule 44 and token "^" resolved as shift ("^^=" < "^").
    Conflict between rule 44 and token "~" resolved as shift ("^^=" < "~").
    Conflict between rule 44 and token ">>" resolved as shift ("^^=" < ">>").
    Conflict between rule 44 and token "<<" resolved as shift ("^^=" < "<<").


State 397

   26 expression: xvalue_expression "=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 26 (expression)


State 398

   99 function_call: xvalue_expression "(" ")" •

    $default  reduce using rule 99 (function_call)


State 399

   98 function_call: xvalue_expression "(" function_argument_list • ")"
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 345
    ")"  shift, and go to state 454


State 400

   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression "." xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    $default  reduce using rule 80 (xvalue_expression)

    Conflict between rule 80 and token "++" resolved as reduce ("++" < ".").
    Conflict between rule 80 and token "--" resolved as reduce ("--" < ".").
    Conflict between rule 80 and token "(" resolved as reduce (%left "(").
    Conflict between rule 80 and token "." resolved as reduce (%left ".").
    Conflict between rule 80 and token "->" resolved as reduce (%left "->").


State 401

   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   81                  | xvalue_expression "->" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    $default  reduce using rule 81 (xvalue_expression)

    Conflict between rule 81 and token "++" resolved as reduce ("++" < "->").
    Conflict between rule 81 and token "--" resolved as reduce ("--" < "->").
    Conflict between rule 81 and token "(" resolved as reduce (%left "(").
    Conflict between rule 81 and token "." resolved as reduce (%left ".").
    Conflict between rule 81 and token "->" resolved as reduce (%left "->").


State 402

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   57                   | xvalue_expression "&=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 57 (prvalue_expression)

    Conflict between rule 57 and token "is" resolved as shift (%right "is").
    Conflict between rule 57 and token ">" resolved as shift ("&=" < ">").
    Conflict between rule 57 and token "+" resolved as shift ("&=" < "+").
    Conflict between rule 57 and token "-" resolved as shift ("&=" < "-").
    Conflict between rule 57 and token "/" resolved as shift ("&=" < "/").
    Conflict between rule 57 and token "//" resolved as shift ("&=" < "//").
    Conflict between rule 57 and token "*" resolved as shift ("&=" < "*").
    Conflict between rule 57 and token "^^" resolved as shift ("&=" < "^^").
    Conflict between rule 57 and token "<=" resolved as shift ("&=" < "<=").
    Conflict between rule 57 and token ">=" resolved as shift ("&=" < ">=").
    Conflict between rule 57 and token "<=>" resolved as shift ("&=" < "<=>").
    Conflict between rule 57 and token "&&" resolved as shift ("&=" < "&&").
    Conflict between rule 57 and token "||" resolved as shift ("&=" < "||").
    Conflict between rule 57 and token "&" resolved as shift ("&=" < "&").
    Conflict between rule 57 and token "|" resolved as shift ("&=" < "|").
    Conflict between rule 57 and token "^" resolved as shift ("&=" < "^").
    Conflict between rule 57 and token "~" resolved as shift ("&=" < "~").
    Conflict between rule 57 and token ">>" resolved as shift ("&=" < ">>").
    Conflict between rule 57 and token "<<" resolved as shift ("&=" < "<<").


State 403

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   58                   | xvalue_expression "^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 58 (prvalue_expression)

    Conflict between rule 58 and token "is" resolved as shift (%right "is").
    Conflict between rule 58 and token ">" resolved as shift ("^=" < ">").
    Conflict between rule 58 and token "+" resolved as shift ("^=" < "+").
    Conflict between rule 58 and token "-" resolved as shift ("^=" < "-").
    Conflict between rule 58 and token "/" resolved as shift ("^=" < "/").
    Conflict between rule 58 and token "//" resolved as shift ("^=" < "//").
    Conflict between rule 58 and token "*" resolved as shift ("^=" < "*").
    Conflict between rule 58 and token "^^" resolved as shift ("^=" < "^^").
    Conflict between rule 58 and token "<=" resolved as shift ("^=" < "<=").
    Conflict between rule 58 and token ">=" resolved as shift ("^=" < ">=").
    Conflict between rule 58 and token "<=>" resolved as shift ("^=" < "<=>").
    Conflict between rule 58 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 58 and token "||" resolved as shift ("^=" < "||").
    Conflict between rule 58 and token "&" resolved as shift ("^=" < "&").
    Conflict between rule 58 and token "|" resolved as shift ("^=" < "|").
    Conflict between rule 58 and token "^" resolved as shift ("^=" < "^").
    Conflict between rule 58 and token "~" resolved as shift ("^=" < "~").
    Conflict between rule 58 and token ">>" resolved as shift ("^=" < ">>").
    Conflict between rule 58 and token "<<" resolved as shift ("^=" < "<<").


State 404

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   59                   | xvalue_expression "|=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 59 (prvalue_expression)

    Conflict between rule 59 and token "is" resolved as shift (%right "is").
    Conflict between rule 59 and token ">" resolved as shift ("|=" < ">").
    Conflict between rule 59 and token "+" resolved as shift ("|=" < "+").
    Conflict between rule 59 and token "-" resolved as shift ("|=" < "-").
    Conflict between rule 59 and token "/" resolved as shift ("|=" < "/").
    Conflict between rule 59 and token "//" resolved as shift ("|=" < "//").
    Conflict between rule 59 and token "*" resolved as shift ("|=" < "*").
    Conflict between rule 59 and token "^^" resolved as shift ("|=" < "^^").
    Conflict between rule 59 and token "<=" resolved as shift ("|=" < "<=").
    Conflict between rule 59 and token ">=" resolved as shift ("|=" < ">=").
    Conflict between rule 59 and token "<=>" resolved as shift ("|=" < "<=>").
    Conflict between rule 59 and token "&&" resolved as shift ("|=" < "&&").
    Conflict between rule 59 and token "||" resolved as shift ("|=" < "||").
    Conflict between rule 59 and token "&" resolved as shift ("|=" < "&").
    Conflict between rule 59 and token "|" resolved as shift ("|=" < "|").
    Conflict between rule 59 and token "^" resolved as shift ("|=" < "^").
    Conflict between rule 59 and token "~" resolved as shift ("|=" < "~").
    Conflict between rule 59 and token ">>" resolved as shift ("|=" < ">>").
    Conflict between rule 59 and token "<<" resolved as shift ("|=" < "<<").


State 405

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   60                   | xvalue_expression "~=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 60 (prvalue_expression)

    Conflict between rule 60 and token "is" resolved as shift (%right "is").
    Conflict between rule 60 and token ">" resolved as shift ("~=" < ">").
    Conflict between rule 60 and token "+" resolved as shift ("~=" < "+").
    Conflict between rule 60 and token "-" resolved as shift ("~=" < "-").
    Conflict between rule 60 and token "/" resolved as shift ("~=" < "/").
    Conflict between rule 60 and token "//" resolved as shift ("~=" < "//").
    Conflict between rule 60 and token "*" resolved as shift ("~=" < "*").
    Conflict between rule 60 and token "^^" resolved as shift ("~=" < "^^").
    Conflict between rule 60 and token "<=" resolved as shift ("~=" < "<=").
    Conflict between rule 60 and token ">=" resolved as shift ("~=" < ">=").
    Conflict between rule 60 and token "<=>" resolved as shift ("~=" < "<=>").
    Conflict between rule 60 and token "&&" resolved as shift ("~=" < "&&").
    Conflict between rule 60 and token "||" resolved as shift ("~=" < "||").
    Conflict between rule 60 and token "&" resolved as shift ("~=" < "&").
    Conflict between rule 60 and token "|" resolved as shift ("~=" < "|").
    Conflict between rule 60 and token "^" resolved as shift ("~=" < "^").
    Conflict between rule 60 and token "~" resolved as shift ("~=" < "~").
    Conflict between rule 60 and token ">>" resolved as shift ("~=" < ">>").
    Conflict between rule 60 and token "<<" resolved as shift ("~=" < "<<").


State 406

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   62                   | xvalue_expression "<<=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 62 (prvalue_expression)

    Conflict between rule 62 and token "is" resolved as shift (%right "is").
    Conflict between rule 62 and token ">" resolved as shift ("<<=" < ">").
    Conflict between rule 62 and token "+" resolved as shift ("<<=" < "+").
    Conflict between rule 62 and token "-" resolved as shift ("<<=" < "-").
    Conflict between rule 62 and token "/" resolved as shift ("<<=" < "/").
    Conflict between rule 62 and token "//" resolved as shift ("<<=" < "//").
    Conflict between rule 62 and token "*" resolved as shift ("<<=" < "*").
    Conflict between rule 62 and token "^^" resolved as shift ("<<=" < "^^").
    Conflict between rule 62 and token "<=" resolved as shift ("<<=" < "<=").
    Conflict between rule 62 and token ">=" resolved as shift ("<<=" < ">=").
    Conflict between rule 62 and token "<=>" resolved as shift ("<<=" < "<=>").
    Conflict between rule 62 and token "&&" resolved as shift ("<<=" < "&&").
    Conflict between rule 62 and token "||" resolved as shift ("<<=" < "||").
    Conflict between rule 62 and token "&" resolved as shift ("<<=" < "&").
    Conflict between rule 62 and token "|" resolved as shift ("<<=" < "|").
    Conflict between rule 62 and token "^" resolved as shift ("<<=" < "^").
    Conflict between rule 62 and token "~" resolved as shift ("<<=" < "~").
    Conflict between rule 62 and token ">>" resolved as shift ("<<=" < ">>").
    Conflict between rule 62 and token "<<" resolved as shift ("<<=" < "<<").


State 407

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   61                   | xvalue_expression ">>=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 61 (prvalue_expression)

    Conflict between rule 61 and token "is" resolved as shift (%right "is").
    Conflict between rule 61 and token ">" resolved as shift (">>=" < ">").
    Conflict between rule 61 and token "+" resolved as shift (">>=" < "+").
    Conflict between rule 61 and token "-" resolved as shift (">>=" < "-").
    Conflict between rule 61 and token "/" resolved as shift (">>=" < "/").
    Conflict between rule 61 and token "//" resolved as shift (">>=" < "//").
    Conflict between rule 61 and token "*" resolved as shift (">>=" < "*").
    Conflict between rule 61 and token "^^" resolved as shift (">>=" < "^^").
    Conflict between rule 61 and token "<=" resolved as shift (">>=" < "<=").
    Conflict between rule 61 and token ">=" resolved as shift (">>=" < ">=").
    Conflict between rule 61 and token "<=>" resolved as shift (">>=" < "<=>").
    Conflict between rule 61 and token "&&" resolved as shift (">>=" < "&&").
    Conflict between rule 61 and token "||" resolved as shift (">>=" < "||").
    Conflict between rule 61 and token "&" resolved as shift (">>=" < "&").
    Conflict between rule 61 and token "|" resolved as shift (">>=" < "|").
    Conflict between rule 61 and token "^" resolved as shift (">>=" < "^").
    Conflict between rule 61 and token "~" resolved as shift (">>=" < "~").
    Conflict between rule 61 and token ">>" resolved as shift (">>=" < ">>").
    Conflict between rule 61 and token "<<" resolved as shift (">>=" < "<<").


State 408

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  133 else_if_statement: "else-if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 455
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 409

  112 block_statement: • "{" statements0 "}"
  136 else_statement: "else" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 456


State 410

  127 if_statement_sequence: if_statement else_if_statements0 else_statement0 •

    $default  reduce using rule 127 (if_statement_sequence)


State 411

  134 else_statement0: else_statement •

    $default  reduce using rule 134 (else_statement0)


State 412

  132 else_if_statements: else_if_statements else_if_statement •

    $default  reduce using rule 132 (else_if_statements)


State 413

  150 catch_block: "catch" "(" • variable_declaration ")" block_statement
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list

    "let"  shift, and go to state 6

    variable_declaration  go to state 457


State 414

  151 catch_block: "catch-all" block_statement •

    $default  reduce using rule 151 (catch_block)


State 415

  149 catch_blocks: catch_blocks catch_block •

    $default  reduce using rule 149 (catch_blocks)


State 416

  279 compeval0: "compeval" •

    $default  reduce using rule 279 (compeval0)


State 417

  274 constructor_header: "ctor" access_modifier compeval0 • IDENTIFIER "(" function_argument_list ")" throwable_expression

    IDENTIFIER  shift, and go to state 458


State 418

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  261 property: "let" access_modifier "property" • type IDENTIFIER "{" property_blocks "}" ";"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 459
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 419

  283 destructor_header: "~" IDENTIFIER "(" • ")"

    ")"  shift, and go to state 460


State 420

  273 constructor: constructor_header "=" function_options • ";"

    ";"  shift, and go to state 461


State 421

  275 initializer_list: "=>" "initailize" • "(" initializer_blocks_list ")"

    "("  shift, and go to state 462


State 422

  271 constructor: constructor_header initializer_list ";" •

    $default  reduce using rule 271 (constructor)


State 423

  270 constructor: constructor_header initializer_list block_statement •

    $default  reduce using rule 270 (constructor)


State 424

  282 destructor: destructor_header "=" function_options • ";"

    ";"  shift, and go to state 463


State 425

  250 class_names_list: class_names_list "," class_name •

    $default  reduce using rule 250 (class_names_list)


State 426

   22 type_list: type_list "," type •

    $default  reduce using rule 22 (type_list)


State 427

   82 xvalue_expression: "(" rvalue_expression ")" •

    $default  reduce using rule 82 (xvalue_expression)


State 428

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  188 function_argument: type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 464
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 429

  185 function_argument_list: function_argument_list "," function_argument •

    $default  reduce using rule 185 (function_argument_list)


State 430

  189 throwable_expression: "nothrowable" •  ["=", "->", "{", "=>"]
  190                     | "nothrowable" • "(" expression ")"

    "("  shift, and go to state 465

    $default  reduce using rule 189 (throwable_expression)


State 431

  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 466


State 432

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 345
    ")"  shift, and go to state 467


State 433

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  170 variable_declaration_block: "let" type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 468
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 434

  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 469


State 435

   67 prvalue_expression: "castas" "<" type ">" • "(" rvalue_expression ")"

    "("  shift, and go to state 470


State 436

   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," • clean_up_arg ")" ";"
  153 clean_up_arg: • IDENTIFIER
  154             | • lambda_expression
  155             | • function
  156             | • anonymous_function
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  195 anonymous_function: • anonymous_function_header block_statement
  196 anonymous_function_header: • "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  197                          | • "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 471
    "func"      shift, and go to state 472
    "("         shift, and go to state 473

    lambda_expression          go to state 474
    clean_up_arg               go to state 475
    function                   go to state 476
    function_header            go to state 14
    anonymous_function         go to state 477
    anonymous_function_header  go to state 478


State 437

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  121 do_loop_statement: "do" block_statement "while" "(" • expression ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 479
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 438

  112 block_statement: • "{" statements0 "}"
  122 for_loop_statement: "for" "(" for_loop_condition ")" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 480


State 439

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  124 for_loop_condition: variable_declaration "in" • expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 481
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 440

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [";"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  123 for_loop_condition: variable_declaration ";" • expression0 ";" expression0

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    $default  reduce using rule 28 (expression0)

    expression                 go to state 449
    expression0                go to state 482
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 441

  112 block_statement: • "{" statements0 "}"
  128 if_statement: "if" "(" expression ")" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 483


State 442

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   93               | "new" "heap" type "(" • function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  100 function_call_list: • function_call_arg
  101                   | • function_call_list "," function_call_arg ";"
  102 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 443
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174
    function_call_list         go to state 484
    function_call_arg          go to state 445


State 443

  102 function_call_arg: expression •

    $default  reduce using rule 102 (function_call_arg)


State 444

   92 new_expression: "new" type "(" function_call_list • ")"
  101 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 485
    ")"  shift, and go to state 486


State 445

  100 function_call_list: function_call_arg •

    $default  reduce using rule 100 (function_call_list)


State 446

  137 switch_statement: "switch" "(" expression ")" • case_blocks0 default_block0
  138 case_blocks0: • case_blocks
  139             | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  140 case_blocks: • case_block
  141            | • case_blocks case_block
  142 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 487

    $default  reduce using rule 139 (case_blocks0)

    case_blocks0  go to state 488
    case_blocks   go to state 489
    case_block    go to state 490


State 447

   66 prvalue_expression: "typeof" "(" rvalue_expression ")" •

    $default  reduce using rule 66 (prvalue_expression)


State 448

  112 block_statement: • "{" statements0 "}"
  120 while_loop_statement: "while" "(" expression ")" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 491


State 449

   27 expression0: expression •

    $default  reduce using rule 27 (expression0)


State 450

   97 array_index: expression0 ":" expression0 •

    $default  reduce using rule 97 (array_index)


State 451

   95 array_index_list: array_index_list "," array_index •

    $default  reduce using rule 95 (array_index_list)


State 452

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | "(" rvalue_expression ")" "?" • rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 492
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 453

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   91 lambda_expression: "(" function_argument_list ")" "->" • return_types_list "=>" block_statement
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 495
    return_type         go to state 496


State 454

   98 function_call: xvalue_expression "(" function_argument_list ")" •

    $default  reduce using rule 98 (function_call)


State 455

  133 else_if_statement: "else-if" "(" expression • ")" block_statement

    ")"  shift, and go to state 497


State 456

  136 else_statement: "else" block_statement •

    $default  reduce using rule 136 (else_statement)


State 457

  150 catch_block: "catch" "(" variable_declaration • ")" block_statement

    ")"  shift, and go to state 498


State 458

  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER • "(" function_argument_list ")" throwable_expression

    "("  shift, and go to state 499


State 459

  261 property: "let" access_modifier "property" type • IDENTIFIER "{" property_blocks "}" ";"

    IDENTIFIER  shift, and go to state 500


State 460

  283 destructor_header: "~" IDENTIFIER "(" ")" •

    $default  reduce using rule 283 (destructor_header)


State 461

  273 constructor: constructor_header "=" function_options ";" •

    $default  reduce using rule 273 (constructor)


State 462

  275 initializer_list: "=>" "initailize" "(" • initializer_blocks_list ")"
  276 initializer_blocks_list: • initializer_block
  277                        | • initializer_blocks_list "," initializer_block
  278 initializer_block: • IDENTIFIER ":" rvalue_expression

    IDENTIFIER  shift, and go to state 501

    initializer_blocks_list  go to state 502
    initializer_block        go to state 503


State 463

  282 destructor: destructor_header "=" function_options ";" •

    $default  reduce using rule 282 (destructor)


State 464

  188 function_argument: type IDENTIFIER "=" expression •

    $default  reduce using rule 188 (function_argument)


State 465

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  190 throwable_expression: "nothrowable" "(" • expression ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 504
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 466

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 505
    return_type         go to state 496


State 467

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 430

    throwable_expression  go to state 506


State 468

  170 variable_declaration_block: "let" type IDENTIFIER "=" expression •

    $default  reduce using rule 170 (variable_declaration_block)


State 469

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"
  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 507
    return_type         go to state 496


State 470

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   67                   | "castas" "<" type ">" "(" • rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 508
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 471

  153 clean_up_arg: IDENTIFIER •

    $default  reduce using rule 153 (clean_up_arg)


State 472

  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  178 function_header: "func" • access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  196 anonymous_function_header: "func" • "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  197                          | "func" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER   shift, and go to state 45
    "compeval"   shift, and go to state 509
    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48
    "("          shift, and go to state 510

    access_modifier  go to state 49


State 473

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   91 lambda_expression: "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 273
    function_argument       go to state 225


State 474

  154 clean_up_arg: lambda_expression •

    $default  reduce using rule 154 (clean_up_arg)


State 475

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg • ")" ";"

    ")"  shift, and go to state 511


State 476

  155 clean_up_arg: function •

    $default  reduce using rule 155 (clean_up_arg)


State 477

  156 clean_up_arg: anonymous_function •

    $default  reduce using rule 156 (clean_up_arg)


State 478

  112 block_statement: • "{" statements0 "}"
  195 anonymous_function: anonymous_function_header • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 512


State 479

  121 do_loop_statement: "do" block_statement "while" "(" expression • ")"

    ")"  shift, and go to state 513


State 480

  122 for_loop_statement: "for" "(" for_loop_condition ")" block_statement •

    $default  reduce using rule 122 (for_loop_statement)


State 481

  124 for_loop_condition: variable_declaration "in" expression •

    $default  reduce using rule 124 (for_loop_condition)


State 482

  123 for_loop_condition: variable_declaration ";" expression0 • ";" expression0

    ";"  shift, and go to state 514


State 483

  128 if_statement: "if" "(" expression ")" block_statement •

    $default  reduce using rule 128 (if_statement)


State 484

   93 new_expression: "new" "heap" type "(" function_call_list • ")"
  101 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 485
    ")"  shift, and go to state 515


State 485

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  101 function_call_list: function_call_list "," • function_call_arg ";"
  102 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 443
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174
    function_call_arg          go to state 516


State 486

   92 new_expression: "new" type "(" function_call_list ")" •

    $default  reduce using rule 92 (new_expression)


State 487

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  142 case_block: "case" • expression ":" block_statement jump_statement

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 517
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 488

  137 switch_statement: "switch" "(" expression ")" case_blocks0 • default_block0
  143 default_block0: • default_block
  144               | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  145 default_block: • "default" ":" block_statement jump_statement

    "default"  shift, and go to state 518

    $default  reduce using rule 144 (default_block0)

    default_block0  go to state 519
    default_block   go to state 520


State 489

  138 case_blocks0: case_blocks •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  141 case_blocks: case_blocks • case_block
  142 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 487

    $default  reduce using rule 138 (case_blocks0)

    case_block  go to state 521


State 490

  140 case_blocks: case_block •

    $default  reduce using rule 140 (case_blocks)


State 491

  120 while_loop_statement: "while" "(" expression ")" block_statement •

    $default  reduce using rule 120 (while_loop_statement)


State 492

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   68                   | "(" rvalue_expression ")" "?" rvalue_expression • ":" rvalue_expression

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293
    ":"    shift, and go to state 522


State 493

  194 return_type: "typeof" • "(" expression ")"

    "("  shift, and go to state 523


State 494

  193 return_type: type •

    $default  reduce using rule 193 (return_type)


State 495

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list • "=>" block_statement
  192 return_types_list: return_types_list • "," return_type

    ","   shift, and go to state 524
    "=>"  shift, and go to state 525


State 496

  191 return_types_list: return_type •

    $default  reduce using rule 191 (return_types_list)


State 497

  112 block_statement: • "{" statements0 "}"
  133 else_if_statement: "else-if" "(" expression ")" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 526


State 498

  112 block_statement: • "{" statements0 "}"
  150 catch_block: "catch" "(" variable_declaration ")" • block_statement

    "{"  shift, and go to state 94

    block_statement  go to state 527


State 499

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" • function_argument_list ")" throwable_expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 528
    function_argument       go to state 225


State 500

  261 property: "let" access_modifier "property" type IDENTIFIER • "{" property_blocks "}" ";"

    "{"  shift, and go to state 529


State 501

  278 initializer_block: IDENTIFIER • ":" rvalue_expression

    ":"  shift, and go to state 530


State 502

  275 initializer_list: "=>" "initailize" "(" initializer_blocks_list • ")"
  277 initializer_blocks_list: initializer_blocks_list • "," initializer_block

    ","  shift, and go to state 531
    ")"  shift, and go to state 532


State 503

  276 initializer_blocks_list: initializer_block •

    $default  reduce using rule 276 (initializer_blocks_list)


State 504

  190 throwable_expression: "nothrowable" "(" expression • ")"

    ")"  shift, and go to state 533


State 505

  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  192 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 524

    $default  reduce using rule 179 (function_header)


State 506

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 534


State 507

  192 return_types_list: return_types_list • "," return_type
  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["=", "{"]

    ","  shift, and go to state 524

    $default  reduce using rule 200 (operator_overload_header)


State 508

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   67                   | "castas" "<" type ">" "(" rvalue_expression • ")"

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293
    ")"    shift, and go to state 535


State 509

  196 anonymous_function_header: "func" "compeval" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 536


State 510

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  197 anonymous_function_header: "func" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 537
    function_argument       go to state 225


State 511

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" • ";"

    ";"  shift, and go to state 538


State 512

  195 anonymous_function: anonymous_function_header block_statement •

    $default  reduce using rule 195 (anonymous_function)


State 513

  121 do_loop_statement: "do" block_statement "while" "(" expression ")" •

    $default  reduce using rule 121 (do_loop_statement)


State 514

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [")"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  123 for_loop_condition: variable_declaration ";" expression0 ";" • expression0

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    $default  reduce using rule 28 (expression0)

    expression                 go to state 449
    expression0                go to state 539
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 515

   93 new_expression: "new" "heap" type "(" function_call_list ")" •

    $default  reduce using rule 93 (new_expression)


State 516

  101 function_call_list: function_call_list "," function_call_arg • ";"

    ";"  shift, and go to state 540


State 517

  142 case_block: "case" expression • ":" block_statement jump_statement

    ":"  shift, and go to state 541


State 518

  145 default_block: "default" • ":" block_statement jump_statement

    ":"  shift, and go to state 542


State 519

  137 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0 •

    $default  reduce using rule 137 (switch_statement)


State 520

  143 default_block0: default_block •

    $default  reduce using rule 143 (default_block0)


State 521

  141 case_blocks: case_blocks case_block •

    $default  reduce using rule 141 (case_blocks)


State 522

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | "(" rvalue_expression ")" "?" rvalue_expression ":" • rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 543
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 523

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  194 return_type: "typeof" "(" • expression ")"

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    expression                 go to state 544
    assignment_arg_expression  go to state 167
    prvalue_expression         go to state 168
    rvalue_expression          go to state 169
    xvalue_expression          go to state 170
    literal                    go to state 171
    lambda_expression          go to state 172
    new_expression             go to state 173
    function_call              go to state 174


State 524

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  192 return_types_list: return_types_list "," • return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_type         go to state 545


State 525

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" • block_statement
  112 block_statement: • "{" statements0 "}"

    "{"  shift, and go to state 94

    block_statement  go to state 546


State 526

  133 else_if_statement: "else-if" "(" expression ")" block_statement •

    $default  reduce using rule 133 (else_if_statement)


State 527

  150 catch_block: "catch" "(" variable_declaration ")" block_statement •

    $default  reduce using rule 150 (catch_block)


State 528

  185 function_argument_list: function_argument_list • "," function_argument
  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list • ")" throwable_expression

    ","  shift, and go to state 345
    ")"  shift, and go to state 547


State 529

  261 property: "let" access_modifier "property" type IDENTIFIER "{" • property_blocks "}" ";"
  262 property_blocks: • get_block
  263                | • set_block
  264                | • get_block set_block
  265                | • set_block get_block
  266 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  267          | • "get" "(" ")" block_statement
  268 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  269          | • "set" "(" ")" block_statement

    "get"  shift, and go to state 548
    "set"  shift, and go to state 549

    property_blocks  go to state 550
    get_block        go to state 551
    set_block        go to state 552


State 530

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  278 initializer_block: IDENTIFIER ":" • rvalue_expression

    IDENTIFIER  shift, and go to state 132
    NPTR        shift, and go to state 133
    BOOL        shift, and go to state 134
    INT         shift, and go to state 135
    FLOAT       shift, and go to state 136
    CHAR        shift, and go to state 137
    STRING      shift, and go to state 138
    "castas"    shift, and go to state 140
    "new"       shift, and go to state 147
    "super"     shift, and go to state 150
    "this"      shift, and go to state 152
    "typeof"    shift, and go to state 155
    "["         shift, and go to state 158
    "-"         shift, and go to state 159
    "*"         shift, and go to state 160
    "!"         shift, and go to state 161
    "++"        shift, and go to state 162
    "--"        shift, and go to state 163
    "("         shift, and go to state 164

    prvalue_expression  go to state 265
    rvalue_expression   go to state 553
    xvalue_expression   go to state 267
    literal             go to state 171
    lambda_expression   go to state 172
    new_expression      go to state 173
    function_call       go to state 174


State 531

  277 initializer_blocks_list: initializer_blocks_list "," • initializer_block
  278 initializer_block: • IDENTIFIER ":" rvalue_expression

    IDENTIFIER  shift, and go to state 501

    initializer_block  go to state 554


State 532

  275 initializer_list: "=>" "initailize" "(" initializer_blocks_list ")" •

    $default  reduce using rule 275 (initializer_list)


State 533

  190 throwable_expression: "nothrowable" "(" expression ")" •

    $default  reduce using rule 190 (throwable_expression)


State 534

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 555
    return_type         go to state 496


State 535

   67 prvalue_expression: "castas" "<" type ">" "(" rvalue_expression ")" •

    $default  reduce using rule 67 (prvalue_expression)


State 536

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  196 anonymous_function_header: "func" "compeval" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 223
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 556
    function_argument       go to state 225


State 537

  185 function_argument_list: function_argument_list • "," function_argument
  197 anonymous_function_header: "func" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 345
    ")"  shift, and go to state 557


State 538

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";" •

    $default  reduce using rule 152 (clean_up_statement)


State 539

  123 for_loop_condition: variable_declaration ";" expression0 ";" expression0 •

    $default  reduce using rule 123 (for_loop_condition)


State 540

  101 function_call_list: function_call_list "," function_call_arg ";" •

    $default  reduce using rule 101 (function_call_list)


State 541

  112 block_statement: • "{" statements0 "}"
  142 case_block: "case" expression ":" • block_statement jump_statement

    "{"  shift, and go to state 94

    block_statement  go to state 558


State 542

  112 block_statement: • "{" statements0 "}"
  145 default_block: "default" ":" • block_statement jump_statement

    "{"  shift, and go to state 94

    block_statement  go to state 559


State 543

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   68                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 68 (prvalue_expression)

    Conflict between rule 68 and token "is" resolved as shift (%right "is").
    Conflict between rule 68 and token ">" resolved as shift (TERN < ">").
    Conflict between rule 68 and token "+" resolved as shift (TERN < "+").
    Conflict between rule 68 and token "-" resolved as shift (TERN < "-").
    Conflict between rule 68 and token "/" resolved as shift (TERN < "/").
    Conflict between rule 68 and token "//" resolved as shift (TERN < "//").
    Conflict between rule 68 and token "*" resolved as shift (TERN < "*").
    Conflict between rule 68 and token "^^" resolved as shift (TERN < "^^").
    Conflict between rule 68 and token "<=" resolved as shift (TERN < "<=").
    Conflict between rule 68 and token ">=" resolved as shift (TERN < ">=").
    Conflict between rule 68 and token "<=>" resolved as shift (TERN < "<=>").
    Conflict between rule 68 and token "&&" resolved as shift (TERN < "&&").
    Conflict between rule 68 and token "||" resolved as shift (TERN < "||").
    Conflict between rule 68 and token "&" resolved as shift (TERN < "&").
    Conflict between rule 68 and token "|" resolved as shift (TERN < "|").
    Conflict between rule 68 and token "^" resolved as shift (TERN < "^").
    Conflict between rule 68 and token "~" resolved as shift (TERN < "~").
    Conflict between rule 68 and token ">>" resolved as shift (TERN < ">>").
    Conflict between rule 68 and token "<<" resolved as shift (TERN < "<<").


State 544

  194 return_type: "typeof" "(" expression • ")"

    ")"  shift, and go to state 560


State 545

  192 return_types_list: return_types_list "," return_type •

    $default  reduce using rule 192 (return_types_list)


State 546

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement •

    $default  reduce using rule 91 (lambda_expression)


State 547

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" • throwable_expression

    "nothrowable"  shift, and go to state 430

    throwable_expression  go to state 561


State 548

  266 get_block: "get" • "(" ")" "=>" IDENTIFIER ";"
  267          | "get" • "(" ")" block_statement

    "("  shift, and go to state 562


State 549

  268 set_block: "set" • "(" ")" "=>" IDENTIFIER ";"
  269          | "set" • "(" ")" block_statement

    "("  shift, and go to state 563


State 550

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks • "}" ";"

    "}"  shift, and go to state 564


State 551

  262 property_blocks: get_block •  ["}"]
  264                | get_block • set_block
  268 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  269          | • "set" "(" ")" block_statement

    "set"  shift, and go to state 549

    $default  reduce using rule 262 (property_blocks)

    set_block  go to state 565


State 552

  263 property_blocks: set_block •  ["}"]
  265                | set_block • get_block
  266 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  267          | • "get" "(" ")" block_statement

    "get"  shift, and go to state 548

    $default  reduce using rule 263 (property_blocks)

    get_block  go to state 566


State 553

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
  278 initializer_block: IDENTIFIER ":" rvalue_expression •  [",", ")"]

    "is"   shift, and go to state 275
    ">"    shift, and go to state 276
    "+"    shift, and go to state 277
    "-"    shift, and go to state 278
    "/"    shift, and go to state 279
    "//"   shift, and go to state 280
    "*"    shift, and go to state 281
    "^^"   shift, and go to state 282
    "<="   shift, and go to state 283
    ">="   shift, and go to state 284
    "<=>"  shift, and go to state 285
    "&&"   shift, and go to state 286
    "||"   shift, and go to state 287
    "&"    shift, and go to state 288
    "|"    shift, and go to state 289
    "^"    shift, and go to state 290
    "~"    shift, and go to state 291
    ">>"   shift, and go to state 292
    "<<"   shift, and go to state 293

    $default  reduce using rule 278 (initializer_block)


State 554

  277 initializer_blocks_list: initializer_blocks_list "," initializer_block •

    $default  reduce using rule 277 (initializer_blocks_list)


State 555

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  192 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 524

    $default  reduce using rule 178 (function_header)


State 556

  185 function_argument_list: function_argument_list • "," function_argument
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 345
    ")"  shift, and go to state 567


State 557

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  197 anonymous_function_header: "func" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 430

    throwable_expression  go to state 568


State 558

  142 case_block: "case" expression ":" block_statement • jump_statement
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 139
    "continue"  shift, and go to state 142
    "goto"      shift, and go to state 145
    "rethrow"   shift, and go to state 148
    "return"    shift, and go to state 149
    "throw"     shift, and go to state 153
    "yield"     shift, and go to state 157

    jump_statement  go to state 569


State 559

  145 default_block: "default" ":" block_statement • jump_statement
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 139
    "continue"  shift, and go to state 142
    "goto"      shift, and go to state 145
    "rethrow"   shift, and go to state 148
    "return"    shift, and go to state 149
    "throw"     shift, and go to state 153
    "yield"     shift, and go to state 157

    jump_statement  go to state 570


State 560

  194 return_type: "typeof" "(" expression ")" •

    $default  reduce using rule 194 (return_type)


State 561

  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression •

    $default  reduce using rule 274 (constructor_header)


State 562

  266 get_block: "get" "(" • ")" "=>" IDENTIFIER ";"
  267          | "get" "(" • ")" block_statement

    ")"  shift, and go to state 571


State 563

  268 set_block: "set" "(" • ")" "=>" IDENTIFIER ";"
  269          | "set" "(" • ")" block_statement

    ")"  shift, and go to state 572


State 564

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" • ";"

    ";"  shift, and go to state 573


State 565

  264 property_blocks: get_block set_block •

    $default  reduce using rule 264 (property_blocks)


State 566

  265 property_blocks: set_block get_block •

    $default  reduce using rule 265 (property_blocks)


State 567

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 430

    throwable_expression  go to state 574


State 568

  197 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 575


State 569

  142 case_block: "case" expression ":" block_statement jump_statement •

    $default  reduce using rule 142 (case_block)


State 570

  145 default_block: "default" ":" block_statement jump_statement •

    $default  reduce using rule 145 (default_block)


State 571

  112 block_statement: • "{" statements0 "}"
  266 get_block: "get" "(" ")" • "=>" IDENTIFIER ";"
  267          | "get" "(" ")" • block_statement

    "{"   shift, and go to state 94
    "=>"  shift, and go to state 576

    block_statement  go to state 577


State 572

  112 block_statement: • "{" statements0 "}"
  268 set_block: "set" "(" ")" • "=>" IDENTIFIER ";"
  269          | "set" "(" ")" • block_statement

    "{"   shift, and go to state 94
    "=>"  shift, and go to state 578

    block_statement  go to state 579


State 573

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";" •

    $default  reduce using rule 261 (property)


State 574

  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 580


State 575

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"
  197 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 581
    return_type         go to state 496


State 576

  266 get_block: "get" "(" ")" "=>" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 582


State 577

  267 get_block: "get" "(" ")" block_statement •

    $default  reduce using rule 267 (get_block)


State 578

  268 set_block: "set" "(" ")" "=>" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 583


State 579

  269 set_block: "set" "(" ")" block_statement •

    $default  reduce using rule 269 (set_block)


State 580

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 493

    type                go to state 494
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 584
    return_type         go to state 496


State 581

  192 return_types_list: return_types_list • "," return_type
  197 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 524

    $default  reduce using rule 197 (anonymous_function_header)


State 582

  266 get_block: "get" "(" ")" "=>" IDENTIFIER • ";"

    ";"  shift, and go to state 585


State 583

  268 set_block: "set" "(" ")" "=>" IDENTIFIER • ";"

    ";"  shift, and go to state 586


State 584

  192 return_types_list: return_types_list • "," return_type
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 524

    $default  reduce using rule 196 (anonymous_function_header)


State 585

  266 get_block: "get" "(" ")" "=>" IDENTIFIER ";" •

    $default  reduce using rule 266 (get_block)


State 586

  268 set_block: "set" "(" ")" "=>" IDENTIFIER ";" •

    $default  reduce using rule 268 (set_block)
