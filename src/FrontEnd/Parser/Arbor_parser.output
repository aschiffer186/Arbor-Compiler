Terminals unused in grammar

    "initialize"


Grammar

    0 $accept: start $end

    1 start: program_units
    2      | %empty

    3 type: "const" type_root
    4     | type_root

    5 type_root: non_reference_type
    6          | reference_type

    7 non_reference_type: type_core
    8                   | type_core POINTER_TYPE
    9                   | type_core "weak" POINTER_TYPE
   10                   | type_core ARRAYL xvalue_expression ARRAYR

   11 type_core: TYPENAME type_template_paramaters
   12          | TYPENAME
   13          | "bit"
   14          | "bool"
   15          | "short"
   16          | "int"
   17          | "long"
   18          | "float"
   19          | "char"

   20 type_template_paramaters: T_BEGIN type_list T_END

   21 type_list: type
   22          | type_list "," type

   23 reference_type: "ref" non_reference_type
   24               | "rref" non_reference_type

   25 expression: assignment_arg_expression
   26           | xvalue_expression "=" rvalue_expression

   27 expression0: expression
   28            | %empty

   29 assignment_arg_expression: xvalue_expression
   30                          | prvalue_expression

   31 prvalue_expression: literal
   32                   | "super"
   33                   | rvalue_expression "+" rvalue_expression
   34                   | rvalue_expression "-" rvalue_expression
   35                   | rvalue_expression "*" rvalue_expression
   36                   | rvalue_expression "/" rvalue_expression
   37                   | rvalue_expression "//" rvalue_expression
   38                   | rvalue_expression "^^" rvalue_expression
   39                   | xvalue_expression "+=" rvalue_expression
   40                   | xvalue_expression "-=" rvalue_expression
   41                   | xvalue_expression "*=" rvalue_expression
   42                   | xvalue_expression "/=" rvalue_expression
   43                   | xvalue_expression "//=" rvalue_expression
   44                   | xvalue_expression "^^=" rvalue_expression
   45                   | rvalue_expression ">" rvalue_expression
   46                   | rvalue_expression ">=" rvalue_expression
   47                   | rvalue_expression "<=" rvalue_expression
   48                   | rvalue_expression "<=>" rvalue_expression
   49                   | rvalue_expression "&&" rvalue_expression
   50                   | rvalue_expression "||" rvalue_expression
   51                   | rvalue_expression "&" rvalue_expression
   52                   | rvalue_expression "^" rvalue_expression
   53                   | rvalue_expression "|" rvalue_expression
   54                   | rvalue_expression "~" rvalue_expression
   55                   | rvalue_expression ">>" rvalue_expression
   56                   | rvalue_expression "<<" rvalue_expression
   57                   | xvalue_expression "&=" rvalue_expression
   58                   | xvalue_expression "^=" rvalue_expression
   59                   | xvalue_expression "|=" rvalue_expression
   60                   | xvalue_expression "~=" rvalue_expression
   61                   | xvalue_expression ">>=" rvalue_expression
   62                   | xvalue_expression "<<=" rvalue_expression
   63                   | rvalue_expression "is" type
   64                   | "!" rvalue_expression
   65                   | "-" rvalue_expression
   66                   | "typeof" "(" rvalue_expression ")"
   67                   | "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | new_expression
   70                   | lambda_expression

   71 rvalue_expression: prvalue_expression
   72                  | xvalue_expression

   73 xvalue_expression: IDENTIFIER
   74                  | "this"
   75                  | "++" xvalue_expression
   76                  | "--" xvalue_expression
   77                  | xvalue_expression "++"
   78                  | xvalue_expression "--"
   79                  | "*" xvalue_expression
   80                  | xvalue_expression "." xvalue_expression
   81                  | xvalue_expression "->" xvalue_expression
   82                  | "(" rvalue_expression ")"
   83                  | "[" array_index_list "]"
   84                  | function_call

   85 literal: BOOL
   86        | NPTR
   87        | INT
   88        | FLOAT
   89        | STRING
   90        | CHAR

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement

   92 new_expression: "new" type "(" function_call_list ")"
   93               | "new" "heap" type "(" function_call_list ")"

   94 array_index_list: array_index
   95                 | array_index_list "," array_index

   96 array_index: expression
   97            | expression0 ":" expression0

   98 function_call: xvalue_expression "(" function_argument_list ")"
   99              | xvalue_expression "(" ")"

  100 function_call_list: function_call_arg
  101                   | function_call_list "," function_call_arg ";"

  102 function_call_arg: expression

  103 statement: block_statement
  104          | loop_statement
  105          | conditional_statement
  106          | exception_statement
  107          | clean_up_statement
  108          | jump_statement
  109          | expression_statement
  110          | variable_declaration_statement
  111          | no_op_statement

  112 block_statement: "{" statements0 "}"

  113 statements0: statements
  114            | %empty

  115 statements: statement
  116           | statements statement

  117 loop_statement: while_loop_statement
  118               | do_loop_statement
  119               | for_loop_statement

  120 while_loop_statement: "while" "(" expression ")" block_statement

  121 do_loop_statement: "do" block_statement "while" "(" expression ")"

  122 for_loop_statement: "for" "(" for_loop_condition ")" block_statement

  123 for_loop_condition: variable_declaration ";" expression0 ";" expression0
  124                   | variable_declaration "in" expression

  125 conditional_statement: if_statement_sequence
  126                      | switch_statement

  127 if_statement_sequence: if_statement else_if_statements0 else_statement0

  128 if_statement: "if" "(" expression ")" block_statement

  129 else_if_statements0: else_if_statements
  130                    | %empty

  131 else_if_statements: else_if_statement
  132                   | else_if_statements else_if_statement

  133 else_if_statement: "else-if" "(" expression ")" block_statement

  134 else_statement0: else_statement
  135                | %empty

  136 else_statement: "else" block_statement

  137 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0

  138 case_blocks0: case_blocks
  139             | %empty

  140 case_blocks: case_block
  141            | case_blocks case_block

  142 case_block: "case" expression ":" block_statement jump_statement

  143 default_block0: default_block
  144               | %empty

  145 default_block: "default" ":" block_statement jump_statement

  146 exception_statement: try_block catch_blocks

  147 try_block: "try" block_statement

  148 catch_blocks: catch_block
  149             | catch_blocks catch_block

  150 catch_block: "catch" "(" variable_declaration ")" block_statement
  151            | "catch-all" block_statement

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"

  153 clean_up_arg: IDENTIFIER
  154             | lambda_expression
  155             | function
  156             | anonymous_function

  157 jump_statement: "return" ";"
  158               | "break" ";"
  159               | "continue" ";"
  160               | "rethrow" ";"
  161               | "throw" expression ";"
  162               | "yield" ";"
  163               | "goto" IDENTIFIER ";"

  164 expression_statement: expression ";"

  165 variable_declaration_statement: variable_declaration ";"

  166 variable_declaration: "let" access_modifier0 variable_declaration_block_list

  167 variable_declaration_block_list: variable_declaration_block
  168                                | variable_declaration_block_list "," variable_declaration_block

  169 variable_declaration_block: "let" type IDENTIFIER
  170                           | "let" type IDENTIFIER "=" expression

  171 access_modifier0: access_modifier
  172                 | %empty

  173 access_modifier: "public"
  174                | "private"
  175                | "protected"

  176 no_op_statement: ";"

  177 function: function_header block_statement

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

  180 function_modifiers: "virtual"
  181                   | "compeval"
  182                   | "static"
  183                   | "static" "compeval"

  184 function_argument_list: function_argument
  185                       | function_argument_list "," function_argument

  186 function_argument: type IDENTIFIER
  187                  | type "..."
  188                  | type IDENTIFIER "=" expression

  189 throwable_expression: "nothrowable"
  190                     | "nothrowable" "(" expression ")"

  191 return_types_list: return_type
  192                  | return_types_list "," return_type

  193 return_type: type
  194            | "typeof" "(" expression ")"

  195 anonymous_function: anonymous_function_header block_statement

  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  197                          | "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

  198 operator_overload: operator_overload_header block_statement
  199                  | operator_overload_header "=" function_options ";"

  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list

  201 operator: "+"
  202         | "-"
  203         | "*"
  204         | "/"
  205         | "//"
  206         | "^^"
  207         | "%"
  208         | "+="
  209         | "-="
  210         | "*="
  211         | "/="
  212         | "//="
  213         | "^^="
  214         | "%="
  215         | ">"
  216         | ">="
  217         | "<"
  218         | "<="
  219         | "<=>"
  220         | "=="
  221         | "!="
  222         | "^"
  223         | "&"
  224         | "~"
  225         | "<<"
  226         | ">>"
  227         | "="
  228         | "++"
  229         | "--"
  230         | "[" "]"
  231         | "(" ")"
  232         | "->"
  233         | "new"
  234         | type

  235 function_options: "delete"
  236                 | "default"

  237 callable: function
  238         | operator_overload

  239 enum: "enum" "{" enum_members_list "}"

  240 enum_members_list: enum_member
  241                  | enum_members_list "," enum_member

  242 enum_member: IDENTIFIER
  243            | IDENTIFIER "=" INT

  244 class: class_header "{" class_statements "}"
  245      | class_header "{" "}"

  246 class_header: "class" IDENTIFIER
  247             | "class" IDENTIFIER inheritance

  248 inheritance: "inherits" class_names_list

  249 class_names_list: class_name
  250                 | class_names_list "," class_name

  251 class_name: IDENTIFIER
  252           | IDENTIFIER type_template_paramaters

  253 class_statements: class_statement
  254                 | class_statements class_statement

  255 class_statement: variable_declaration_statement
  256                | callable
  257                | constructor
  258                | destructor
  259                | property
  260                | class

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

  262 property_blocks: get_block
  263                | set_block
  264                | get_block set_block
  265                | set_block get_block

  266 get_block: "get" "(" ")" "=>" IDENTIFIER ";"
  267          | "get" "(" ")" block_statement

  268 set_block: "set" "(" ")" "=>" IDENTIFIER ";"
  269          | "set" "(" ")" block_statement

  270 constructor: constructor_header initializer_list block_statement
  271            | constructor_header initializer_list ";"
  272            | constructor_header block_statement
  273            | constructor_header "=" function_options ";"

  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

  275 initializer_list: "=>" "initailize" "(" initializer_blocks_list ")"

  276 initializer_blocks_list: initializer_block
  277                        | initializer_blocks_list "," initializer_block

  278 initializer_block: IDENTIFIER ":" rvalue_expression

  279 compeval0: "compeval"
  280          | %empty

  281 destructor: destructor_header block_statement
  282           | destructor_header "=" function_options ";"

  283 destructor_header: "~" IDENTIFIER "(" ")"

  284 module: "module" module_name ";"

  285 module_name: IDENTIFIER
  286            | module_name "." IDENTIFIER
  287            | module_name "-" IDENTIFIER

  288 import: "import" module_name ";"

  289 type_definition: "define" type "as" IDENTIFIER

  290 namespace: "namespace" module_name "{" namespace_units "}"
  291          | "namespace" module_name "{" "}"

  292 namespace_units: namespace_unit
  293                | namespace_units namespace_unit

  294 namespace_unit: class
  295               | enum
  296               | callable
  297               | type_definition
  298               | variable_declaration_statement

  299 program_units: program_unit
  300              | program_units program_unit

  301 program_unit: module
  302             | import
  303             | type_definition
  304             | callable
  305             | variable_declaration_statement
  306             | class
  307             | enum
  308             | namespace


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <std::string> (258) 73 152 153 163 169 170 178 179 186 188 242 243 246 247 251 252 261 266 268 274 278 283 285 286 287 289
    TYPENAME <std::string> (259) 11 12
    NPTR (260) 86
    BOOL <bool> (261) 85
    INT <int> (262) 87 243
    FLOAT <double> (263) 88
    CHAR <std::string> (264) 90
    STRING <std::string> (265) 89
    "as" (266) 289
    "break" (267) 158
    "bit" (268) 13
    "bool" (269) 14
    "case" (270) 142
    "castas" (271) 67
    "catch" (272) 150
    "catch-all" (273) 151
    "char" (274) 19
    "class" (275) 246 247
    "cleanup" (276) 152
    "const" (277) 3
    "continue" (278) 159
    "compeval" (279) 181 183 196 279
    "ctor" (280) 274
    "default" (281) 145 236
    "define" (282) 289
    "delete" (283) 235
    "do" (284) 121
    "else" (285) 136
    "else-if" (286) 133
    "enum" (287) 239
    "float" (288) 18
    "for" (289) 122
    "func" (290) 178 179 196 197
    "get" (291) 266 267
    "goto" (292) 163
    "heap" (293) 93
    "if" (294) 128
    "import" (295) 288
    "in" (296) 124
    "inherits" (297) 248
    "initialize" (298)
    "int" (299) 16
    "is" (300) 63
    "let" (301) 166 169 170 261
    "long" (302) 17
    "module" (303) 284
    "new" (304) 92 93 233
    "nothrowable" (305) 189 190
    "operator" (306) 200
    "private" (307) 174
    "property" (308) 261
    "protected" (309) 175
    "public" (310) 173
    "ref" (311) 23
    "rref" (312) 24
    "rethrow" (313) 160
    "return" (314) 157
    "set" (315) 268 269
    "short" (316) 15
    "static" (317) 182 183
    "super" (318) 32
    "switch" (319) 137
    "this" (320) 74
    "throw" (321) 161
    "try" (322) 147
    "typeof" (323) 66 194
    "virtual" (324) 180
    "weak" (325) 9
    "while" (326) 120 121
    "yield" (327) 162
    "[" (328) 83 230
    "]" (329) 83 230
    "<" (330) 67 217
    ">" (331) 45 67 215
    "," (332) 22 95 101 152 168 185 192 241 250 277
    "+" (333) 33 201
    "-" (334) 34 65 202 287
    "/" (335) 36 204
    "//" (336) 37 205
    "*" (337) 35 79 203
    "^^" (338) 38 206
    "%" (339) 207
    "+=" (340) 39 208
    "-=" (341) 40 209
    "*=" (342) 41 210
    "/=" (343) 42 211
    "//=" (344) 43 212
    "^^=" (345) 44 213
    "%=" (346) 214
    "<=" (347) 47 218
    ">=" (348) 46 216
    "==" (349) 220
    "!=" (350) 221
    "<=>" (351) 48 219
    "&&" (352) 49
    "||" (353) 50
    "&" (354) 51 223
    "|" (355) 53
    "!" (356) 64
    "^" (357) 52 222
    "~" (358) 54 224 283
    ">>" (359) 55 226
    "<<" (360) 56 225
    "=" (361) 26 170 188 199 227 243 273 282
    "++" (362) 75 77 228
    "--" (363) 76 78 229
    "(" (364) 66 67 68 82 91 92 93 98 99 120 121 122 128 133 137 150 152 178 179 190 194 196 197 200 231 266 267 268 269 274 275 283
    ")" (365) 66 67 68 82 91 92 93 98 99 120 121 122 128 133 137 150 152 178 179 190 194 196 197 200 231 266 267 268 269 274 275 283
    "?" (366) 68
    ":" (367) 68 97 142 145 278
    "." (368) 80 286
    "->" (369) 81 91 178 179 196 197 200 232
    "{" (370) 112 239 244 245 261 290 291
    "}" (371) 112 239 244 245 261 290 291
    "=>" (372) 91 266 268 275
    ";" (373) 101 123 152 157 158 159 160 161 162 163 164 165 176 199 261 266 268 271 273 282 284 288
    "..." (374) 187
    "&=" (375) 57
    "^=" (376) 58
    "|=" (377) 59
    "~=" (378) 60
    "<<=" (379) 62
    ">>=" (380) 61
    POINTER_TYPE (381) 8 9
    ARRAYL (382) 10
    ARRAYR (383) 10
    T_BEGIN (384) 20
    T_END (385) 20
    UMINUS (386)
    POSTINC (387)
    POSTDEC (388)
    TERN (389)
    DEREF (390)
    "initailize" (391) 275
    "namespace" (392) 290 291


Nonterminals, with rules where they appear

    $accept (138)
        on left: 0
    start (139)
        on left: 1 2
        on right: 0
    type (140)
        on left: 3 4
        on right: 21 22 63 67 92 93 169 170 186 187 188 193 234 261 289
    type_root (141)
        on left: 5 6
        on right: 3 4
    non_reference_type (142)
        on left: 7 8 9 10
        on right: 5 23 24
    type_core (143)
        on left: 11 12 13 14 15 16 17 18 19
        on right: 7 8 9 10
    type_template_paramaters (144)
        on left: 20
        on right: 11 252
    type_list (145)
        on left: 21 22
        on right: 20 22
    reference_type (146)
        on left: 23 24
        on right: 6
    expression (147)
        on left: 25 26
        on right: 27 96 102 120 121 124 128 133 137 142 161 164 170 188 190 194
    expression0 (148)
        on left: 27 28
        on right: 97 123
    assignment_arg_expression (149)
        on left: 29 30
        on right: 25
    prvalue_expression (150)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
        on right: 30 71
    rvalue_expression (151)
        on left: 71 72
        on right: 26 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 82 278
    xvalue_expression (152)
        on left: 73 74 75 76 77 78 79 80 81 82 83 84
        on right: 10 26 29 39 40 41 42 43 44 57 58 59 60 61 62 72 75 76 77 78 79 80 81 98 99
    literal (153)
        on left: 85 86 87 88 89 90
        on right: 31
    lambda_expression (154)
        on left: 91
        on right: 70 154
    new_expression (155)
        on left: 92 93
        on right: 69
    array_index_list (156)
        on left: 94 95
        on right: 83 95
    array_index (157)
        on left: 96 97
        on right: 94 95
    function_call (158)
        on left: 98 99
        on right: 84
    function_call_list (159)
        on left: 100 101
        on right: 92 93 101
    function_call_arg (160)
        on left: 102
        on right: 100 101
    statement (161)
        on left: 103 104 105 106 107 108 109 110 111
        on right: 115 116
    block_statement (162)
        on left: 112
        on right: 91 103 120 121 122 128 133 136 142 145 147 150 151 177 195 198 267 269 270 272 281
    statements0 (163)
        on left: 113 114
        on right: 112
    statements (164)
        on left: 115 116
        on right: 113 116
    loop_statement (165)
        on left: 117 118 119
        on right: 104
    while_loop_statement (166)
        on left: 120
        on right: 117
    do_loop_statement (167)
        on left: 121
        on right: 118
    for_loop_statement (168)
        on left: 122
        on right: 119
    for_loop_condition (169)
        on left: 123 124
        on right: 122
    conditional_statement (170)
        on left: 125 126
        on right: 105
    if_statement_sequence (171)
        on left: 127
        on right: 125
    if_statement (172)
        on left: 128
        on right: 127
    else_if_statements0 (173)
        on left: 129 130
        on right: 127
    else_if_statements (174)
        on left: 131 132
        on right: 129 132
    else_if_statement (175)
        on left: 133
        on right: 131 132
    else_statement0 (176)
        on left: 134 135
        on right: 127
    else_statement (177)
        on left: 136
        on right: 134
    switch_statement (178)
        on left: 137
        on right: 126
    case_blocks0 (179)
        on left: 138 139
        on right: 137
    case_blocks (180)
        on left: 140 141
        on right: 138 141
    case_block (181)
        on left: 142
        on right: 140 141
    default_block0 (182)
        on left: 143 144
        on right: 137
    default_block (183)
        on left: 145
        on right: 143
    exception_statement (184)
        on left: 146
        on right: 106
    try_block (185)
        on left: 147
        on right: 146
    catch_blocks (186)
        on left: 148 149
        on right: 146 149
    catch_block (187)
        on left: 150 151
        on right: 148 149
    clean_up_statement (188)
        on left: 152
        on right: 107
    clean_up_arg (189)
        on left: 153 154 155 156
        on right: 152
    jump_statement (190)
        on left: 157 158 159 160 161 162 163
        on right: 108 142 145
    expression_statement (191)
        on left: 164
        on right: 109
    variable_declaration_statement (192)
        on left: 165
        on right: 110 255 298 305
    variable_declaration (193)
        on left: 166
        on right: 123 124 150 165
    variable_declaration_block_list (194)
        on left: 167 168
        on right: 166 168
    variable_declaration_block (195)
        on left: 169 170
        on right: 167 168
    access_modifier0 (196)
        on left: 171 172
        on right: 166
    access_modifier (197)
        on left: 173 174 175
        on right: 171 178 261 274
    no_op_statement (198)
        on left: 176
        on right: 111
    function (199)
        on left: 177
        on right: 155 237
    function_header (200)
        on left: 178 179
        on right: 177
    function_modifiers (201)
        on left: 180 181 182 183
        on right: 178
    function_argument_list (202)
        on left: 184 185
        on right: 91 98 178 179 185 196 197 200 274
    function_argument (203)
        on left: 186 187 188
        on right: 184 185
    throwable_expression (204)
        on left: 189 190
        on right: 178 179 196 197 200 274
    return_types_list (205)
        on left: 191 192
        on right: 91 178 179 192 196 197 200
    return_type (206)
        on left: 193 194
        on right: 191 192
    anonymous_function (207)
        on left: 195
        on right: 156
    anonymous_function_header (208)
        on left: 196 197
        on right: 195
    operator_overload (209)
        on left: 198 199
        on right: 238
    operator_overload_header (210)
        on left: 200
        on right: 198 199
    operator (211)
        on left: 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234
        on right: 200
    function_options (212)
        on left: 235 236
        on right: 199 273 282
    callable (213)
        on left: 237 238
        on right: 256 296 304
    enum (214)
        on left: 239
        on right: 295 307
    enum_members_list (215)
        on left: 240 241
        on right: 239 241
    enum_member (216)
        on left: 242 243
        on right: 240 241
    class (217)
        on left: 244 245
        on right: 260 294 306
    class_header (218)
        on left: 246 247
        on right: 244 245
    inheritance (219)
        on left: 248
        on right: 247
    class_names_list (220)
        on left: 249 250
        on right: 248 250
    class_name (221)
        on left: 251 252
        on right: 249 250
    class_statements (222)
        on left: 253 254
        on right: 244 254
    class_statement (223)
        on left: 255 256 257 258 259 260
        on right: 253 254
    property (224)
        on left: 261
        on right: 259
    property_blocks (225)
        on left: 262 263 264 265
        on right: 261
    get_block (226)
        on left: 266 267
        on right: 262 264 265
    set_block (227)
        on left: 268 269
        on right: 263 264 265
    constructor (228)
        on left: 270 271 272 273
        on right: 257
    constructor_header (229)
        on left: 274
        on right: 270 271 272 273
    initializer_list (230)
        on left: 275
        on right: 270 271
    initializer_blocks_list (231)
        on left: 276 277
        on right: 275 277
    initializer_block (232)
        on left: 278
        on right: 276 277
    compeval0 (233)
        on left: 279 280
        on right: 274
    destructor (234)
        on left: 281 282
        on right: 258
    destructor_header (235)
        on left: 283
        on right: 281 282
    module (236)
        on left: 284
        on right: 301
    module_name (237)
        on left: 285 286 287
        on right: 284 286 287 288 290 291
    import (238)
        on left: 288
        on right: 302
    type_definition (239)
        on left: 289
        on right: 297 303
    namespace (240)
        on left: 290 291
        on right: 308
    namespace_units (241)
        on left: 292 293
        on right: 290 293
    namespace_unit (242)
        on left: 294 295 296 297 298
        on right: 292 293
    program_units (243)
        on left: 299 300
        on right: 1 300
    program_unit (244)
        on left: 301 302 303 304 305 306 307 308
        on right: 299 300


State 0

    0 $accept: • start $end
    1 start: • program_units
    2      | • %empty  [$end]
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  284 module: • "module" module_name ";"
  288 import: • "import" module_name ";"
  289 type_definition: • "define" type "as" IDENTIFIER
  290 namespace: • "namespace" module_name "{" namespace_units "}"
  291          | • "namespace" module_name "{" "}"
  299 program_units: • program_unit
  300              | • program_units program_unit
  301 program_unit: • module
  302             | • import
  303             | • type_definition
  304             | • callable
  305             | • variable_declaration_statement
  306             | • class
  307             | • enum
  308             | • namespace

    "class"      shift, and go to state 1
    "define"     shift, and go to state 2
    "enum"       shift, and go to state 3
    "func"       shift, and go to state 4
    "import"     shift, and go to state 5
    "let"        shift, and go to state 6
    "module"     shift, and go to state 7
    "operator"   shift, and go to state 8
    "namespace"  shift, and go to state 9

    $default  reduce using rule 2 (start)

    start                           go to state 10
    variable_declaration_statement  go to state 11
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 17
    enum                            go to state 18
    class                           go to state 19
    class_header                    go to state 20
    module                          go to state 21
    import                          go to state 22
    type_definition                 go to state 23
    namespace                       go to state 24
    program_units                   go to state 25
    program_unit                    go to state 26


State 1

  246 class_header: "class" • IDENTIFIER
  247             | "class" • IDENTIFIER inheritance

    IDENTIFIER  shift, and go to state 27


State 2

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  289 type_definition: "define" • type "as" IDENTIFIER

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 39
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 3

  239 enum: "enum" • "{" enum_members_list "}"

    "{"  shift, and go to state 44


State 4

  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  178 function_header: "func" • access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER   shift, and go to state 45
    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    access_modifier  go to state 49


State 5

  285 module_name: • IDENTIFIER
  286            | • module_name "." IDENTIFIER
  287            | • module_name "-" IDENTIFIER
  288 import: "import" • module_name ";"

    IDENTIFIER  shift, and go to state 50

    module_name  go to state 51


State 6

  166 variable_declaration: "let" • access_modifier0 variable_declaration_block_list
  171 access_modifier0: • access_modifier
  172                 | • %empty  ["let"]
  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"

    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    $default  reduce using rule 172 (access_modifier0)

    access_modifier0  go to state 52
    access_modifier   go to state 53


State 7

  284 module: "module" • module_name ";"
  285 module_name: • IDENTIFIER
  286            | • module_name "." IDENTIFIER
  287            | • module_name "-" IDENTIFIER

    IDENTIFIER  shift, and go to state 50

    module_name  go to state 54


State 8

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  200 operator_overload_header: "operator" • operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  201 operator: • "+"
  202         | • "-"
  203         | • "*"
  204         | • "/"
  205         | • "//"
  206         | • "^^"
  207         | • "%"
  208         | • "+="
  209         | • "-="
  210         | • "*="
  211         | • "/="
  212         | • "//="
  213         | • "^^="
  214         | • "%="
  215         | • ">"
  216         | • ">="
  217         | • "<"
  218         | • "<="
  219         | • "<=>"
  220         | • "=="
  221         | • "!="
  222         | • "^"
  223         | • "&"
  224         | • "~"
  225         | • "<<"
  226         | • ">>"
  227         | • "="
  228         | • "++"
  229         | • "--"
  230         | • "[" "]"
  231         | • "(" ")"
  232         | • "->"
  233         | • "new"
  234         | • type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "new"     shift, and go to state 55
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "["       shift, and go to state 56
    "<"       shift, and go to state 57
    ">"       shift, and go to state 58
    "+"       shift, and go to state 59
    "-"       shift, and go to state 60
    "/"       shift, and go to state 61
    "//"      shift, and go to state 62
    "*"       shift, and go to state 63
    "^^"      shift, and go to state 64
    "%"       shift, and go to state 65
    "+="      shift, and go to state 66
    "-="      shift, and go to state 67
    "*="      shift, and go to state 68
    "/="      shift, and go to state 69
    "//="     shift, and go to state 70
    "^^="     shift, and go to state 71
    "%="      shift, and go to state 72
    "<="      shift, and go to state 73
    ">="      shift, and go to state 74
    "=="      shift, and go to state 75
    "!="      shift, and go to state 76
    "<=>"     shift, and go to state 77
    "&"       shift, and go to state 78
    "^"       shift, and go to state 79
    "~"       shift, and go to state 80
    ">>"      shift, and go to state 81
    "<<"      shift, and go to state 82
    "="       shift, and go to state 83
    "++"      shift, and go to state 84
    "--"      shift, and go to state 85
    "("       shift, and go to state 86
    "->"      shift, and go to state 87

    type                go to state 88
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    operator            go to state 89


State 9

  285 module_name: • IDENTIFIER
  286            | • module_name "." IDENTIFIER
  287            | • module_name "-" IDENTIFIER
  290 namespace: "namespace" • module_name "{" namespace_units "}"
  291          | "namespace" • module_name "{" "}"

    IDENTIFIER  shift, and go to state 50

    module_name  go to state 90


State 10

    0 $accept: start • $end

    $end  shift, and go to state 91


State 11

  305 program_unit: variable_declaration_statement •

    $default  reduce using rule 305 (program_unit)


State 12

  165 variable_declaration_statement: variable_declaration • ";"

    ";"  shift, and go to state 92


State 13

  237 callable: function •

    $default  reduce using rule 237 (callable)


State 14

  112 block_statement: • "{" statements0 "}"
  177 function: function_header • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 94


State 15

  238 callable: operator_overload •

    $default  reduce using rule 238 (callable)


State 16

  112 block_statement: • "{" statements0 "}"
  198 operator_overload: operator_overload_header • block_statement
  199                  | operator_overload_header • "=" function_options ";"

    "="  shift, and go to state 95
    "{"  shift, and go to state 93

    block_statement  go to state 96


State 17

  304 program_unit: callable •

    $default  reduce using rule 304 (program_unit)


State 18

  307 program_unit: enum •

    $default  reduce using rule 307 (program_unit)


State 19

  306 program_unit: class •

    $default  reduce using rule 306 (program_unit)


State 20

  244 class: class_header • "{" class_statements "}"
  245      | class_header • "{" "}"

    "{"  shift, and go to state 97


State 21

  301 program_unit: module •

    $default  reduce using rule 301 (program_unit)


State 22

  302 program_unit: import •

    $default  reduce using rule 302 (program_unit)


State 23

  303 program_unit: type_definition •

    $default  reduce using rule 303 (program_unit)


State 24

  308 program_unit: namespace •

    $default  reduce using rule 308 (program_unit)


State 25

    1 start: program_units •  [$end]
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  284 module: • "module" module_name ";"
  288 import: • "import" module_name ";"
  289 type_definition: • "define" type "as" IDENTIFIER
  290 namespace: • "namespace" module_name "{" namespace_units "}"
  291          | • "namespace" module_name "{" "}"
  300 program_units: program_units • program_unit
  301 program_unit: • module
  302             | • import
  303             | • type_definition
  304             | • callable
  305             | • variable_declaration_statement
  306             | • class
  307             | • enum
  308             | • namespace

    "class"      shift, and go to state 1
    "define"     shift, and go to state 2
    "enum"       shift, and go to state 3
    "func"       shift, and go to state 4
    "import"     shift, and go to state 5
    "let"        shift, and go to state 6
    "module"     shift, and go to state 7
    "operator"   shift, and go to state 8
    "namespace"  shift, and go to state 9

    $default  reduce using rule 1 (start)

    variable_declaration_statement  go to state 11
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 17
    enum                            go to state 18
    class                           go to state 19
    class_header                    go to state 20
    module                          go to state 21
    import                          go to state 22
    type_definition                 go to state 23
    namespace                       go to state 24
    program_unit                    go to state 98


State 26

  299 program_units: program_unit •

    $default  reduce using rule 299 (program_units)


State 27

  246 class_header: "class" IDENTIFIER •  ["{"]
  247             | "class" IDENTIFIER • inheritance
  248 inheritance: • "inherits" class_names_list

    "inherits"  shift, and go to state 99

    $default  reduce using rule 246 (class_header)

    inheritance  go to state 100


State 28

   11 type_core: TYPENAME • type_template_paramaters
   12          | TYPENAME •  [IDENTIFIER, "as", "in", "is", "weak", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", POINTER_TYPE, ARRAYL, T_END]
   20 type_template_paramaters: • T_BEGIN type_list T_END

    T_BEGIN  shift, and go to state 101

    $default  reduce using rule 12 (type_core)

    type_template_paramaters  go to state 102


State 29

   13 type_core: "bit" •

    $default  reduce using rule 13 (type_core)


State 30

   14 type_core: "bool" •

    $default  reduce using rule 14 (type_core)


State 31

   19 type_core: "char" •

    $default  reduce using rule 19 (type_core)


State 32

    3 type: "const" • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type_root           go to state 103
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 33

   18 type_core: "float" •

    $default  reduce using rule 18 (type_core)


State 34

   16 type_core: "int" •

    $default  reduce using rule 16 (type_core)


State 35

   17 type_core: "long" •

    $default  reduce using rule 17 (type_core)


State 36

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: "ref" • non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "short"   shift, and go to state 38

    non_reference_type  go to state 104
    type_core           go to state 42


State 37

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   24 reference_type: "rref" • non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "short"   shift, and go to state 38

    non_reference_type  go to state 105
    type_core           go to state 42


State 38

   15 type_core: "short" •

    $default  reduce using rule 15 (type_core)


State 39

  289 type_definition: "define" type • "as" IDENTIFIER

    "as"  shift, and go to state 106


State 40

    4 type: type_root •

    $default  reduce using rule 4 (type)


State 41

    5 type_root: non_reference_type •

    $default  reduce using rule 5 (type_root)


State 42

    7 non_reference_type: type_core •  [IDENTIFIER, "as", "in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", T_END]
    8                   | type_core • POINTER_TYPE
    9                   | type_core • "weak" POINTER_TYPE
   10                   | type_core • ARRAYL xvalue_expression ARRAYR

    "weak"        shift, and go to state 107
    POINTER_TYPE  shift, and go to state 108
    ARRAYL        shift, and go to state 109

    $default  reduce using rule 7 (non_reference_type)


State 43

    6 type_root: reference_type •

    $default  reduce using rule 6 (type_root)


State 44

  239 enum: "enum" "{" • enum_members_list "}"
  240 enum_members_list: • enum_member
  241                  | • enum_members_list "," enum_member
  242 enum_member: • IDENTIFIER
  243            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 110

    enum_members_list  go to state 111
    enum_member        go to state 112


State 45

  179 function_header: "func" IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 113


State 46

  174 access_modifier: "private" •

    $default  reduce using rule 174 (access_modifier)


State 47

  175 access_modifier: "protected" •

    $default  reduce using rule 175 (access_modifier)


State 48

  173 access_modifier: "public" •

    $default  reduce using rule 173 (access_modifier)


State 49

  178 function_header: "func" access_modifier • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  180 function_modifiers: • "virtual"
  181                   | • "compeval"
  182                   | • "static"
  183                   | • "static" "compeval"

    "compeval"  shift, and go to state 114
    "static"    shift, and go to state 115
    "virtual"   shift, and go to state 116

    function_modifiers  go to state 117


State 50

  285 module_name: IDENTIFIER •

    $default  reduce using rule 285 (module_name)


State 51

  286 module_name: module_name • "." IDENTIFIER
  287            | module_name • "-" IDENTIFIER
  288 import: "import" module_name • ";"

    "-"  shift, and go to state 118
    "."  shift, and go to state 119
    ";"  shift, and go to state 120


State 52

  166 variable_declaration: "let" access_modifier0 • variable_declaration_block_list
  167 variable_declaration_block_list: • variable_declaration_block
  168                                | • variable_declaration_block_list "," variable_declaration_block
  169 variable_declaration_block: • "let" type IDENTIFIER
  170                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 121

    variable_declaration_block_list  go to state 122
    variable_declaration_block       go to state 123


State 53

  171 access_modifier0: access_modifier •

    $default  reduce using rule 171 (access_modifier0)


State 54

  284 module: "module" module_name • ";"
  286 module_name: module_name • "." IDENTIFIER
  287            | module_name • "-" IDENTIFIER

    "-"  shift, and go to state 118
    "."  shift, and go to state 119
    ";"  shift, and go to state 124


State 55

  233 operator: "new" •

    $default  reduce using rule 233 (operator)


State 56

  230 operator: "[" • "]"

    "]"  shift, and go to state 125


State 57

  217 operator: "<" •

    $default  reduce using rule 217 (operator)


State 58

  215 operator: ">" •

    $default  reduce using rule 215 (operator)


State 59

  201 operator: "+" •

    $default  reduce using rule 201 (operator)


State 60

  202 operator: "-" •

    $default  reduce using rule 202 (operator)


State 61

  204 operator: "/" •

    $default  reduce using rule 204 (operator)


State 62

  205 operator: "//" •

    $default  reduce using rule 205 (operator)


State 63

  203 operator: "*" •

    $default  reduce using rule 203 (operator)


State 64

  206 operator: "^^" •

    $default  reduce using rule 206 (operator)


State 65

  207 operator: "%" •

    $default  reduce using rule 207 (operator)


State 66

  208 operator: "+=" •

    $default  reduce using rule 208 (operator)


State 67

  209 operator: "-=" •

    $default  reduce using rule 209 (operator)


State 68

  210 operator: "*=" •

    $default  reduce using rule 210 (operator)


State 69

  211 operator: "/=" •

    $default  reduce using rule 211 (operator)


State 70

  212 operator: "//=" •

    $default  reduce using rule 212 (operator)


State 71

  213 operator: "^^=" •

    $default  reduce using rule 213 (operator)


State 72

  214 operator: "%=" •

    $default  reduce using rule 214 (operator)


State 73

  218 operator: "<=" •

    $default  reduce using rule 218 (operator)


State 74

  216 operator: ">=" •

    $default  reduce using rule 216 (operator)


State 75

  220 operator: "==" •

    $default  reduce using rule 220 (operator)


State 76

  221 operator: "!=" •

    $default  reduce using rule 221 (operator)


State 77

  219 operator: "<=>" •

    $default  reduce using rule 219 (operator)


State 78

  223 operator: "&" •

    $default  reduce using rule 223 (operator)


State 79

  222 operator: "^" •

    $default  reduce using rule 222 (operator)


State 80

  224 operator: "~" •

    $default  reduce using rule 224 (operator)


State 81

  226 operator: ">>" •

    $default  reduce using rule 226 (operator)


State 82

  225 operator: "<<" •

    $default  reduce using rule 225 (operator)


State 83

  227 operator: "=" •

    $default  reduce using rule 227 (operator)


State 84

  228 operator: "++" •

    $default  reduce using rule 228 (operator)


State 85

  229 operator: "--" •

    $default  reduce using rule 229 (operator)


State 86

  231 operator: "(" • ")"

    ")"  shift, and go to state 126


State 87

  232 operator: "->" •

    $default  reduce using rule 232 (operator)


State 88

  234 operator: type •

    $default  reduce using rule 234 (operator)


State 89

  200 operator_overload_header: "operator" operator • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 127


State 90

  286 module_name: module_name • "." IDENTIFIER
  287            | module_name • "-" IDENTIFIER
  290 namespace: "namespace" module_name • "{" namespace_units "}"
  291          | "namespace" module_name • "{" "}"

    "-"  shift, and go to state 118
    "."  shift, and go to state 119
    "{"  shift, and go to state 128


State 91

    0 $accept: start $end •

    $default  accept


State 92

  165 variable_declaration_statement: variable_declaration ";" •

    $default  reduce using rule 165 (variable_declaration_statement)


State 93

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  103 statement: • block_statement
  104          | • loop_statement
  105          | • conditional_statement
  106          | • exception_statement
  107          | • clean_up_statement
  108          | • jump_statement
  109          | • expression_statement
  110          | • variable_declaration_statement
  111          | • no_op_statement
  112 block_statement: • "{" statements0 "}"
  112                | "{" • statements0 "}"
  113 statements0: • statements
  114            | • %empty  ["}"]
  115 statements: • statement
  116           | • statements statement
  117 loop_statement: • while_loop_statement
  118               | • do_loop_statement
  119               | • for_loop_statement
  120 while_loop_statement: • "while" "(" expression ")" block_statement
  121 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  122 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  125 conditional_statement: • if_statement_sequence
  126                      | • switch_statement
  127 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  128 if_statement: • "if" "(" expression ")" block_statement
  137 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  146 exception_statement: • try_block catch_blocks
  147 try_block: • "try" block_statement
  152 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"
  164 expression_statement: • expression ";"
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  176 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "break"     shift, and go to state 136
    "castas"    shift, and go to state 137
    "cleanup"   shift, and go to state 138
    "continue"  shift, and go to state 139
    "do"        shift, and go to state 140
    "for"       shift, and go to state 141
    "goto"      shift, and go to state 142
    "if"        shift, and go to state 143
    "let"       shift, and go to state 6
    "new"       shift, and go to state 144
    "rethrow"   shift, and go to state 145
    "return"    shift, and go to state 146
    "super"     shift, and go to state 147
    "switch"    shift, and go to state 148
    "this"      shift, and go to state 149
    "throw"     shift, and go to state 150
    "try"       shift, and go to state 151
    "typeof"    shift, and go to state 152
    "while"     shift, and go to state 153
    "yield"     shift, and go to state 154
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161
    "{"         shift, and go to state 93
    ";"         shift, and go to state 162

    $default  reduce using rule 114 (statements0)

    expression                      go to state 163
    assignment_arg_expression       go to state 164
    prvalue_expression              go to state 165
    rvalue_expression               go to state 166
    xvalue_expression               go to state 167
    literal                         go to state 168
    lambda_expression               go to state 169
    new_expression                  go to state 170
    function_call                   go to state 171
    statement                       go to state 172
    block_statement                 go to state 173
    statements0                     go to state 174
    statements                      go to state 175
    loop_statement                  go to state 176
    while_loop_statement            go to state 177
    do_loop_statement               go to state 178
    for_loop_statement              go to state 179
    conditional_statement           go to state 180
    if_statement_sequence           go to state 181
    if_statement                    go to state 182
    switch_statement                go to state 183
    exception_statement             go to state 184
    try_block                       go to state 185
    clean_up_statement              go to state 186
    jump_statement                  go to state 187
    expression_statement            go to state 188
    variable_declaration_statement  go to state 189
    variable_declaration            go to state 12
    no_op_statement                 go to state 190


State 94

  177 function: function_header block_statement •

    $default  reduce using rule 177 (function)


State 95

  199 operator_overload: operator_overload_header "=" • function_options ";"
  235 function_options: • "delete"
  236                 | • "default"

    "default"  shift, and go to state 191
    "delete"   shift, and go to state 192

    function_options  go to state 193


State 96

  198 operator_overload: operator_overload_header block_statement •

    $default  reduce using rule 198 (operator_overload)


State 97

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  244 class: • class_header "{" class_statements "}"
  244      | class_header "{" • class_statements "}"
  245      | • class_header "{" "}"
  245      | class_header "{" • "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  253 class_statements: • class_statement
  254                 | • class_statements class_statement
  255 class_statement: • variable_declaration_statement
  256                | • callable
  257                | • constructor
  258                | • destructor
  259                | • property
  260                | • class
  261 property: • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270 constructor: • constructor_header initializer_list block_statement
  271            | • constructor_header initializer_list ";"
  272            | • constructor_header block_statement
  273            | • constructor_header "=" function_options ";"
  274 constructor_header: • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  281 destructor: • destructor_header block_statement
  282           | • destructor_header "=" function_options ";"
  283 destructor_header: • "~" IDENTIFIER "(" ")"

    "class"     shift, and go to state 1
    "ctor"      shift, and go to state 194
    "func"      shift, and go to state 4
    "let"       shift, and go to state 195
    "operator"  shift, and go to state 8
    "~"         shift, and go to state 196
    "}"         shift, and go to state 197

    variable_declaration_statement  go to state 198
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 199
    class                           go to state 200
    class_header                    go to state 20
    class_statements                go to state 201
    class_statement                 go to state 202
    property                        go to state 203
    constructor                     go to state 204
    constructor_header              go to state 205
    destructor                      go to state 206
    destructor_header               go to state 207


State 98

  300 program_units: program_units program_unit •

    $default  reduce using rule 300 (program_units)


State 99

  248 inheritance: "inherits" • class_names_list
  249 class_names_list: • class_name
  250                 | • class_names_list "," class_name
  251 class_name: • IDENTIFIER
  252           | • IDENTIFIER type_template_paramaters

    IDENTIFIER  shift, and go to state 208

    class_names_list  go to state 209
    class_name        go to state 210


State 100

  247 class_header: "class" IDENTIFIER inheritance •

    $default  reduce using rule 247 (class_header)


State 101

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   20 type_template_paramaters: T_BEGIN • type_list T_END
   21 type_list: • type
   22          | • type_list "," type
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 211
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    type_list           go to state 212
    reference_type      go to state 43


State 102

   11 type_core: TYPENAME type_template_paramaters •

    $default  reduce using rule 11 (type_core)


State 103

    3 type: "const" type_root •

    $default  reduce using rule 3 (type)


State 104

   23 reference_type: "ref" non_reference_type •

    $default  reduce using rule 23 (reference_type)


State 105

   24 reference_type: "rref" non_reference_type •

    $default  reduce using rule 24 (reference_type)


State 106

  289 type_definition: "define" type "as" • IDENTIFIER

    IDENTIFIER  shift, and go to state 213


State 107

    9 non_reference_type: type_core "weak" • POINTER_TYPE

    POINTER_TYPE  shift, and go to state 214


State 108

    8 non_reference_type: type_core POINTER_TYPE •

    $default  reduce using rule 8 (non_reference_type)


State 109

   10 non_reference_type: type_core ARRAYL • xvalue_expression ARRAYR
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    "this"      shift, and go to state 149
    "["         shift, and go to state 155
    "*"         shift, and go to state 157
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 215

    xvalue_expression  go to state 216
    function_call      go to state 171


State 110

  242 enum_member: IDENTIFIER •  [",", "}"]
  243            | IDENTIFIER • "=" INT

    "="  shift, and go to state 217

    $default  reduce using rule 242 (enum_member)


State 111

  239 enum: "enum" "{" enum_members_list • "}"
  241 enum_members_list: enum_members_list • "," enum_member

    ","  shift, and go to state 218
    "}"  shift, and go to state 219


State 112

  240 enum_members_list: enum_member •

    $default  reduce using rule 240 (enum_members_list)


State 113

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  179 function_header: "func" IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 221
    function_argument       go to state 222


State 114

  181 function_modifiers: "compeval" •

    $default  reduce using rule 181 (function_modifiers)


State 115

  182 function_modifiers: "static" •  [IDENTIFIER]
  183                   | "static" • "compeval"

    "compeval"  shift, and go to state 223

    $default  reduce using rule 182 (function_modifiers)


State 116

  180 function_modifiers: "virtual" •

    $default  reduce using rule 180 (function_modifiers)


State 117

  178 function_header: "func" access_modifier function_modifiers • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 224


State 118

  287 module_name: module_name "-" • IDENTIFIER

    IDENTIFIER  shift, and go to state 225


State 119

  286 module_name: module_name "." • IDENTIFIER

    IDENTIFIER  shift, and go to state 226


State 120

  288 import: "import" module_name ";" •

    $default  reduce using rule 288 (import)


State 121

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  169 variable_declaration_block: "let" • type IDENTIFIER
  170                           | "let" • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 227
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 122

  166 variable_declaration: "let" access_modifier0 variable_declaration_block_list •  ["in", ")", ";"]
  168 variable_declaration_block_list: variable_declaration_block_list • "," variable_declaration_block

    ","  shift, and go to state 228

    $default  reduce using rule 166 (variable_declaration)


State 123

  167 variable_declaration_block_list: variable_declaration_block •

    $default  reduce using rule 167 (variable_declaration_block_list)


State 124

  284 module: "module" module_name ";" •

    $default  reduce using rule 284 (module)


State 125

  230 operator: "[" "]" •

    $default  reduce using rule 230 (operator)


State 126

  231 operator: "(" ")" •

    $default  reduce using rule 231 (operator)


State 127

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  200 operator_overload_header: "operator" operator "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 229
    function_argument       go to state 222


State 128

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  289 type_definition: • "define" type "as" IDENTIFIER
  290 namespace: "namespace" module_name "{" • namespace_units "}"
  291          | "namespace" module_name "{" • "}"
  292 namespace_units: • namespace_unit
  293                | • namespace_units namespace_unit
  294 namespace_unit: • class
  295               | • enum
  296               | • callable
  297               | • type_definition
  298               | • variable_declaration_statement

    "class"     shift, and go to state 1
    "define"    shift, and go to state 2
    "enum"      shift, and go to state 3
    "func"      shift, and go to state 4
    "let"       shift, and go to state 6
    "operator"  shift, and go to state 8
    "}"         shift, and go to state 230

    variable_declaration_statement  go to state 231
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 232
    enum                            go to state 233
    class                           go to state 234
    class_header                    go to state 20
    type_definition                 go to state 235
    namespace_units                 go to state 236
    namespace_unit                  go to state 237


State 129

   73 xvalue_expression: IDENTIFIER •

    $default  reduce using rule 73 (xvalue_expression)


State 130

   86 literal: NPTR •

    $default  reduce using rule 86 (literal)


State 131

   85 literal: BOOL •

    $default  reduce using rule 85 (literal)


State 132

   87 literal: INT •

    $default  reduce using rule 87 (literal)


State 133

   88 literal: FLOAT •

    $default  reduce using rule 88 (literal)


State 134

   90 literal: CHAR •

    $default  reduce using rule 90 (literal)


State 135

   89 literal: STRING •

    $default  reduce using rule 89 (literal)


State 136

  158 jump_statement: "break" • ";"

    ";"  shift, and go to state 238


State 137

   67 prvalue_expression: "castas" • "<" type ">" "(" rvalue_expression ")"

    "<"  shift, and go to state 239


State 138

  152 clean_up_statement: "cleanup" • "(" IDENTIFIER "," clean_up_arg ")" ";"

    "("  shift, and go to state 240


State 139

  159 jump_statement: "continue" • ";"

    ";"  shift, and go to state 241


State 140

  112 block_statement: • "{" statements0 "}"
  121 do_loop_statement: "do" • block_statement "while" "(" expression ")"

    "{"  shift, and go to state 93

    block_statement  go to state 242


State 141

  122 for_loop_statement: "for" • "(" for_loop_condition ")" block_statement

    "("  shift, and go to state 243


State 142

  163 jump_statement: "goto" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 244


State 143

  128 if_statement: "if" • "(" expression ")" block_statement

    "("  shift, and go to state 245


State 144

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   92 new_expression: "new" • type "(" function_call_list ")"
   93               | "new" • "heap" type "(" function_call_list ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "heap"    shift, and go to state 246
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 247
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 145

  160 jump_statement: "rethrow" • ";"

    ";"  shift, and go to state 248


State 146

  157 jump_statement: "return" • ";"

    ";"  shift, and go to state 249


State 147

   32 prvalue_expression: "super" •

    $default  reduce using rule 32 (prvalue_expression)


State 148

  137 switch_statement: "switch" • "(" expression ")" case_blocks0 default_block0

    "("  shift, and go to state 250


State 149

   74 xvalue_expression: "this" •

    $default  reduce using rule 74 (xvalue_expression)


State 150

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  161 jump_statement: "throw" • expression ";"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 251
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 151

  112 block_statement: • "{" statements0 "}"
  147 try_block: "try" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 252


State 152

   66 prvalue_expression: "typeof" • "(" rvalue_expression ")"

    "("  shift, and go to state 253


State 153

  120 while_loop_statement: "while" • "(" expression ")" block_statement

    "("  shift, and go to state 254


State 154

  162 jump_statement: "yield" • ";"

    ";"  shift, and go to state 255


State 155

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [":"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   83                  | "[" • array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   94 array_index_list: • array_index
   95                 | • array_index_list "," array_index
   96 array_index: • expression
   97            | • expression0 ":" expression0
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    $default  reduce using rule 28 (expression0)

    expression                 go to state 256
    expression0                go to state 257
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    array_index_list           go to state 258
    array_index                go to state 259
    function_call              go to state 171


State 156

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   65                   | "-" • rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 261
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 157

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   79                  | "*" • xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    "this"      shift, and go to state 149
    "["         shift, and go to state 155
    "*"         shift, and go to state 157
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 215

    xvalue_expression  go to state 263
    function_call      go to state 171


State 158

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   64                   | "!" • rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 264
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 159

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   75                  | "++" • xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    "this"      shift, and go to state 149
    "["         shift, and go to state 155
    "*"         shift, and go to state 157
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 215

    xvalue_expression  go to state 265
    function_call      go to state 171


State 160

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   76                  | "--" • xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    "this"      shift, and go to state 149
    "["         shift, and go to state 155
    "*"         shift, and go to state 157
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 215

    xvalue_expression  go to state 266
    function_call      go to state 171


State 161

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | "(" • rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   82                  | "(" • rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91                  | "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 129
    TYPENAME    shift, and go to state 28
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "bit"       shift, and go to state 29
    "bool"      shift, and go to state 30
    "castas"    shift, and go to state 137
    "char"      shift, and go to state 31
    "const"     shift, and go to state 32
    "float"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "new"       shift, and go to state 144
    "ref"       shift, and go to state 36
    "rref"      shift, and go to state 37
    "short"     shift, and go to state 38
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    prvalue_expression      go to state 260
    rvalue_expression       go to state 267
    xvalue_expression       go to state 262
    literal                 go to state 168
    lambda_expression       go to state 169
    new_expression          go to state 170
    function_call           go to state 171
    function_argument_list  go to state 268
    function_argument       go to state 222


State 162

  176 no_op_statement: ";" •

    $default  reduce using rule 176 (no_op_statement)


State 163

  164 expression_statement: expression • ";"

    ";"  shift, and go to state 269


State 164

   25 expression: assignment_arg_expression •

    $default  reduce using rule 25 (expression)


State 165

   30 assignment_arg_expression: prvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   71 rvalue_expression: prvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]

    "in"      reduce using rule 30 (assignment_arg_expression)
    "]"       reduce using rule 30 (assignment_arg_expression)
    ","       reduce using rule 30 (assignment_arg_expression)
    ")"       reduce using rule 30 (assignment_arg_expression)
    ":"       reduce using rule 30 (assignment_arg_expression)
    ";"       reduce using rule 30 (assignment_arg_expression)
    $default  reduce using rule 71 (rvalue_expression)


State 166

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288


State 167

   26 expression: xvalue_expression • "=" rvalue_expression
   29 assignment_arg_expression: xvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   39 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   40                   | xvalue_expression • "-=" rvalue_expression
   41                   | xvalue_expression • "*=" rvalue_expression
   42                   | xvalue_expression • "/=" rvalue_expression
   43                   | xvalue_expression • "//=" rvalue_expression
   44                   | xvalue_expression • "^^=" rvalue_expression
   57                   | xvalue_expression • "&=" rvalue_expression
   58                   | xvalue_expression • "^=" rvalue_expression
   59                   | xvalue_expression • "|=" rvalue_expression
   60                   | xvalue_expression • "~=" rvalue_expression
   61                   | xvalue_expression • ">>=" rvalue_expression
   62                   | xvalue_expression • "<<=" rvalue_expression
   72 rvalue_expression: xvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]
   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 289
    "-="   shift, and go to state 290
    "*="   shift, and go to state 291
    "/="   shift, and go to state 292
    "//="  shift, and go to state 293
    "^^="  shift, and go to state 294
    "="    shift, and go to state 295
    "++"   shift, and go to state 296
    "--"   shift, and go to state 297
    "("    shift, and go to state 298
    "."    shift, and go to state 299
    "->"   shift, and go to state 300
    "&="   shift, and go to state 301
    "^="   shift, and go to state 302
    "|="   shift, and go to state 303
    "~="   shift, and go to state 304
    "<<="  shift, and go to state 305
    ">>="  shift, and go to state 306

    "in"      reduce using rule 29 (assignment_arg_expression)
    "]"       reduce using rule 29 (assignment_arg_expression)
    ","       reduce using rule 29 (assignment_arg_expression)
    ")"       reduce using rule 29 (assignment_arg_expression)
    ":"       reduce using rule 29 (assignment_arg_expression)
    ";"       reduce using rule 29 (assignment_arg_expression)
    $default  reduce using rule 72 (rvalue_expression)


State 168

   31 prvalue_expression: literal •

    $default  reduce using rule 31 (prvalue_expression)


State 169

   70 prvalue_expression: lambda_expression •

    $default  reduce using rule 70 (prvalue_expression)


State 170

   69 prvalue_expression: new_expression •

    $default  reduce using rule 69 (prvalue_expression)


State 171

   84 xvalue_expression: function_call •

    $default  reduce using rule 84 (xvalue_expression)


State 172

  115 statements: statement •

    $default  reduce using rule 115 (statements)


State 173

  103 statement: block_statement •

    $default  reduce using rule 103 (statement)


State 174

  112 block_statement: "{" statements0 • "}"

    "}"  shift, and go to state 307


State 175

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  103 statement: • block_statement
  104          | • loop_statement
  105          | • conditional_statement
  106          | • exception_statement
  107          | • clean_up_statement
  108          | • jump_statement
  109          | • expression_statement
  110          | • variable_declaration_statement
  111          | • no_op_statement
  112 block_statement: • "{" statements0 "}"
  113 statements0: statements •  ["}"]
  116 statements: statements • statement
  117 loop_statement: • while_loop_statement
  118               | • do_loop_statement
  119               | • for_loop_statement
  120 while_loop_statement: • "while" "(" expression ")" block_statement
  121 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  122 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  125 conditional_statement: • if_statement_sequence
  126                      | • switch_statement
  127 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  128 if_statement: • "if" "(" expression ")" block_statement
  137 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  146 exception_statement: • try_block catch_blocks
  147 try_block: • "try" block_statement
  152 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"
  164 expression_statement: • expression ";"
  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  176 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "break"     shift, and go to state 136
    "castas"    shift, and go to state 137
    "cleanup"   shift, and go to state 138
    "continue"  shift, and go to state 139
    "do"        shift, and go to state 140
    "for"       shift, and go to state 141
    "goto"      shift, and go to state 142
    "if"        shift, and go to state 143
    "let"       shift, and go to state 6
    "new"       shift, and go to state 144
    "rethrow"   shift, and go to state 145
    "return"    shift, and go to state 146
    "super"     shift, and go to state 147
    "switch"    shift, and go to state 148
    "this"      shift, and go to state 149
    "throw"     shift, and go to state 150
    "try"       shift, and go to state 151
    "typeof"    shift, and go to state 152
    "while"     shift, and go to state 153
    "yield"     shift, and go to state 154
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161
    "{"         shift, and go to state 93
    ";"         shift, and go to state 162

    $default  reduce using rule 113 (statements0)

    expression                      go to state 163
    assignment_arg_expression       go to state 164
    prvalue_expression              go to state 165
    rvalue_expression               go to state 166
    xvalue_expression               go to state 167
    literal                         go to state 168
    lambda_expression               go to state 169
    new_expression                  go to state 170
    function_call                   go to state 171
    statement                       go to state 308
    block_statement                 go to state 173
    loop_statement                  go to state 176
    while_loop_statement            go to state 177
    do_loop_statement               go to state 178
    for_loop_statement              go to state 179
    conditional_statement           go to state 180
    if_statement_sequence           go to state 181
    if_statement                    go to state 182
    switch_statement                go to state 183
    exception_statement             go to state 184
    try_block                       go to state 185
    clean_up_statement              go to state 186
    jump_statement                  go to state 187
    expression_statement            go to state 188
    variable_declaration_statement  go to state 189
    variable_declaration            go to state 12
    no_op_statement                 go to state 190


State 176

  104 statement: loop_statement •

    $default  reduce using rule 104 (statement)


State 177

  117 loop_statement: while_loop_statement •

    $default  reduce using rule 117 (loop_statement)


State 178

  118 loop_statement: do_loop_statement •

    $default  reduce using rule 118 (loop_statement)


State 179

  119 loop_statement: for_loop_statement •

    $default  reduce using rule 119 (loop_statement)


State 180

  105 statement: conditional_statement •

    $default  reduce using rule 105 (statement)


State 181

  125 conditional_statement: if_statement_sequence •

    $default  reduce using rule 125 (conditional_statement)


State 182

  127 if_statement_sequence: if_statement • else_if_statements0 else_statement0
  129 else_if_statements0: • else_if_statements
  130                    | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  131 else_if_statements: • else_if_statement
  132                   | • else_if_statements else_if_statement
  133 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 309

    $default  reduce using rule 130 (else_if_statements0)

    else_if_statements0  go to state 310
    else_if_statements   go to state 311
    else_if_statement    go to state 312


State 183

  126 conditional_statement: switch_statement •

    $default  reduce using rule 126 (conditional_statement)


State 184

  106 statement: exception_statement •

    $default  reduce using rule 106 (statement)


State 185

  146 exception_statement: try_block • catch_blocks
  148 catch_blocks: • catch_block
  149             | • catch_blocks catch_block
  150 catch_block: • "catch" "(" variable_declaration ")" block_statement
  151            | • "catch-all" block_statement

    "catch"      shift, and go to state 313
    "catch-all"  shift, and go to state 314

    catch_blocks  go to state 315
    catch_block   go to state 316


State 186

  107 statement: clean_up_statement •

    $default  reduce using rule 107 (statement)


State 187

  108 statement: jump_statement •

    $default  reduce using rule 108 (statement)


State 188

  109 statement: expression_statement •

    $default  reduce using rule 109 (statement)


State 189

  110 statement: variable_declaration_statement •

    $default  reduce using rule 110 (statement)


State 190

  111 statement: no_op_statement •

    $default  reduce using rule 111 (statement)


State 191

  236 function_options: "default" •

    $default  reduce using rule 236 (function_options)


State 192

  235 function_options: "delete" •

    $default  reduce using rule 235 (function_options)


State 193

  199 operator_overload: operator_overload_header "=" function_options • ";"

    ";"  shift, and go to state 317


State 194

  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  274 constructor_header: "ctor" • access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    access_modifier  go to state 318


State 195

  166 variable_declaration: "let" • access_modifier0 variable_declaration_block_list
  171 access_modifier0: • access_modifier
  172                 | • %empty  ["let"]
  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  261 property: "let" • access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48

    $default  reduce using rule 172 (access_modifier0)

    access_modifier0  go to state 52
    access_modifier   go to state 319


State 196

  283 destructor_header: "~" • IDENTIFIER "(" ")"

    IDENTIFIER  shift, and go to state 320


State 197

  245 class: class_header "{" "}" •

    $default  reduce using rule 245 (class)


State 198

  255 class_statement: variable_declaration_statement •

    $default  reduce using rule 255 (class_statement)


State 199

  256 class_statement: callable •

    $default  reduce using rule 256 (class_statement)


State 200

  260 class_statement: class •

    $default  reduce using rule 260 (class_statement)


State 201

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  244 class: • class_header "{" class_statements "}"
  244      | class_header "{" class_statements • "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  254 class_statements: class_statements • class_statement
  255 class_statement: • variable_declaration_statement
  256                | • callable
  257                | • constructor
  258                | • destructor
  259                | • property
  260                | • class
  261 property: • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270 constructor: • constructor_header initializer_list block_statement
  271            | • constructor_header initializer_list ";"
  272            | • constructor_header block_statement
  273            | • constructor_header "=" function_options ";"
  274 constructor_header: • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  281 destructor: • destructor_header block_statement
  282           | • destructor_header "=" function_options ";"
  283 destructor_header: • "~" IDENTIFIER "(" ")"

    "class"     shift, and go to state 1
    "ctor"      shift, and go to state 194
    "func"      shift, and go to state 4
    "let"       shift, and go to state 195
    "operator"  shift, and go to state 8
    "~"         shift, and go to state 196
    "}"         shift, and go to state 321

    variable_declaration_statement  go to state 198
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 199
    class                           go to state 200
    class_header                    go to state 20
    class_statement                 go to state 322
    property                        go to state 203
    constructor                     go to state 204
    constructor_header              go to state 205
    destructor                      go to state 206
    destructor_header               go to state 207


State 202

  253 class_statements: class_statement •

    $default  reduce using rule 253 (class_statements)


State 203

  259 class_statement: property •

    $default  reduce using rule 259 (class_statement)


State 204

  257 class_statement: constructor •

    $default  reduce using rule 257 (class_statement)


State 205

  112 block_statement: • "{" statements0 "}"
  270 constructor: constructor_header • initializer_list block_statement
  271            | constructor_header • initializer_list ";"
  272            | constructor_header • block_statement
  273            | constructor_header • "=" function_options ";"
  275 initializer_list: • "=>" "initailize" "(" initializer_blocks_list ")"

    "="   shift, and go to state 323
    "{"   shift, and go to state 93
    "=>"  shift, and go to state 324

    block_statement   go to state 325
    initializer_list  go to state 326


State 206

  258 class_statement: destructor •

    $default  reduce using rule 258 (class_statement)


State 207

  112 block_statement: • "{" statements0 "}"
  281 destructor: destructor_header • block_statement
  282           | destructor_header • "=" function_options ";"

    "="  shift, and go to state 327
    "{"  shift, and go to state 93

    block_statement  go to state 328


State 208

   20 type_template_paramaters: • T_BEGIN type_list T_END
  251 class_name: IDENTIFIER •  [",", "{"]
  252           | IDENTIFIER • type_template_paramaters

    T_BEGIN  shift, and go to state 101

    $default  reduce using rule 251 (class_name)

    type_template_paramaters  go to state 329


State 209

  248 inheritance: "inherits" class_names_list •  ["{"]
  250 class_names_list: class_names_list • "," class_name

    ","  shift, and go to state 330

    $default  reduce using rule 248 (inheritance)


State 210

  249 class_names_list: class_name •

    $default  reduce using rule 249 (class_names_list)


State 211

   21 type_list: type •

    $default  reduce using rule 21 (type_list)


State 212

   20 type_template_paramaters: T_BEGIN type_list • T_END
   22 type_list: type_list • "," type

    ","    shift, and go to state 331
    T_END  shift, and go to state 332


State 213

  289 type_definition: "define" type "as" IDENTIFIER •

    $default  reduce using rule 289 (type_definition)


State 214

    9 non_reference_type: type_core "weak" POINTER_TYPE •

    $default  reduce using rule 9 (non_reference_type)


State 215

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   82                  | "(" • rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 333
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 216

   10 non_reference_type: type_core ARRAYL xvalue_expression • ARRAYR
   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"    shift, and go to state 296
    "--"    shift, and go to state 297
    "("     shift, and go to state 298
    "."     shift, and go to state 299
    "->"    shift, and go to state 300
    ARRAYR  shift, and go to state 334


State 217

  243 enum_member: IDENTIFIER "=" • INT

    INT  shift, and go to state 335


State 218

  241 enum_members_list: enum_members_list "," • enum_member
  242 enum_member: • IDENTIFIER
  243            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 110

    enum_member  go to state 336


State 219

  239 enum: "enum" "{" enum_members_list "}" •

    $default  reduce using rule 239 (enum)


State 220

  186 function_argument: type • IDENTIFIER
  187                  | type • "..."
  188                  | type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 337
    "..."       shift, and go to state 338


State 221

  179 function_header: "func" IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 339
    ")"  shift, and go to state 340


State 222

  184 function_argument_list: function_argument •

    $default  reduce using rule 184 (function_argument_list)


State 223

  183 function_modifiers: "static" "compeval" •

    $default  reduce using rule 183 (function_modifiers)


State 224

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 341


State 225

  287 module_name: module_name "-" IDENTIFIER •

    $default  reduce using rule 287 (module_name)


State 226

  286 module_name: module_name "." IDENTIFIER •

    $default  reduce using rule 286 (module_name)


State 227

  169 variable_declaration_block: "let" type • IDENTIFIER
  170                           | "let" type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 342


State 228

  168 variable_declaration_block_list: variable_declaration_block_list "," • variable_declaration_block
  169 variable_declaration_block: • "let" type IDENTIFIER
  170                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 121

    variable_declaration_block  go to state 343


State 229

  185 function_argument_list: function_argument_list • "," function_argument
  200 operator_overload_header: "operator" operator "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 339
    ")"  shift, and go to state 344


State 230

  291 namespace: "namespace" module_name "{" "}" •

    $default  reduce using rule 291 (namespace)


State 231

  298 namespace_unit: variable_declaration_statement •

    $default  reduce using rule 298 (namespace_unit)


State 232

  296 namespace_unit: callable •

    $default  reduce using rule 296 (namespace_unit)


State 233

  295 namespace_unit: enum •

    $default  reduce using rule 295 (namespace_unit)


State 234

  294 namespace_unit: class •

    $default  reduce using rule 294 (namespace_unit)


State 235

  297 namespace_unit: type_definition •

    $default  reduce using rule 297 (namespace_unit)


State 236

  165 variable_declaration_statement: • variable_declaration ";"
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  198 operator_overload: • operator_overload_header block_statement
  199                  | • operator_overload_header "=" function_options ";"
  200 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  237 callable: • function
  238         | • operator_overload
  239 enum: • "enum" "{" enum_members_list "}"
  244 class: • class_header "{" class_statements "}"
  245      | • class_header "{" "}"
  246 class_header: • "class" IDENTIFIER
  247             | • "class" IDENTIFIER inheritance
  289 type_definition: • "define" type "as" IDENTIFIER
  290 namespace: "namespace" module_name "{" namespace_units • "}"
  293 namespace_units: namespace_units • namespace_unit
  294 namespace_unit: • class
  295               | • enum
  296               | • callable
  297               | • type_definition
  298               | • variable_declaration_statement

    "class"     shift, and go to state 1
    "define"    shift, and go to state 2
    "enum"      shift, and go to state 3
    "func"      shift, and go to state 4
    "let"       shift, and go to state 6
    "operator"  shift, and go to state 8
    "}"         shift, and go to state 345

    variable_declaration_statement  go to state 231
    variable_declaration            go to state 12
    function                        go to state 13
    function_header                 go to state 14
    operator_overload               go to state 15
    operator_overload_header        go to state 16
    callable                        go to state 232
    enum                            go to state 233
    class                           go to state 234
    class_header                    go to state 20
    type_definition                 go to state 235
    namespace_unit                  go to state 346


State 237

  292 namespace_units: namespace_unit •

    $default  reduce using rule 292 (namespace_units)


State 238

  158 jump_statement: "break" ";" •

    $default  reduce using rule 158 (jump_statement)


State 239

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   67 prvalue_expression: "castas" "<" • type ">" "(" rvalue_expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 347
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 240

  152 clean_up_statement: "cleanup" "(" • IDENTIFIER "," clean_up_arg ")" ";"

    IDENTIFIER  shift, and go to state 348


State 241

  159 jump_statement: "continue" ";" •

    $default  reduce using rule 159 (jump_statement)


State 242

  121 do_loop_statement: "do" block_statement • "while" "(" expression ")"

    "while"  shift, and go to state 349


State 243

  122 for_loop_statement: "for" "(" • for_loop_condition ")" block_statement
  123 for_loop_condition: • variable_declaration ";" expression0 ";" expression0
  124                   | • variable_declaration "in" expression
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list

    "let"  shift, and go to state 6

    for_loop_condition    go to state 350
    variable_declaration  go to state 351


State 244

  163 jump_statement: "goto" IDENTIFIER • ";"

    ";"  shift, and go to state 352


State 245

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  128 if_statement: "if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 353
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 246

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   93 new_expression: "new" "heap" • type "(" function_call_list ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 354
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 247

   92 new_expression: "new" type • "(" function_call_list ")"

    "("  shift, and go to state 355


State 248

  160 jump_statement: "rethrow" ";" •

    $default  reduce using rule 160 (jump_statement)


State 249

  157 jump_statement: "return" ";" •

    $default  reduce using rule 157 (jump_statement)


State 250

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  137 switch_statement: "switch" "(" • expression ")" case_blocks0 default_block0

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 356
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 251

  161 jump_statement: "throw" expression • ";"

    ";"  shift, and go to state 357


State 252

  147 try_block: "try" block_statement •

    $default  reduce using rule 147 (try_block)


State 253

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   66                   | "typeof" "(" • rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 358
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 254

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  120 while_loop_statement: "while" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 359
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 255

  162 jump_statement: "yield" ";" •

    $default  reduce using rule 162 (jump_statement)


State 256

   27 expression0: expression •  [":"]
   96 array_index: expression •  ["]", ","]

    ":"       reduce using rule 27 (expression0)
    $default  reduce using rule 96 (array_index)


State 257

   97 array_index: expression0 • ":" expression0

    ":"  shift, and go to state 360


State 258

   83 xvalue_expression: "[" array_index_list • "]"
   95 array_index_list: array_index_list • "," array_index

    "]"  shift, and go to state 361
    ","  shift, and go to state 362


State 259

   94 array_index_list: array_index •

    $default  reduce using rule 94 (array_index_list)


State 260

   71 rvalue_expression: prvalue_expression •

    $default  reduce using rule 71 (rvalue_expression)


State 261

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   65                   | "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 286

    $default  reduce using rule 65 (prvalue_expression)

    Conflict between rule 65 and token "is" resolved as reduce ("is" < UMINUS).
    Conflict between rule 65 and token ">" resolved as reduce (">" < UMINUS).
    Conflict between rule 65 and token "+" resolved as reduce ("+" < UMINUS).
    Conflict between rule 65 and token "-" resolved as reduce ("-" < UMINUS).
    Conflict between rule 65 and token "/" resolved as reduce ("/" < UMINUS).
    Conflict between rule 65 and token "//" resolved as reduce ("//" < UMINUS).
    Conflict between rule 65 and token "*" resolved as reduce ("*" < UMINUS).
    Conflict between rule 65 and token "^^" resolved as reduce ("^^" < UMINUS).
    Conflict between rule 65 and token "<=" resolved as reduce ("<=" < UMINUS).
    Conflict between rule 65 and token ">=" resolved as reduce (">=" < UMINUS).
    Conflict between rule 65 and token "<=>" resolved as reduce ("<=>" < UMINUS).
    Conflict between rule 65 and token "&&" resolved as reduce ("&&" < UMINUS).
    Conflict between rule 65 and token "||" resolved as reduce ("||" < UMINUS).
    Conflict between rule 65 and token "&" resolved as reduce ("&" < UMINUS).
    Conflict between rule 65 and token "|" resolved as reduce ("|" < UMINUS).
    Conflict between rule 65 and token "^" resolved as reduce ("^" < UMINUS).
    Conflict between rule 65 and token "~" resolved as shift (%right "~").
    Conflict between rule 65 and token ">>" resolved as reduce (">>" < UMINUS).
    Conflict between rule 65 and token "<<" resolved as reduce ("<<" < UMINUS).


State 262

   39 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   40                   | xvalue_expression • "-=" rvalue_expression
   41                   | xvalue_expression • "*=" rvalue_expression
   42                   | xvalue_expression • "/=" rvalue_expression
   43                   | xvalue_expression • "//=" rvalue_expression
   44                   | xvalue_expression • "^^=" rvalue_expression
   57                   | xvalue_expression • "&=" rvalue_expression
   58                   | xvalue_expression • "^=" rvalue_expression
   59                   | xvalue_expression • "|=" rvalue_expression
   60                   | xvalue_expression • "~=" rvalue_expression
   61                   | xvalue_expression • ">>=" rvalue_expression
   62                   | xvalue_expression • "<<=" rvalue_expression
   72 rvalue_expression: xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", ")", ":", ";"]
   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 289
    "-="   shift, and go to state 290
    "*="   shift, and go to state 291
    "/="   shift, and go to state 292
    "//="  shift, and go to state 293
    "^^="  shift, and go to state 294
    "++"   shift, and go to state 296
    "--"   shift, and go to state 297
    "("    shift, and go to state 298
    "."    shift, and go to state 299
    "->"   shift, and go to state 300
    "&="   shift, and go to state 301
    "^="   shift, and go to state 302
    "|="   shift, and go to state 303
    "~="   shift, and go to state 304
    "<<="  shift, and go to state 305
    ">>="  shift, and go to state 306

    $default  reduce using rule 72 (rvalue_expression)


State 263

   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   79                  | "*" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 296
    "--"  shift, and go to state 297
    "("   shift, and go to state 298
    "."   shift, and go to state 299
    "->"  shift, and go to state 300

    $default  reduce using rule 79 (xvalue_expression)

    Conflict between rule 79 and token "++" resolved as shift (%right "++").
    Conflict between rule 79 and token "--" resolved as shift (%right "--").
    Conflict between rule 79 and token "(" resolved as shift (DEREF < "(").
    Conflict between rule 79 and token "." resolved as shift (DEREF < ".").
    Conflict between rule 79 and token "->" resolved as shift (DEREF < "->").


State 264

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   64                   | "!" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 286

    $default  reduce using rule 64 (prvalue_expression)

    Conflict between rule 64 and token "is" resolved as reduce ("is" < "!").
    Conflict between rule 64 and token ">" resolved as reduce (">" < "!").
    Conflict between rule 64 and token "+" resolved as reduce ("+" < "!").
    Conflict between rule 64 and token "-" resolved as reduce ("-" < "!").
    Conflict between rule 64 and token "/" resolved as reduce ("/" < "!").
    Conflict between rule 64 and token "//" resolved as reduce ("//" < "!").
    Conflict between rule 64 and token "*" resolved as reduce ("*" < "!").
    Conflict between rule 64 and token "^^" resolved as reduce ("^^" < "!").
    Conflict between rule 64 and token "<=" resolved as reduce ("<=" < "!").
    Conflict between rule 64 and token ">=" resolved as reduce (">=" < "!").
    Conflict between rule 64 and token "<=>" resolved as reduce ("<=>" < "!").
    Conflict between rule 64 and token "&&" resolved as reduce ("&&" < "!").
    Conflict between rule 64 and token "||" resolved as reduce ("||" < "!").
    Conflict between rule 64 and token "&" resolved as reduce ("&" < "!").
    Conflict between rule 64 and token "|" resolved as reduce ("|" < "!").
    Conflict between rule 64 and token "^" resolved as reduce ("^" < "!").
    Conflict between rule 64 and token "~" resolved as shift (%right "~").
    Conflict between rule 64 and token ">>" resolved as reduce (">>" < "!").
    Conflict between rule 64 and token "<<" resolved as reduce ("<<" < "!").


State 265

   75 xvalue_expression: "++" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   77                  | xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 296
    "--"  shift, and go to state 297
    "("   shift, and go to state 298
    "."   shift, and go to state 299
    "->"  shift, and go to state 300

    $default  reduce using rule 75 (xvalue_expression)

    Conflict between rule 75 and token "++" resolved as shift (%right "++").
    Conflict between rule 75 and token "--" resolved as shift (%right "--").
    Conflict between rule 75 and token "(" resolved as shift ("++" < "(").
    Conflict between rule 75 and token "." resolved as shift ("++" < ".").
    Conflict between rule 75 and token "->" resolved as shift ("++" < "->").


State 266

   76 xvalue_expression: "--" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   77                  | xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 296
    "--"  shift, and go to state 297
    "("   shift, and go to state 298
    "."   shift, and go to state 299
    "->"  shift, and go to state 300

    $default  reduce using rule 76 (xvalue_expression)

    Conflict between rule 76 and token "++" resolved as shift (%right "++").
    Conflict between rule 76 and token "--" resolved as shift (%right "--").
    Conflict between rule 76 and token "(" resolved as shift ("--" < "(").
    Conflict between rule 76 and token "." resolved as shift ("--" < ".").
    Conflict between rule 76 and token "->" resolved as shift ("--" < "->").


State 267

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   68                   | "(" rvalue_expression • ")" "?" rvalue_expression ":" rvalue_expression
   82 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288
    ")"    shift, and go to state 363


State 268

   91 lambda_expression: "(" function_argument_list • ")" "->" return_types_list "=>" block_statement
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 339
    ")"  shift, and go to state 364


State 269

  164 expression_statement: expression ";" •

    $default  reduce using rule 164 (expression_statement)


State 270

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   63 prvalue_expression: rvalue_expression "is" • type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 365
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 271

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   45                   | rvalue_expression ">" • rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 366
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 272

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   33                   | rvalue_expression "+" • rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 367
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 273

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   34                   | rvalue_expression "-" • rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 368
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 274

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   36                   | rvalue_expression "/" • rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 369
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 275

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   37                   | rvalue_expression "//" • rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 370
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 276

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   35                   | rvalue_expression "*" • rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 371
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 277

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   38                   | rvalue_expression "^^" • rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 372
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 278

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   47                   | rvalue_expression "<=" • rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 373
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 279

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   46                   | rvalue_expression ">=" • rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 374
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 280

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   48                   | rvalue_expression "<=>" • rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 375
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 281

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   49                   | rvalue_expression "&&" • rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 376
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 282

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   50                   | rvalue_expression "||" • rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 377
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 283

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   51                   | rvalue_expression "&" • rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 378
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 284

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   53                   | rvalue_expression "|" • rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 379
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 285

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   52                   | rvalue_expression "^" • rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 380
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 286

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   54                   | rvalue_expression "~" • rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 381
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 287

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   55                   | rvalue_expression ">>" • rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 382
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 288

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   56                   | rvalue_expression "<<" • rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 383
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 289

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   39                   | xvalue_expression "+=" • rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 384
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 290

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   40                   | xvalue_expression "-=" • rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 385
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 291

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   41                   | xvalue_expression "*=" • rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 386
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 292

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   42                   | xvalue_expression "/=" • rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 387
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 293

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   43                   | xvalue_expression "//=" • rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 388
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 294

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   44                   | xvalue_expression "^^=" • rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 389
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 295

   26 expression: xvalue_expression "=" • rvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 390
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 296

   77 xvalue_expression: xvalue_expression "++" •

    $default  reduce using rule 77 (xvalue_expression)


State 297

   78 xvalue_expression: xvalue_expression "--" •

    $default  reduce using rule 78 (xvalue_expression)


State 298

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   98 function_call: xvalue_expression "(" • function_argument_list ")"
   99              | xvalue_expression "(" • ")"
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    ")"       shift, and go to state 391

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 392
    function_argument       go to state 222


State 299

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   80                  | xvalue_expression "." • xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    "this"      shift, and go to state 149
    "["         shift, and go to state 155
    "*"         shift, and go to state 157
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 215

    xvalue_expression  go to state 393
    function_call      go to state 171


State 300

   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   81                  | xvalue_expression "->" • xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    "this"      shift, and go to state 149
    "["         shift, and go to state 155
    "*"         shift, and go to state 157
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 215

    xvalue_expression  go to state 394
    function_call      go to state 171


State 301

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   57                   | xvalue_expression "&=" • rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 395
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 302

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   58                   | xvalue_expression "^=" • rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 396
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 303

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   59                   | xvalue_expression "|=" • rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 397
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 304

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   60                   | xvalue_expression "~=" • rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 398
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 305

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   62                   | xvalue_expression "<<=" • rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 399
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 306

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   61                   | xvalue_expression ">>=" • rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 400
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 307

  112 block_statement: "{" statements0 "}" •

    $default  reduce using rule 112 (block_statement)


State 308

  116 statements: statements statement •

    $default  reduce using rule 116 (statements)


State 309

  133 else_if_statement: "else-if" • "(" expression ")" block_statement

    "("  shift, and go to state 401


State 310

  127 if_statement_sequence: if_statement else_if_statements0 • else_statement0
  134 else_statement0: • else_statement
  135                | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  136 else_statement: • "else" block_statement

    "else"  shift, and go to state 402

    $default  reduce using rule 135 (else_statement0)

    else_statement0  go to state 403
    else_statement   go to state 404


State 311

  129 else_if_statements0: else_if_statements •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  132 else_if_statements: else_if_statements • else_if_statement
  133 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 309

    $default  reduce using rule 129 (else_if_statements0)

    else_if_statement  go to state 405


State 312

  131 else_if_statements: else_if_statement •

    $default  reduce using rule 131 (else_if_statements)


State 313

  150 catch_block: "catch" • "(" variable_declaration ")" block_statement

    "("  shift, and go to state 406


State 314

  112 block_statement: • "{" statements0 "}"
  151 catch_block: "catch-all" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 407


State 315

  146 exception_statement: try_block catch_blocks •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  149 catch_blocks: catch_blocks • catch_block
  150 catch_block: • "catch" "(" variable_declaration ")" block_statement
  151            | • "catch-all" block_statement

    "catch"      shift, and go to state 313
    "catch-all"  shift, and go to state 314

    $default  reduce using rule 146 (exception_statement)

    catch_block  go to state 408


State 316

  148 catch_blocks: catch_block •

    $default  reduce using rule 148 (catch_blocks)


State 317

  199 operator_overload: operator_overload_header "=" function_options ";" •

    $default  reduce using rule 199 (operator_overload)


State 318

  274 constructor_header: "ctor" access_modifier • compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  279 compeval0: • "compeval"
  280          | • %empty  [IDENTIFIER]

    "compeval"  shift, and go to state 409

    $default  reduce using rule 280 (compeval0)

    compeval0  go to state 410


State 319

  171 access_modifier0: access_modifier •  ["let"]
  261 property: "let" access_modifier • "property" type IDENTIFIER "{" property_blocks "}" ";"

    "property"  shift, and go to state 411

    $default  reduce using rule 171 (access_modifier0)


State 320

  283 destructor_header: "~" IDENTIFIER • "(" ")"

    "("  shift, and go to state 412


State 321

  244 class: class_header "{" class_statements "}" •

    $default  reduce using rule 244 (class)


State 322

  254 class_statements: class_statements class_statement •

    $default  reduce using rule 254 (class_statements)


State 323

  235 function_options: • "delete"
  236                 | • "default"
  273 constructor: constructor_header "=" • function_options ";"

    "default"  shift, and go to state 191
    "delete"   shift, and go to state 192

    function_options  go to state 413


State 324

  275 initializer_list: "=>" • "initailize" "(" initializer_blocks_list ")"

    "initailize"  shift, and go to state 414


State 325

  272 constructor: constructor_header block_statement •

    $default  reduce using rule 272 (constructor)


State 326

  112 block_statement: • "{" statements0 "}"
  270 constructor: constructor_header initializer_list • block_statement
  271            | constructor_header initializer_list • ";"

    "{"  shift, and go to state 93
    ";"  shift, and go to state 415

    block_statement  go to state 416


State 327

  235 function_options: • "delete"
  236                 | • "default"
  282 destructor: destructor_header "=" • function_options ";"

    "default"  shift, and go to state 191
    "delete"   shift, and go to state 192

    function_options  go to state 417


State 328

  281 destructor: destructor_header block_statement •

    $default  reduce using rule 281 (destructor)


State 329

  252 class_name: IDENTIFIER type_template_paramaters •

    $default  reduce using rule 252 (class_name)


State 330

  250 class_names_list: class_names_list "," • class_name
  251 class_name: • IDENTIFIER
  252           | • IDENTIFIER type_template_paramaters

    IDENTIFIER  shift, and go to state 208

    class_name  go to state 418


State 331

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   22 type_list: type_list "," • type
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 419
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 332

   20 type_template_paramaters: T_BEGIN type_list T_END •

    $default  reduce using rule 20 (type_template_paramaters)


State 333

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   82 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288
    ")"    shift, and go to state 420


State 334

   10 non_reference_type: type_core ARRAYL xvalue_expression ARRAYR •

    $default  reduce using rule 10 (non_reference_type)


State 335

  243 enum_member: IDENTIFIER "=" INT •

    $default  reduce using rule 243 (enum_member)


State 336

  241 enum_members_list: enum_members_list "," enum_member •

    $default  reduce using rule 241 (enum_members_list)


State 337

  186 function_argument: type IDENTIFIER •  [",", ")"]
  188                  | type IDENTIFIER • "=" expression

    "="  shift, and go to state 421

    $default  reduce using rule 186 (function_argument)


State 338

  187 function_argument: type "..." •

    $default  reduce using rule 187 (function_argument)


State 339

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  185 function_argument_list: function_argument_list "," • function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 220
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    function_argument   go to state 422


State 340

  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 423

    throwable_expression  go to state 424


State 341

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 425
    function_argument       go to state 222


State 342

  169 variable_declaration_block: "let" type IDENTIFIER •  ["in", ",", ")", ";"]
  170                           | "let" type IDENTIFIER • "=" expression

    "="  shift, and go to state 426

    $default  reduce using rule 169 (variable_declaration_block)


State 343

  168 variable_declaration_block_list: variable_declaration_block_list "," variable_declaration_block •

    $default  reduce using rule 168 (variable_declaration_block_list)


State 344

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  200 operator_overload_header: "operator" operator "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 423

    throwable_expression  go to state 427


State 345

  290 namespace: "namespace" module_name "{" namespace_units "}" •

    $default  reduce using rule 290 (namespace)


State 346

  293 namespace_units: namespace_units namespace_unit •

    $default  reduce using rule 293 (namespace_units)


State 347

   67 prvalue_expression: "castas" "<" type • ">" "(" rvalue_expression ")"

    ">"  shift, and go to state 428


State 348

  152 clean_up_statement: "cleanup" "(" IDENTIFIER • "," clean_up_arg ")" ";"

    ","  shift, and go to state 429


State 349

  121 do_loop_statement: "do" block_statement "while" • "(" expression ")"

    "("  shift, and go to state 430


State 350

  122 for_loop_statement: "for" "(" for_loop_condition • ")" block_statement

    ")"  shift, and go to state 431


State 351

  123 for_loop_condition: variable_declaration • ";" expression0 ";" expression0
  124                   | variable_declaration • "in" expression

    "in"  shift, and go to state 432
    ";"   shift, and go to state 433


State 352

  163 jump_statement: "goto" IDENTIFIER ";" •

    $default  reduce using rule 163 (jump_statement)


State 353

  128 if_statement: "if" "(" expression • ")" block_statement

    ")"  shift, and go to state 434


State 354

   93 new_expression: "new" "heap" type • "(" function_call_list ")"

    "("  shift, and go to state 435


State 355

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   92               | "new" type "(" • function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  100 function_call_list: • function_call_arg
  101                   | • function_call_list "," function_call_arg ";"
  102 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 436
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171
    function_call_list         go to state 437
    function_call_arg          go to state 438


State 356

  137 switch_statement: "switch" "(" expression • ")" case_blocks0 default_block0

    ")"  shift, and go to state 439


State 357

  161 jump_statement: "throw" expression ";" •

    $default  reduce using rule 161 (jump_statement)


State 358

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   66                   | "typeof" "(" rvalue_expression • ")"

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288
    ")"    shift, and go to state 440


State 359

  120 while_loop_statement: "while" "(" expression • ")" block_statement

    ")"  shift, and go to state 441


State 360

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  ["]", ","]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   97 array_index: expression0 ":" • expression0
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    $default  reduce using rule 28 (expression0)

    expression                 go to state 442
    expression0                go to state 443
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 361

   83 xvalue_expression: "[" array_index_list "]" •

    $default  reduce using rule 83 (xvalue_expression)


State 362

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [":"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   95 array_index_list: array_index_list "," • array_index
   96 array_index: • expression
   97            | • expression0 ":" expression0
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    $default  reduce using rule 28 (expression0)

    expression                 go to state 256
    expression0                go to state 257
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    array_index                go to state 444
    function_call              go to state 171


State 363

   68 prvalue_expression: "(" rvalue_expression ")" • "?" rvalue_expression ":" rvalue_expression
   82 xvalue_expression: "(" rvalue_expression ")" •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]

    "?"  shift, and go to state 445

    $default  reduce using rule 82 (xvalue_expression)


State 364

   91 lambda_expression: "(" function_argument_list ")" • "->" return_types_list "=>" block_statement

    "->"  shift, and go to state 446


State 365

   63 prvalue_expression: rvalue_expression "is" type •

    $default  reduce using rule 63 (prvalue_expression)


State 366

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression ">" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<=>"  shift, and go to state 280
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 45 (prvalue_expression)

    Conflict between rule 45 and token "is" resolved as reduce ("is" < ">").
    Conflict between rule 45 and token ">" resolved as reduce (%left ">").
    Conflict between rule 45 and token "+" resolved as shift (">" < "+").
    Conflict between rule 45 and token "-" resolved as shift (">" < "-").
    Conflict between rule 45 and token "/" resolved as shift (">" < "/").
    Conflict between rule 45 and token "//" resolved as shift (">" < "//").
    Conflict between rule 45 and token "*" resolved as shift (">" < "*").
    Conflict between rule 45 and token "^^" resolved as shift (">" < "^^").
    Conflict between rule 45 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 45 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 45 and token "<=>" resolved as shift (">" < "<=>").
    Conflict between rule 45 and token "&&" resolved as reduce ("&&" < ">").
    Conflict between rule 45 and token "||" resolved as reduce ("||" < ">").
    Conflict between rule 45 and token "&" resolved as reduce ("&" < ">").
    Conflict between rule 45 and token "|" resolved as reduce ("|" < ">").
    Conflict between rule 45 and token "^" resolved as reduce ("^" < ">").
    Conflict between rule 45 and token "~" resolved as shift (">" < "~").
    Conflict between rule 45 and token ">>" resolved as shift (">" < ">>").
    Conflict between rule 45 and token "<<" resolved as shift (">" < "<<").


State 367

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression "+" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "/"   shift, and go to state 274
    "//"  shift, and go to state 275
    "*"   shift, and go to state 276
    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 33 (prvalue_expression)

    Conflict between rule 33 and token "is" resolved as reduce ("is" < "+").
    Conflict between rule 33 and token ">" resolved as reduce (">" < "+").
    Conflict between rule 33 and token "+" resolved as reduce (%left "+").
    Conflict between rule 33 and token "-" resolved as reduce (%left "-").
    Conflict between rule 33 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 33 and token "//" resolved as shift ("+" < "//").
    Conflict between rule 33 and token "*" resolved as shift ("+" < "*").
    Conflict between rule 33 and token "^^" resolved as shift ("+" < "^^").
    Conflict between rule 33 and token "<=" resolved as reduce ("<=" < "+").
    Conflict between rule 33 and token ">=" resolved as reduce (">=" < "+").
    Conflict between rule 33 and token "<=>" resolved as reduce ("<=>" < "+").
    Conflict between rule 33 and token "&&" resolved as reduce ("&&" < "+").
    Conflict between rule 33 and token "||" resolved as reduce ("||" < "+").
    Conflict between rule 33 and token "&" resolved as reduce ("&" < "+").
    Conflict between rule 33 and token "|" resolved as reduce ("|" < "+").
    Conflict between rule 33 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 33 and token "~" resolved as shift ("+" < "~").
    Conflict between rule 33 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 33 and token "<<" resolved as reduce ("<<" < "+").


State 368

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "/"   shift, and go to state 274
    "//"  shift, and go to state 275
    "*"   shift, and go to state 276
    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 34 (prvalue_expression)

    Conflict between rule 34 and token "is" resolved as reduce ("is" < "-").
    Conflict between rule 34 and token ">" resolved as reduce (">" < "-").
    Conflict between rule 34 and token "+" resolved as reduce (%left "+").
    Conflict between rule 34 and token "-" resolved as reduce (%left "-").
    Conflict between rule 34 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 34 and token "//" resolved as shift ("-" < "//").
    Conflict between rule 34 and token "*" resolved as shift ("-" < "*").
    Conflict between rule 34 and token "^^" resolved as shift ("-" < "^^").
    Conflict between rule 34 and token "<=" resolved as reduce ("<=" < "-").
    Conflict between rule 34 and token ">=" resolved as reduce (">=" < "-").
    Conflict between rule 34 and token "<=>" resolved as reduce ("<=>" < "-").
    Conflict between rule 34 and token "&&" resolved as reduce ("&&" < "-").
    Conflict between rule 34 and token "||" resolved as reduce ("||" < "-").
    Conflict between rule 34 and token "&" resolved as reduce ("&" < "-").
    Conflict between rule 34 and token "|" resolved as reduce ("|" < "-").
    Conflict between rule 34 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 34 and token "~" resolved as shift ("-" < "~").
    Conflict between rule 34 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 34 and token "<<" resolved as reduce ("<<" < "-").


State 369

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression "/" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 36 (prvalue_expression)

    Conflict between rule 36 and token "is" resolved as reduce ("is" < "/").
    Conflict between rule 36 and token ">" resolved as reduce (">" < "/").
    Conflict between rule 36 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 36 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 36 and token "/" resolved as reduce (%left "/").
    Conflict between rule 36 and token "//" resolved as reduce (%left "//").
    Conflict between rule 36 and token "*" resolved as reduce (%left "*").
    Conflict between rule 36 and token "^^" resolved as shift ("/" < "^^").
    Conflict between rule 36 and token "<=" resolved as reduce ("<=" < "/").
    Conflict between rule 36 and token ">=" resolved as reduce (">=" < "/").
    Conflict between rule 36 and token "<=>" resolved as reduce ("<=>" < "/").
    Conflict between rule 36 and token "&&" resolved as reduce ("&&" < "/").
    Conflict between rule 36 and token "||" resolved as reduce ("||" < "/").
    Conflict between rule 36 and token "&" resolved as reduce ("&" < "/").
    Conflict between rule 36 and token "|" resolved as reduce ("|" < "/").
    Conflict between rule 36 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 36 and token "~" resolved as shift ("/" < "~").
    Conflict between rule 36 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 36 and token "<<" resolved as reduce ("<<" < "/").


State 370

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression "//" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 37 (prvalue_expression)

    Conflict between rule 37 and token "is" resolved as reduce ("is" < "//").
    Conflict between rule 37 and token ">" resolved as reduce (">" < "//").
    Conflict between rule 37 and token "+" resolved as reduce ("+" < "//").
    Conflict between rule 37 and token "-" resolved as reduce ("-" < "//").
    Conflict between rule 37 and token "/" resolved as reduce (%left "/").
    Conflict between rule 37 and token "//" resolved as reduce (%left "//").
    Conflict between rule 37 and token "*" resolved as reduce (%left "*").
    Conflict between rule 37 and token "^^" resolved as shift ("//" < "^^").
    Conflict between rule 37 and token "<=" resolved as reduce ("<=" < "//").
    Conflict between rule 37 and token ">=" resolved as reduce (">=" < "//").
    Conflict between rule 37 and token "<=>" resolved as reduce ("<=>" < "//").
    Conflict between rule 37 and token "&&" resolved as reduce ("&&" < "//").
    Conflict between rule 37 and token "||" resolved as reduce ("||" < "//").
    Conflict between rule 37 and token "&" resolved as reduce ("&" < "//").
    Conflict between rule 37 and token "|" resolved as reduce ("|" < "//").
    Conflict between rule 37 and token "^" resolved as reduce ("^" < "//").
    Conflict between rule 37 and token "~" resolved as shift ("//" < "~").
    Conflict between rule 37 and token ">>" resolved as reduce (">>" < "//").
    Conflict between rule 37 and token "<<" resolved as reduce ("<<" < "//").


State 371

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression "*" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 35 (prvalue_expression)

    Conflict between rule 35 and token "is" resolved as reduce ("is" < "*").
    Conflict between rule 35 and token ">" resolved as reduce (">" < "*").
    Conflict between rule 35 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 35 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 35 and token "/" resolved as reduce (%left "/").
    Conflict between rule 35 and token "//" resolved as reduce (%left "//").
    Conflict between rule 35 and token "*" resolved as reduce (%left "*").
    Conflict between rule 35 and token "^^" resolved as shift ("*" < "^^").
    Conflict between rule 35 and token "<=" resolved as reduce ("<=" < "*").
    Conflict between rule 35 and token ">=" resolved as reduce (">=" < "*").
    Conflict between rule 35 and token "<=>" resolved as reduce ("<=>" < "*").
    Conflict between rule 35 and token "&&" resolved as reduce ("&&" < "*").
    Conflict between rule 35 and token "||" resolved as reduce ("||" < "*").
    Conflict between rule 35 and token "&" resolved as reduce ("&" < "*").
    Conflict between rule 35 and token "|" resolved as reduce ("|" < "*").
    Conflict between rule 35 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 35 and token "~" resolved as shift ("*" < "~").
    Conflict between rule 35 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 35 and token "<<" resolved as reduce ("<<" < "*").


State 372

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   38                   | rvalue_expression "^^" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 38 (prvalue_expression)

    Conflict between rule 38 and token "is" resolved as reduce ("is" < "^^").
    Conflict between rule 38 and token ">" resolved as reduce (">" < "^^").
    Conflict between rule 38 and token "+" resolved as reduce ("+" < "^^").
    Conflict between rule 38 and token "-" resolved as reduce ("-" < "^^").
    Conflict between rule 38 and token "/" resolved as reduce ("/" < "^^").
    Conflict between rule 38 and token "//" resolved as reduce ("//" < "^^").
    Conflict between rule 38 and token "*" resolved as reduce ("*" < "^^").
    Conflict between rule 38 and token "^^" resolved as shift (%right "^^").
    Conflict between rule 38 and token "<=" resolved as reduce ("<=" < "^^").
    Conflict between rule 38 and token ">=" resolved as reduce (">=" < "^^").
    Conflict between rule 38 and token "<=>" resolved as reduce ("<=>" < "^^").
    Conflict between rule 38 and token "&&" resolved as reduce ("&&" < "^^").
    Conflict between rule 38 and token "||" resolved as reduce ("||" < "^^").
    Conflict between rule 38 and token "&" resolved as reduce ("&" < "^^").
    Conflict between rule 38 and token "|" resolved as reduce ("|" < "^^").
    Conflict between rule 38 and token "^" resolved as reduce ("^" < "^^").
    Conflict between rule 38 and token "~" resolved as shift ("^^" < "~").
    Conflict between rule 38 and token ">>" resolved as reduce (">>" < "^^").
    Conflict between rule 38 and token "<<" resolved as reduce ("<<" < "^^").


State 373

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression "<=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<=>"  shift, and go to state 280
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 47 (prvalue_expression)

    Conflict between rule 47 and token "is" resolved as reduce ("is" < "<=").
    Conflict between rule 47 and token ">" resolved as reduce (%left ">").
    Conflict between rule 47 and token "+" resolved as shift ("<=" < "+").
    Conflict between rule 47 and token "-" resolved as shift ("<=" < "-").
    Conflict between rule 47 and token "/" resolved as shift ("<=" < "/").
    Conflict between rule 47 and token "//" resolved as shift ("<=" < "//").
    Conflict between rule 47 and token "*" resolved as shift ("<=" < "*").
    Conflict between rule 47 and token "^^" resolved as shift ("<=" < "^^").
    Conflict between rule 47 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 47 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 47 and token "<=>" resolved as shift ("<=" < "<=>").
    Conflict between rule 47 and token "&&" resolved as reduce ("&&" < "<=").
    Conflict between rule 47 and token "||" resolved as reduce ("||" < "<=").
    Conflict between rule 47 and token "&" resolved as reduce ("&" < "<=").
    Conflict between rule 47 and token "|" resolved as reduce ("|" < "<=").
    Conflict between rule 47 and token "^" resolved as reduce ("^" < "<=").
    Conflict between rule 47 and token "~" resolved as shift ("<=" < "~").
    Conflict between rule 47 and token ">>" resolved as shift ("<=" < ">>").
    Conflict between rule 47 and token "<<" resolved as shift ("<=" < "<<").


State 374

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression ">=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<=>"  shift, and go to state 280
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 46 (prvalue_expression)

    Conflict between rule 46 and token "is" resolved as reduce ("is" < ">=").
    Conflict between rule 46 and token ">" resolved as reduce (%left ">").
    Conflict between rule 46 and token "+" resolved as shift (">=" < "+").
    Conflict between rule 46 and token "-" resolved as shift (">=" < "-").
    Conflict between rule 46 and token "/" resolved as shift (">=" < "/").
    Conflict between rule 46 and token "//" resolved as shift (">=" < "//").
    Conflict between rule 46 and token "*" resolved as shift (">=" < "*").
    Conflict between rule 46 and token "^^" resolved as shift (">=" < "^^").
    Conflict between rule 46 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 46 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 46 and token "<=>" resolved as shift (">=" < "<=>").
    Conflict between rule 46 and token "&&" resolved as reduce ("&&" < ">=").
    Conflict between rule 46 and token "||" resolved as reduce ("||" < ">=").
    Conflict between rule 46 and token "&" resolved as reduce ("&" < ">=").
    Conflict between rule 46 and token "|" resolved as reduce ("|" < ">=").
    Conflict between rule 46 and token "^" resolved as reduce ("^" < ">=").
    Conflict between rule 46 and token "~" resolved as shift (">=" < "~").
    Conflict between rule 46 and token ">>" resolved as shift (">=" < ">>").
    Conflict between rule 46 and token "<<" resolved as shift (">=" < "<<").


State 375

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression "<=>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ")", ":", ";"]
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"   shift, and go to state 272
    "-"   shift, and go to state 273
    "/"   shift, and go to state 274
    "//"  shift, and go to state 275
    "*"   shift, and go to state 276
    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286
    ">>"  shift, and go to state 287
    "<<"  shift, and go to state 288

    $default  reduce using rule 48 (prvalue_expression)

    Conflict between rule 48 and token "is" resolved as reduce ("is" < "<=>").
    Conflict between rule 48 and token ">" resolved as reduce (">" < "<=>").
    Conflict between rule 48 and token "+" resolved as shift ("<=>" < "+").
    Conflict between rule 48 and token "-" resolved as shift ("<=>" < "-").
    Conflict between rule 48 and token "/" resolved as shift ("<=>" < "/").
    Conflict between rule 48 and token "//" resolved as shift ("<=>" < "//").
    Conflict between rule 48 and token "*" resolved as shift ("<=>" < "*").
    Conflict between rule 48 and token "^^" resolved as shift ("<=>" < "^^").
    Conflict between rule 48 and token "<=" resolved as reduce ("<=" < "<=>").
    Conflict between rule 48 and token ">=" resolved as reduce (">=" < "<=>").
    Conflict between rule 48 and token "<=>" resolved as reduce (%left "<=>").
    Conflict between rule 48 and token "&&" resolved as reduce ("&&" < "<=>").
    Conflict between rule 48 and token "||" resolved as reduce ("||" < "<=>").
    Conflict between rule 48 and token "&" resolved as reduce ("&" < "<=>").
    Conflict between rule 48 and token "|" resolved as reduce ("|" < "<=>").
    Conflict between rule 48 and token "^" resolved as reduce ("^" < "<=>").
    Conflict between rule 48 and token "~" resolved as shift ("<=>" < "~").
    Conflict between rule 48 and token ">>" resolved as shift ("<=>" < ">>").
    Conflict between rule 48 and token "<<" resolved as shift ("<=>" < "<<").


State 376

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression "&&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", ")", ":", ";"]
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 49 (prvalue_expression)

    Conflict between rule 49 and token "is" resolved as reduce ("is" < "&&").
    Conflict between rule 49 and token ">" resolved as shift ("&&" < ">").
    Conflict between rule 49 and token "+" resolved as shift ("&&" < "+").
    Conflict between rule 49 and token "-" resolved as shift ("&&" < "-").
    Conflict between rule 49 and token "/" resolved as shift ("&&" < "/").
    Conflict between rule 49 and token "//" resolved as shift ("&&" < "//").
    Conflict between rule 49 and token "*" resolved as shift ("&&" < "*").
    Conflict between rule 49 and token "^^" resolved as shift ("&&" < "^^").
    Conflict between rule 49 and token "<=" resolved as shift ("&&" < "<=").
    Conflict between rule 49 and token ">=" resolved as shift ("&&" < ">=").
    Conflict between rule 49 and token "<=>" resolved as shift ("&&" < "<=>").
    Conflict between rule 49 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 49 and token "||" resolved as reduce ("||" < "&&").
    Conflict between rule 49 and token "&" resolved as shift ("&&" < "&").
    Conflict between rule 49 and token "|" resolved as shift ("&&" < "|").
    Conflict between rule 49 and token "^" resolved as shift ("&&" < "^").
    Conflict between rule 49 and token "~" resolved as shift ("&&" < "~").
    Conflict between rule 49 and token ">>" resolved as shift ("&&" < ">>").
    Conflict between rule 49 and token "<<" resolved as shift ("&&" < "<<").


State 377

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression "||" rvalue_expression •  ["in", "is", "]", ",", "||", ")", ":", ";"]
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 50 (prvalue_expression)

    Conflict between rule 50 and token "is" resolved as reduce ("is" < "||").
    Conflict between rule 50 and token ">" resolved as shift ("||" < ">").
    Conflict between rule 50 and token "+" resolved as shift ("||" < "+").
    Conflict between rule 50 and token "-" resolved as shift ("||" < "-").
    Conflict between rule 50 and token "/" resolved as shift ("||" < "/").
    Conflict between rule 50 and token "//" resolved as shift ("||" < "//").
    Conflict between rule 50 and token "*" resolved as shift ("||" < "*").
    Conflict between rule 50 and token "^^" resolved as shift ("||" < "^^").
    Conflict between rule 50 and token "<=" resolved as shift ("||" < "<=").
    Conflict between rule 50 and token ">=" resolved as shift ("||" < ">=").
    Conflict between rule 50 and token "<=>" resolved as shift ("||" < "<=>").
    Conflict between rule 50 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 50 and token "||" resolved as reduce (%left "||").
    Conflict between rule 50 and token "&" resolved as shift ("||" < "&").
    Conflict between rule 50 and token "|" resolved as shift ("||" < "|").
    Conflict between rule 50 and token "^" resolved as shift ("||" < "^").
    Conflict between rule 50 and token "~" resolved as shift ("||" < "~").
    Conflict between rule 50 and token ">>" resolved as shift ("||" < ">>").
    Conflict between rule 50 and token "<<" resolved as shift ("||" < "<<").


State 378

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression "&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "&", "|", "^", ")", ":", ";"]
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 51 (prvalue_expression)

    Conflict between rule 51 and token "is" resolved as reduce ("is" < "&").
    Conflict between rule 51 and token ">" resolved as shift ("&" < ">").
    Conflict between rule 51 and token "+" resolved as shift ("&" < "+").
    Conflict between rule 51 and token "-" resolved as shift ("&" < "-").
    Conflict between rule 51 and token "/" resolved as shift ("&" < "/").
    Conflict between rule 51 and token "//" resolved as shift ("&" < "//").
    Conflict between rule 51 and token "*" resolved as shift ("&" < "*").
    Conflict between rule 51 and token "^^" resolved as shift ("&" < "^^").
    Conflict between rule 51 and token "<=" resolved as shift ("&" < "<=").
    Conflict between rule 51 and token ">=" resolved as shift ("&" < ">=").
    Conflict between rule 51 and token "<=>" resolved as shift ("&" < "<=>").
    Conflict between rule 51 and token "&&" resolved as reduce ("&&" < "&").
    Conflict between rule 51 and token "||" resolved as reduce ("||" < "&").
    Conflict between rule 51 and token "&" resolved as reduce (%left "&").
    Conflict between rule 51 and token "|" resolved as reduce ("|" < "&").
    Conflict between rule 51 and token "^" resolved as reduce ("^" < "&").
    Conflict between rule 51 and token "~" resolved as shift ("&" < "~").
    Conflict between rule 51 and token ">>" resolved as shift ("&" < ">>").
    Conflict between rule 51 and token "<<" resolved as shift ("&" < "<<").


State 379

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression "|" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", ")", ":", ";"]
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&"    shift, and go to state 283
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 53 (prvalue_expression)

    Conflict between rule 53 and token "is" resolved as reduce ("is" < "|").
    Conflict between rule 53 and token ">" resolved as shift ("|" < ">").
    Conflict between rule 53 and token "+" resolved as shift ("|" < "+").
    Conflict between rule 53 and token "-" resolved as shift ("|" < "-").
    Conflict between rule 53 and token "/" resolved as shift ("|" < "/").
    Conflict between rule 53 and token "//" resolved as shift ("|" < "//").
    Conflict between rule 53 and token "*" resolved as shift ("|" < "*").
    Conflict between rule 53 and token "^^" resolved as shift ("|" < "^^").
    Conflict between rule 53 and token "<=" resolved as shift ("|" < "<=").
    Conflict between rule 53 and token ">=" resolved as shift ("|" < ">=").
    Conflict between rule 53 and token "<=>" resolved as shift ("|" < "<=>").
    Conflict between rule 53 and token "&&" resolved as reduce ("&&" < "|").
    Conflict between rule 53 and token "||" resolved as reduce ("||" < "|").
    Conflict between rule 53 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 53 and token "|" resolved as reduce (%left "|").
    Conflict between rule 53 and token "^" resolved as shift ("|" < "^").
    Conflict between rule 53 and token "~" resolved as shift ("|" < "~").
    Conflict between rule 53 and token ">>" resolved as shift ("|" < ">>").
    Conflict between rule 53 and token "<<" resolved as shift ("|" < "<<").


State 380

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression "^" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", "^", ")", ":", ";"]
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&"    shift, and go to state 283
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 52 (prvalue_expression)

    Conflict between rule 52 and token "is" resolved as reduce ("is" < "^").
    Conflict between rule 52 and token ">" resolved as shift ("^" < ">").
    Conflict between rule 52 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 52 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 52 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 52 and token "//" resolved as shift ("^" < "//").
    Conflict between rule 52 and token "*" resolved as shift ("^" < "*").
    Conflict between rule 52 and token "^^" resolved as shift ("^" < "^^").
    Conflict between rule 52 and token "<=" resolved as shift ("^" < "<=").
    Conflict between rule 52 and token ">=" resolved as shift ("^" < ">=").
    Conflict between rule 52 and token "<=>" resolved as shift ("^" < "<=>").
    Conflict between rule 52 and token "&&" resolved as reduce ("&&" < "^").
    Conflict between rule 52 and token "||" resolved as reduce ("||" < "^").
    Conflict between rule 52 and token "&" resolved as shift ("^" < "&").
    Conflict between rule 52 and token "|" resolved as reduce ("|" < "^").
    Conflict between rule 52 and token "^" resolved as reduce (%left "^").
    Conflict between rule 52 and token "~" resolved as shift ("^" < "~").
    Conflict between rule 52 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 52 and token "<<" resolved as shift ("^" < "<<").


State 381

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression "~" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "~"  shift, and go to state 286

    $default  reduce using rule 54 (prvalue_expression)

    Conflict between rule 54 and token "is" resolved as reduce ("is" < "~").
    Conflict between rule 54 and token ">" resolved as reduce (">" < "~").
    Conflict between rule 54 and token "+" resolved as reduce ("+" < "~").
    Conflict between rule 54 and token "-" resolved as reduce ("-" < "~").
    Conflict between rule 54 and token "/" resolved as reduce ("/" < "~").
    Conflict between rule 54 and token "//" resolved as reduce ("//" < "~").
    Conflict between rule 54 and token "*" resolved as reduce ("*" < "~").
    Conflict between rule 54 and token "^^" resolved as reduce ("^^" < "~").
    Conflict between rule 54 and token "<=" resolved as reduce ("<=" < "~").
    Conflict between rule 54 and token ">=" resolved as reduce (">=" < "~").
    Conflict between rule 54 and token "<=>" resolved as reduce ("<=>" < "~").
    Conflict between rule 54 and token "&&" resolved as reduce ("&&" < "~").
    Conflict between rule 54 and token "||" resolved as reduce ("||" < "~").
    Conflict between rule 54 and token "&" resolved as reduce ("&" < "~").
    Conflict between rule 54 and token "|" resolved as reduce ("|" < "~").
    Conflict between rule 54 and token "^" resolved as reduce ("^" < "~").
    Conflict between rule 54 and token "~" resolved as shift (%right "~").
    Conflict between rule 54 and token ">>" resolved as reduce (">>" < "~").
    Conflict between rule 54 and token "<<" resolved as reduce ("<<" < "~").


State 382

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression ">>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "+"   shift, and go to state 272
    "-"   shift, and go to state 273
    "/"   shift, and go to state 274
    "//"  shift, and go to state 275
    "*"   shift, and go to state 276
    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 55 (prvalue_expression)

    Conflict between rule 55 and token "is" resolved as reduce ("is" < ">>").
    Conflict between rule 55 and token ">" resolved as reduce (">" < ">>").
    Conflict between rule 55 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 55 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 55 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 55 and token "//" resolved as shift (">>" < "//").
    Conflict between rule 55 and token "*" resolved as shift (">>" < "*").
    Conflict between rule 55 and token "^^" resolved as shift (">>" < "^^").
    Conflict between rule 55 and token "<=" resolved as reduce ("<=" < ">>").
    Conflict between rule 55 and token ">=" resolved as reduce (">=" < ">>").
    Conflict between rule 55 and token "<=>" resolved as reduce ("<=>" < ">>").
    Conflict between rule 55 and token "&&" resolved as reduce ("&&" < ">>").
    Conflict between rule 55 and token "||" resolved as reduce ("||" < ">>").
    Conflict between rule 55 and token "&" resolved as reduce ("&" < ">>").
    Conflict between rule 55 and token "|" resolved as reduce ("|" < ">>").
    Conflict between rule 55 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 55 and token "~" resolved as shift (">>" < "~").
    Conflict between rule 55 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 55 and token "<<" resolved as reduce (%left "<<").


State 383

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   56                   | rvalue_expression "<<" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "+"   shift, and go to state 272
    "-"   shift, and go to state 273
    "/"   shift, and go to state 274
    "//"  shift, and go to state 275
    "*"   shift, and go to state 276
    "^^"  shift, and go to state 277
    "~"   shift, and go to state 286

    $default  reduce using rule 56 (prvalue_expression)

    Conflict between rule 56 and token "is" resolved as reduce ("is" < "<<").
    Conflict between rule 56 and token ">" resolved as reduce (">" < "<<").
    Conflict between rule 56 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 56 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 56 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 56 and token "//" resolved as shift ("<<" < "//").
    Conflict between rule 56 and token "*" resolved as shift ("<<" < "*").
    Conflict between rule 56 and token "^^" resolved as shift ("<<" < "^^").
    Conflict between rule 56 and token "<=" resolved as reduce ("<=" < "<<").
    Conflict between rule 56 and token ">=" resolved as reduce (">=" < "<<").
    Conflict between rule 56 and token "<=>" resolved as reduce ("<=>" < "<<").
    Conflict between rule 56 and token "&&" resolved as reduce ("&&" < "<<").
    Conflict between rule 56 and token "||" resolved as reduce ("||" < "<<").
    Conflict between rule 56 and token "&" resolved as reduce ("&" < "<<").
    Conflict between rule 56 and token "|" resolved as reduce ("|" < "<<").
    Conflict between rule 56 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 56 and token "~" resolved as shift ("<<" < "~").
    Conflict between rule 56 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 56 and token "<<" resolved as reduce (%left "<<").


State 384

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   39                   | xvalue_expression "+=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 39 (prvalue_expression)

    Conflict between rule 39 and token "is" resolved as shift (%right "is").
    Conflict between rule 39 and token ">" resolved as shift ("+=" < ">").
    Conflict between rule 39 and token "+" resolved as shift ("+=" < "+").
    Conflict between rule 39 and token "-" resolved as shift ("+=" < "-").
    Conflict between rule 39 and token "/" resolved as shift ("+=" < "/").
    Conflict between rule 39 and token "//" resolved as shift ("+=" < "//").
    Conflict between rule 39 and token "*" resolved as shift ("+=" < "*").
    Conflict between rule 39 and token "^^" resolved as shift ("+=" < "^^").
    Conflict between rule 39 and token "<=" resolved as shift ("+=" < "<=").
    Conflict between rule 39 and token ">=" resolved as shift ("+=" < ">=").
    Conflict between rule 39 and token "<=>" resolved as shift ("+=" < "<=>").
    Conflict between rule 39 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 39 and token "||" resolved as shift ("+=" < "||").
    Conflict between rule 39 and token "&" resolved as shift ("+=" < "&").
    Conflict between rule 39 and token "|" resolved as shift ("+=" < "|").
    Conflict between rule 39 and token "^" resolved as shift ("+=" < "^").
    Conflict between rule 39 and token "~" resolved as shift ("+=" < "~").
    Conflict between rule 39 and token ">>" resolved as shift ("+=" < ">>").
    Conflict between rule 39 and token "<<" resolved as shift ("+=" < "<<").


State 385

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   40                   | xvalue_expression "-=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 40 (prvalue_expression)

    Conflict between rule 40 and token "is" resolved as shift (%right "is").
    Conflict between rule 40 and token ">" resolved as shift ("-=" < ">").
    Conflict between rule 40 and token "+" resolved as shift ("-=" < "+").
    Conflict between rule 40 and token "-" resolved as shift ("-=" < "-").
    Conflict between rule 40 and token "/" resolved as shift ("-=" < "/").
    Conflict between rule 40 and token "//" resolved as shift ("-=" < "//").
    Conflict between rule 40 and token "*" resolved as shift ("-=" < "*").
    Conflict between rule 40 and token "^^" resolved as shift ("-=" < "^^").
    Conflict between rule 40 and token "<=" resolved as shift ("-=" < "<=").
    Conflict between rule 40 and token ">=" resolved as shift ("-=" < ">=").
    Conflict between rule 40 and token "<=>" resolved as shift ("-=" < "<=>").
    Conflict between rule 40 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 40 and token "||" resolved as shift ("-=" < "||").
    Conflict between rule 40 and token "&" resolved as shift ("-=" < "&").
    Conflict between rule 40 and token "|" resolved as shift ("-=" < "|").
    Conflict between rule 40 and token "^" resolved as shift ("-=" < "^").
    Conflict between rule 40 and token "~" resolved as shift ("-=" < "~").
    Conflict between rule 40 and token ">>" resolved as shift ("-=" < ">>").
    Conflict between rule 40 and token "<<" resolved as shift ("-=" < "<<").


State 386

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   41                   | xvalue_expression "*=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 41 (prvalue_expression)

    Conflict between rule 41 and token "is" resolved as shift (%right "is").
    Conflict between rule 41 and token ">" resolved as shift ("*=" < ">").
    Conflict between rule 41 and token "+" resolved as shift ("*=" < "+").
    Conflict between rule 41 and token "-" resolved as shift ("*=" < "-").
    Conflict between rule 41 and token "/" resolved as shift ("*=" < "/").
    Conflict between rule 41 and token "//" resolved as shift ("*=" < "//").
    Conflict between rule 41 and token "*" resolved as shift ("*=" < "*").
    Conflict between rule 41 and token "^^" resolved as shift ("*=" < "^^").
    Conflict between rule 41 and token "<=" resolved as shift ("*=" < "<=").
    Conflict between rule 41 and token ">=" resolved as shift ("*=" < ">=").
    Conflict between rule 41 and token "<=>" resolved as shift ("*=" < "<=>").
    Conflict between rule 41 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 41 and token "||" resolved as shift ("*=" < "||").
    Conflict between rule 41 and token "&" resolved as shift ("*=" < "&").
    Conflict between rule 41 and token "|" resolved as shift ("*=" < "|").
    Conflict between rule 41 and token "^" resolved as shift ("*=" < "^").
    Conflict between rule 41 and token "~" resolved as shift ("*=" < "~").
    Conflict between rule 41 and token ">>" resolved as shift ("*=" < ">>").
    Conflict between rule 41 and token "<<" resolved as shift ("*=" < "<<").


State 387

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   42                   | xvalue_expression "/=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 42 (prvalue_expression)

    Conflict between rule 42 and token "is" resolved as shift (%right "is").
    Conflict between rule 42 and token ">" resolved as shift ("/=" < ">").
    Conflict between rule 42 and token "+" resolved as shift ("/=" < "+").
    Conflict between rule 42 and token "-" resolved as shift ("/=" < "-").
    Conflict between rule 42 and token "/" resolved as shift ("/=" < "/").
    Conflict between rule 42 and token "//" resolved as shift ("/=" < "//").
    Conflict between rule 42 and token "*" resolved as shift ("/=" < "*").
    Conflict between rule 42 and token "^^" resolved as shift ("/=" < "^^").
    Conflict between rule 42 and token "<=" resolved as shift ("/=" < "<=").
    Conflict between rule 42 and token ">=" resolved as shift ("/=" < ">=").
    Conflict between rule 42 and token "<=>" resolved as shift ("/=" < "<=>").
    Conflict between rule 42 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 42 and token "||" resolved as shift ("/=" < "||").
    Conflict between rule 42 and token "&" resolved as shift ("/=" < "&").
    Conflict between rule 42 and token "|" resolved as shift ("/=" < "|").
    Conflict between rule 42 and token "^" resolved as shift ("/=" < "^").
    Conflict between rule 42 and token "~" resolved as shift ("/=" < "~").
    Conflict between rule 42 and token ">>" resolved as shift ("/=" < ">>").
    Conflict between rule 42 and token "<<" resolved as shift ("/=" < "<<").


State 388

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   43                   | xvalue_expression "//=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 43 (prvalue_expression)

    Conflict between rule 43 and token "is" resolved as shift (%right "is").
    Conflict between rule 43 and token ">" resolved as shift ("//=" < ">").
    Conflict between rule 43 and token "+" resolved as shift ("//=" < "+").
    Conflict between rule 43 and token "-" resolved as shift ("//=" < "-").
    Conflict between rule 43 and token "/" resolved as shift ("//=" < "/").
    Conflict between rule 43 and token "//" resolved as shift ("//=" < "//").
    Conflict between rule 43 and token "*" resolved as shift ("//=" < "*").
    Conflict between rule 43 and token "^^" resolved as shift ("//=" < "^^").
    Conflict between rule 43 and token "<=" resolved as shift ("//=" < "<=").
    Conflict between rule 43 and token ">=" resolved as shift ("//=" < ">=").
    Conflict between rule 43 and token "<=>" resolved as shift ("//=" < "<=>").
    Conflict between rule 43 and token "&&" resolved as shift ("//=" < "&&").
    Conflict between rule 43 and token "||" resolved as shift ("//=" < "||").
    Conflict between rule 43 and token "&" resolved as shift ("//=" < "&").
    Conflict between rule 43 and token "|" resolved as shift ("//=" < "|").
    Conflict between rule 43 and token "^" resolved as shift ("//=" < "^").
    Conflict between rule 43 and token "~" resolved as shift ("//=" < "~").
    Conflict between rule 43 and token ">>" resolved as shift ("//=" < ">>").
    Conflict between rule 43 and token "<<" resolved as shift ("//=" < "<<").


State 389

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   44                   | xvalue_expression "^^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 44 (prvalue_expression)

    Conflict between rule 44 and token "is" resolved as shift (%right "is").
    Conflict between rule 44 and token ">" resolved as shift ("^^=" < ">").
    Conflict between rule 44 and token "+" resolved as shift ("^^=" < "+").
    Conflict between rule 44 and token "-" resolved as shift ("^^=" < "-").
    Conflict between rule 44 and token "/" resolved as shift ("^^=" < "/").
    Conflict between rule 44 and token "//" resolved as shift ("^^=" < "//").
    Conflict between rule 44 and token "*" resolved as shift ("^^=" < "*").
    Conflict between rule 44 and token "^^" resolved as shift ("^^=" < "^^").
    Conflict between rule 44 and token "<=" resolved as shift ("^^=" < "<=").
    Conflict between rule 44 and token ">=" resolved as shift ("^^=" < ">=").
    Conflict between rule 44 and token "<=>" resolved as shift ("^^=" < "<=>").
    Conflict between rule 44 and token "&&" resolved as shift ("^^=" < "&&").
    Conflict between rule 44 and token "||" resolved as shift ("^^=" < "||").
    Conflict between rule 44 and token "&" resolved as shift ("^^=" < "&").
    Conflict between rule 44 and token "|" resolved as shift ("^^=" < "|").
    Conflict between rule 44 and token "^" resolved as shift ("^^=" < "^").
    Conflict between rule 44 and token "~" resolved as shift ("^^=" < "~").
    Conflict between rule 44 and token ">>" resolved as shift ("^^=" < ">>").
    Conflict between rule 44 and token "<<" resolved as shift ("^^=" < "<<").


State 390

   26 expression: xvalue_expression "=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 26 (expression)


State 391

   99 function_call: xvalue_expression "(" ")" •

    $default  reduce using rule 99 (function_call)


State 392

   98 function_call: xvalue_expression "(" function_argument_list • ")"
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 339
    ")"  shift, and go to state 447


State 393

   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression "." xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   81                  | xvalue_expression • "->" xvalue_expression
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    $default  reduce using rule 80 (xvalue_expression)

    Conflict between rule 80 and token "++" resolved as reduce ("++" < ".").
    Conflict between rule 80 and token "--" resolved as reduce ("--" < ".").
    Conflict between rule 80 and token "(" resolved as reduce (%left "(").
    Conflict between rule 80 and token "." resolved as reduce (%left ".").
    Conflict between rule 80 and token "->" resolved as reduce (%left "->").


State 394

   77 xvalue_expression: xvalue_expression • "++"
   78                  | xvalue_expression • "--"
   80                  | xvalue_expression • "." xvalue_expression
   81                  | xvalue_expression • "->" xvalue_expression
   81                  | xvalue_expression "->" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   98 function_call: xvalue_expression • "(" function_argument_list ")"
   99              | xvalue_expression • "(" ")"

    $default  reduce using rule 81 (xvalue_expression)

    Conflict between rule 81 and token "++" resolved as reduce ("++" < "->").
    Conflict between rule 81 and token "--" resolved as reduce ("--" < "->").
    Conflict between rule 81 and token "(" resolved as reduce (%left "(").
    Conflict between rule 81 and token "." resolved as reduce (%left ".").
    Conflict between rule 81 and token "->" resolved as reduce (%left "->").


State 395

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   57                   | xvalue_expression "&=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 57 (prvalue_expression)

    Conflict between rule 57 and token "is" resolved as shift (%right "is").
    Conflict between rule 57 and token ">" resolved as shift ("&=" < ">").
    Conflict between rule 57 and token "+" resolved as shift ("&=" < "+").
    Conflict between rule 57 and token "-" resolved as shift ("&=" < "-").
    Conflict between rule 57 and token "/" resolved as shift ("&=" < "/").
    Conflict between rule 57 and token "//" resolved as shift ("&=" < "//").
    Conflict between rule 57 and token "*" resolved as shift ("&=" < "*").
    Conflict between rule 57 and token "^^" resolved as shift ("&=" < "^^").
    Conflict between rule 57 and token "<=" resolved as shift ("&=" < "<=").
    Conflict between rule 57 and token ">=" resolved as shift ("&=" < ">=").
    Conflict between rule 57 and token "<=>" resolved as shift ("&=" < "<=>").
    Conflict between rule 57 and token "&&" resolved as shift ("&=" < "&&").
    Conflict between rule 57 and token "||" resolved as shift ("&=" < "||").
    Conflict between rule 57 and token "&" resolved as shift ("&=" < "&").
    Conflict between rule 57 and token "|" resolved as shift ("&=" < "|").
    Conflict between rule 57 and token "^" resolved as shift ("&=" < "^").
    Conflict between rule 57 and token "~" resolved as shift ("&=" < "~").
    Conflict between rule 57 and token ">>" resolved as shift ("&=" < ">>").
    Conflict between rule 57 and token "<<" resolved as shift ("&=" < "<<").


State 396

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   58                   | xvalue_expression "^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 58 (prvalue_expression)

    Conflict between rule 58 and token "is" resolved as shift (%right "is").
    Conflict between rule 58 and token ">" resolved as shift ("^=" < ">").
    Conflict between rule 58 and token "+" resolved as shift ("^=" < "+").
    Conflict between rule 58 and token "-" resolved as shift ("^=" < "-").
    Conflict between rule 58 and token "/" resolved as shift ("^=" < "/").
    Conflict between rule 58 and token "//" resolved as shift ("^=" < "//").
    Conflict between rule 58 and token "*" resolved as shift ("^=" < "*").
    Conflict between rule 58 and token "^^" resolved as shift ("^=" < "^^").
    Conflict between rule 58 and token "<=" resolved as shift ("^=" < "<=").
    Conflict between rule 58 and token ">=" resolved as shift ("^=" < ">=").
    Conflict between rule 58 and token "<=>" resolved as shift ("^=" < "<=>").
    Conflict between rule 58 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 58 and token "||" resolved as shift ("^=" < "||").
    Conflict between rule 58 and token "&" resolved as shift ("^=" < "&").
    Conflict between rule 58 and token "|" resolved as shift ("^=" < "|").
    Conflict between rule 58 and token "^" resolved as shift ("^=" < "^").
    Conflict between rule 58 and token "~" resolved as shift ("^=" < "~").
    Conflict between rule 58 and token ">>" resolved as shift ("^=" < ">>").
    Conflict between rule 58 and token "<<" resolved as shift ("^=" < "<<").


State 397

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   59                   | xvalue_expression "|=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 59 (prvalue_expression)

    Conflict between rule 59 and token "is" resolved as shift (%right "is").
    Conflict between rule 59 and token ">" resolved as shift ("|=" < ">").
    Conflict between rule 59 and token "+" resolved as shift ("|=" < "+").
    Conflict between rule 59 and token "-" resolved as shift ("|=" < "-").
    Conflict between rule 59 and token "/" resolved as shift ("|=" < "/").
    Conflict between rule 59 and token "//" resolved as shift ("|=" < "//").
    Conflict between rule 59 and token "*" resolved as shift ("|=" < "*").
    Conflict between rule 59 and token "^^" resolved as shift ("|=" < "^^").
    Conflict between rule 59 and token "<=" resolved as shift ("|=" < "<=").
    Conflict between rule 59 and token ">=" resolved as shift ("|=" < ">=").
    Conflict between rule 59 and token "<=>" resolved as shift ("|=" < "<=>").
    Conflict between rule 59 and token "&&" resolved as shift ("|=" < "&&").
    Conflict between rule 59 and token "||" resolved as shift ("|=" < "||").
    Conflict between rule 59 and token "&" resolved as shift ("|=" < "&").
    Conflict between rule 59 and token "|" resolved as shift ("|=" < "|").
    Conflict between rule 59 and token "^" resolved as shift ("|=" < "^").
    Conflict between rule 59 and token "~" resolved as shift ("|=" < "~").
    Conflict between rule 59 and token ">>" resolved as shift ("|=" < ">>").
    Conflict between rule 59 and token "<<" resolved as shift ("|=" < "<<").


State 398

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   60                   | xvalue_expression "~=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 60 (prvalue_expression)

    Conflict between rule 60 and token "is" resolved as shift (%right "is").
    Conflict between rule 60 and token ">" resolved as shift ("~=" < ">").
    Conflict between rule 60 and token "+" resolved as shift ("~=" < "+").
    Conflict between rule 60 and token "-" resolved as shift ("~=" < "-").
    Conflict between rule 60 and token "/" resolved as shift ("~=" < "/").
    Conflict between rule 60 and token "//" resolved as shift ("~=" < "//").
    Conflict between rule 60 and token "*" resolved as shift ("~=" < "*").
    Conflict between rule 60 and token "^^" resolved as shift ("~=" < "^^").
    Conflict between rule 60 and token "<=" resolved as shift ("~=" < "<=").
    Conflict between rule 60 and token ">=" resolved as shift ("~=" < ">=").
    Conflict between rule 60 and token "<=>" resolved as shift ("~=" < "<=>").
    Conflict between rule 60 and token "&&" resolved as shift ("~=" < "&&").
    Conflict between rule 60 and token "||" resolved as shift ("~=" < "||").
    Conflict between rule 60 and token "&" resolved as shift ("~=" < "&").
    Conflict between rule 60 and token "|" resolved as shift ("~=" < "|").
    Conflict between rule 60 and token "^" resolved as shift ("~=" < "^").
    Conflict between rule 60 and token "~" resolved as shift ("~=" < "~").
    Conflict between rule 60 and token ">>" resolved as shift ("~=" < ">>").
    Conflict between rule 60 and token "<<" resolved as shift ("~=" < "<<").


State 399

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   62                   | xvalue_expression "<<=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 62 (prvalue_expression)

    Conflict between rule 62 and token "is" resolved as shift (%right "is").
    Conflict between rule 62 and token ">" resolved as shift ("<<=" < ">").
    Conflict between rule 62 and token "+" resolved as shift ("<<=" < "+").
    Conflict between rule 62 and token "-" resolved as shift ("<<=" < "-").
    Conflict between rule 62 and token "/" resolved as shift ("<<=" < "/").
    Conflict between rule 62 and token "//" resolved as shift ("<<=" < "//").
    Conflict between rule 62 and token "*" resolved as shift ("<<=" < "*").
    Conflict between rule 62 and token "^^" resolved as shift ("<<=" < "^^").
    Conflict between rule 62 and token "<=" resolved as shift ("<<=" < "<=").
    Conflict between rule 62 and token ">=" resolved as shift ("<<=" < ">=").
    Conflict between rule 62 and token "<=>" resolved as shift ("<<=" < "<=>").
    Conflict between rule 62 and token "&&" resolved as shift ("<<=" < "&&").
    Conflict between rule 62 and token "||" resolved as shift ("<<=" < "||").
    Conflict between rule 62 and token "&" resolved as shift ("<<=" < "&").
    Conflict between rule 62 and token "|" resolved as shift ("<<=" < "|").
    Conflict between rule 62 and token "^" resolved as shift ("<<=" < "^").
    Conflict between rule 62 and token "~" resolved as shift ("<<=" < "~").
    Conflict between rule 62 and token ">>" resolved as shift ("<<=" < ">>").
    Conflict between rule 62 and token "<<" resolved as shift ("<<=" < "<<").


State 400

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   61                   | xvalue_expression ">>=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   63                   | rvalue_expression • "is" type

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 61 (prvalue_expression)

    Conflict between rule 61 and token "is" resolved as shift (%right "is").
    Conflict between rule 61 and token ">" resolved as shift (">>=" < ">").
    Conflict between rule 61 and token "+" resolved as shift (">>=" < "+").
    Conflict between rule 61 and token "-" resolved as shift (">>=" < "-").
    Conflict between rule 61 and token "/" resolved as shift (">>=" < "/").
    Conflict between rule 61 and token "//" resolved as shift (">>=" < "//").
    Conflict between rule 61 and token "*" resolved as shift (">>=" < "*").
    Conflict between rule 61 and token "^^" resolved as shift (">>=" < "^^").
    Conflict between rule 61 and token "<=" resolved as shift (">>=" < "<=").
    Conflict between rule 61 and token ">=" resolved as shift (">>=" < ">=").
    Conflict between rule 61 and token "<=>" resolved as shift (">>=" < "<=>").
    Conflict between rule 61 and token "&&" resolved as shift (">>=" < "&&").
    Conflict between rule 61 and token "||" resolved as shift (">>=" < "||").
    Conflict between rule 61 and token "&" resolved as shift (">>=" < "&").
    Conflict between rule 61 and token "|" resolved as shift (">>=" < "|").
    Conflict between rule 61 and token "^" resolved as shift (">>=" < "^").
    Conflict between rule 61 and token "~" resolved as shift (">>=" < "~").
    Conflict between rule 61 and token ">>" resolved as shift (">>=" < ">>").
    Conflict between rule 61 and token "<<" resolved as shift (">>=" < "<<").


State 401

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  133 else_if_statement: "else-if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 448
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 402

  112 block_statement: • "{" statements0 "}"
  136 else_statement: "else" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 449


State 403

  127 if_statement_sequence: if_statement else_if_statements0 else_statement0 •

    $default  reduce using rule 127 (if_statement_sequence)


State 404

  134 else_statement0: else_statement •

    $default  reduce using rule 134 (else_statement0)


State 405

  132 else_if_statements: else_if_statements else_if_statement •

    $default  reduce using rule 132 (else_if_statements)


State 406

  150 catch_block: "catch" "(" • variable_declaration ")" block_statement
  166 variable_declaration: • "let" access_modifier0 variable_declaration_block_list

    "let"  shift, and go to state 6

    variable_declaration  go to state 450


State 407

  151 catch_block: "catch-all" block_statement •

    $default  reduce using rule 151 (catch_block)


State 408

  149 catch_blocks: catch_blocks catch_block •

    $default  reduce using rule 149 (catch_blocks)


State 409

  279 compeval0: "compeval" •

    $default  reduce using rule 279 (compeval0)


State 410

  274 constructor_header: "ctor" access_modifier compeval0 • IDENTIFIER "(" function_argument_list ")" throwable_expression

    IDENTIFIER  shift, and go to state 451


State 411

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  261 property: "let" access_modifier "property" • type IDENTIFIER "{" property_blocks "}" ";"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                go to state 452
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43


State 412

  283 destructor_header: "~" IDENTIFIER "(" • ")"

    ")"  shift, and go to state 453


State 413

  273 constructor: constructor_header "=" function_options • ";"

    ";"  shift, and go to state 454


State 414

  275 initializer_list: "=>" "initailize" • "(" initializer_blocks_list ")"

    "("  shift, and go to state 455


State 415

  271 constructor: constructor_header initializer_list ";" •

    $default  reduce using rule 271 (constructor)


State 416

  270 constructor: constructor_header initializer_list block_statement •

    $default  reduce using rule 270 (constructor)


State 417

  282 destructor: destructor_header "=" function_options • ";"

    ";"  shift, and go to state 456


State 418

  250 class_names_list: class_names_list "," class_name •

    $default  reduce using rule 250 (class_names_list)


State 419

   22 type_list: type_list "," type •

    $default  reduce using rule 22 (type_list)


State 420

   82 xvalue_expression: "(" rvalue_expression ")" •

    $default  reduce using rule 82 (xvalue_expression)


State 421

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  188 function_argument: type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 457
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 422

  185 function_argument_list: function_argument_list "," function_argument •

    $default  reduce using rule 185 (function_argument_list)


State 423

  189 throwable_expression: "nothrowable" •  ["=", "->", "{", "=>"]
  190                     | "nothrowable" • "(" expression ")"

    "("  shift, and go to state 458

    $default  reduce using rule 189 (throwable_expression)


State 424

  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 459


State 425

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  185 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 339
    ")"  shift, and go to state 460


State 426

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  170 variable_declaration_block: "let" type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 461
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 427

  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 462


State 428

   67 prvalue_expression: "castas" "<" type ">" • "(" rvalue_expression ")"

    "("  shift, and go to state 463


State 429

   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," • clean_up_arg ")" ";"
  153 clean_up_arg: • IDENTIFIER
  154             | • lambda_expression
  155             | • function
  156             | • anonymous_function
  177 function: • function_header block_statement
  178 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  195 anonymous_function: • anonymous_function_header block_statement
  196 anonymous_function_header: • "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  197                          | • "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 464
    "func"      shift, and go to state 465
    "("         shift, and go to state 466

    lambda_expression          go to state 467
    clean_up_arg               go to state 468
    function                   go to state 469
    function_header            go to state 14
    anonymous_function         go to state 470
    anonymous_function_header  go to state 471


State 430

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  121 do_loop_statement: "do" block_statement "while" "(" • expression ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 472
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 431

  112 block_statement: • "{" statements0 "}"
  122 for_loop_statement: "for" "(" for_loop_condition ")" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 473


State 432

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  124 for_loop_condition: variable_declaration "in" • expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 474
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 433

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [";"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  123 for_loop_condition: variable_declaration ";" • expression0 ";" expression0

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    $default  reduce using rule 28 (expression0)

    expression                 go to state 442
    expression0                go to state 475
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 434

  112 block_statement: • "{" statements0 "}"
  128 if_statement: "if" "(" expression ")" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 476


State 435

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   93               | "new" "heap" type "(" • function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  100 function_call_list: • function_call_arg
  101                   | • function_call_list "," function_call_arg ";"
  102 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 436
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171
    function_call_list         go to state 477
    function_call_arg          go to state 438


State 436

  102 function_call_arg: expression •

    $default  reduce using rule 102 (function_call_arg)


State 437

   92 new_expression: "new" type "(" function_call_list • ")"
  101 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 478
    ")"  shift, and go to state 479


State 438

  100 function_call_list: function_call_arg •

    $default  reduce using rule 100 (function_call_list)


State 439

  137 switch_statement: "switch" "(" expression ")" • case_blocks0 default_block0
  138 case_blocks0: • case_blocks
  139             | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  140 case_blocks: • case_block
  141            | • case_blocks case_block
  142 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 480

    $default  reduce using rule 139 (case_blocks0)

    case_blocks0  go to state 481
    case_blocks   go to state 482
    case_block    go to state 483


State 440

   66 prvalue_expression: "typeof" "(" rvalue_expression ")" •

    $default  reduce using rule 66 (prvalue_expression)


State 441

  112 block_statement: • "{" statements0 "}"
  120 while_loop_statement: "while" "(" expression ")" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 484


State 442

   27 expression0: expression •

    $default  reduce using rule 27 (expression0)


State 443

   97 array_index: expression0 ":" expression0 •

    $default  reduce using rule 97 (array_index)


State 444

   95 array_index_list: array_index_list "," array_index •

    $default  reduce using rule 95 (array_index_list)


State 445

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | "(" rvalue_expression ")" "?" • rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 485
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 446

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   91 lambda_expression: "(" function_argument_list ")" "->" • return_types_list "=>" block_statement
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 488
    return_type         go to state 489


State 447

   98 function_call: xvalue_expression "(" function_argument_list ")" •

    $default  reduce using rule 98 (function_call)


State 448

  133 else_if_statement: "else-if" "(" expression • ")" block_statement

    ")"  shift, and go to state 490


State 449

  136 else_statement: "else" block_statement •

    $default  reduce using rule 136 (else_statement)


State 450

  150 catch_block: "catch" "(" variable_declaration • ")" block_statement

    ")"  shift, and go to state 491


State 451

  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER • "(" function_argument_list ")" throwable_expression

    "("  shift, and go to state 492


State 452

  261 property: "let" access_modifier "property" type • IDENTIFIER "{" property_blocks "}" ";"

    IDENTIFIER  shift, and go to state 493


State 453

  283 destructor_header: "~" IDENTIFIER "(" ")" •

    $default  reduce using rule 283 (destructor_header)


State 454

  273 constructor: constructor_header "=" function_options ";" •

    $default  reduce using rule 273 (constructor)


State 455

  275 initializer_list: "=>" "initailize" "(" • initializer_blocks_list ")"
  276 initializer_blocks_list: • initializer_block
  277                        | • initializer_blocks_list "," initializer_block
  278 initializer_block: • IDENTIFIER ":" rvalue_expression

    IDENTIFIER  shift, and go to state 494

    initializer_blocks_list  go to state 495
    initializer_block        go to state 496


State 456

  282 destructor: destructor_header "=" function_options ";" •

    $default  reduce using rule 282 (destructor)


State 457

  188 function_argument: type IDENTIFIER "=" expression •

    $default  reduce using rule 188 (function_argument)


State 458

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  190 throwable_expression: "nothrowable" "(" • expression ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 497
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 459

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 498
    return_type         go to state 489


State 460

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 423

    throwable_expression  go to state 499


State 461

  170 variable_declaration_block: "let" type IDENTIFIER "=" expression •

    $default  reduce using rule 170 (variable_declaration_block)


State 462

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"
  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 500
    return_type         go to state 489


State 463

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   67                   | "castas" "<" type ">" "(" • rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 501
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 464

  153 clean_up_arg: IDENTIFIER •

    $default  reduce using rule 153 (clean_up_arg)


State 465

  173 access_modifier: • "public"
  174                | • "private"
  175                | • "protected"
  178 function_header: "func" • access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  179                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  196 anonymous_function_header: "func" • "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  197                          | "func" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER   shift, and go to state 45
    "compeval"   shift, and go to state 502
    "private"    shift, and go to state 46
    "protected"  shift, and go to state 47
    "public"     shift, and go to state 48
    "("          shift, and go to state 503

    access_modifier  go to state 49


State 466

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   91 lambda_expression: "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 268
    function_argument       go to state 222


State 467

  154 clean_up_arg: lambda_expression •

    $default  reduce using rule 154 (clean_up_arg)


State 468

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg • ")" ";"

    ")"  shift, and go to state 504


State 469

  155 clean_up_arg: function •

    $default  reduce using rule 155 (clean_up_arg)


State 470

  156 clean_up_arg: anonymous_function •

    $default  reduce using rule 156 (clean_up_arg)


State 471

  112 block_statement: • "{" statements0 "}"
  195 anonymous_function: anonymous_function_header • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 505


State 472

  121 do_loop_statement: "do" block_statement "while" "(" expression • ")"

    ")"  shift, and go to state 506


State 473

  122 for_loop_statement: "for" "(" for_loop_condition ")" block_statement •

    $default  reduce using rule 122 (for_loop_statement)


State 474

  124 for_loop_condition: variable_declaration "in" expression •

    $default  reduce using rule 124 (for_loop_condition)


State 475

  123 for_loop_condition: variable_declaration ";" expression0 • ";" expression0

    ";"  shift, and go to state 507


State 476

  128 if_statement: "if" "(" expression ")" block_statement •

    $default  reduce using rule 128 (if_statement)


State 477

   93 new_expression: "new" "heap" type "(" function_call_list • ")"
  101 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 478
    ")"  shift, and go to state 508


State 478

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  101 function_call_list: function_call_list "," • function_call_arg ";"
  102 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 436
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171
    function_call_arg          go to state 509


State 479

   92 new_expression: "new" type "(" function_call_list ")" •

    $default  reduce using rule 92 (new_expression)


State 480

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  142 case_block: "case" • expression ":" block_statement jump_statement

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 510
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 481

  137 switch_statement: "switch" "(" expression ")" case_blocks0 • default_block0
  143 default_block0: • default_block
  144               | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  145 default_block: • "default" ":" block_statement jump_statement

    "default"  shift, and go to state 511

    $default  reduce using rule 144 (default_block0)

    default_block0  go to state 512
    default_block   go to state 513


State 482

  138 case_blocks0: case_blocks •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  141 case_blocks: case_blocks • case_block
  142 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 480

    $default  reduce using rule 138 (case_blocks0)

    case_block  go to state 514


State 483

  140 case_blocks: case_block •

    $default  reduce using rule 140 (case_blocks)


State 484

  120 while_loop_statement: "while" "(" expression ")" block_statement •

    $default  reduce using rule 120 (while_loop_statement)


State 485

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   68                   | "(" rvalue_expression ")" "?" rvalue_expression • ":" rvalue_expression

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288
    ":"    shift, and go to state 515


State 486

  194 return_type: "typeof" • "(" expression ")"

    "("  shift, and go to state 516


State 487

  193 return_type: type •

    $default  reduce using rule 193 (return_type)


State 488

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list • "=>" block_statement
  192 return_types_list: return_types_list • "," return_type

    ","   shift, and go to state 517
    "=>"  shift, and go to state 518


State 489

  191 return_types_list: return_type •

    $default  reduce using rule 191 (return_types_list)


State 490

  112 block_statement: • "{" statements0 "}"
  133 else_if_statement: "else-if" "(" expression ")" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 519


State 491

  112 block_statement: • "{" statements0 "}"
  150 catch_block: "catch" "(" variable_declaration ")" • block_statement

    "{"  shift, and go to state 93

    block_statement  go to state 520


State 492

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" • function_argument_list ")" throwable_expression

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 521
    function_argument       go to state 222


State 493

  261 property: "let" access_modifier "property" type IDENTIFIER • "{" property_blocks "}" ";"

    "{"  shift, and go to state 522


State 494

  278 initializer_block: IDENTIFIER • ":" rvalue_expression

    ":"  shift, and go to state 523


State 495

  275 initializer_list: "=>" "initailize" "(" initializer_blocks_list • ")"
  277 initializer_blocks_list: initializer_blocks_list • "," initializer_block

    ","  shift, and go to state 524
    ")"  shift, and go to state 525


State 496

  276 initializer_blocks_list: initializer_block •

    $default  reduce using rule 276 (initializer_blocks_list)


State 497

  190 throwable_expression: "nothrowable" "(" expression • ")"

    ")"  shift, and go to state 526


State 498

  179 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  192 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 517

    $default  reduce using rule 179 (function_header)


State 499

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 527


State 500

  192 return_types_list: return_types_list • "," return_type
  200 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["=", "{"]

    ","  shift, and go to state 517

    $default  reduce using rule 200 (operator_overload_header)


State 501

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   67                   | "castas" "<" type ">" "(" rvalue_expression • ")"

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288
    ")"    shift, and go to state 528


State 502

  196 anonymous_function_header: "func" "compeval" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 529


State 503

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  197 anonymous_function_header: "func" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 530
    function_argument       go to state 222


State 504

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" • ";"

    ";"  shift, and go to state 531


State 505

  195 anonymous_function: anonymous_function_header block_statement •

    $default  reduce using rule 195 (anonymous_function)


State 506

  121 do_loop_statement: "do" block_statement "while" "(" expression ")" •

    $default  reduce using rule 121 (do_loop_statement)


State 507

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [")"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  123 for_loop_condition: variable_declaration ";" expression0 ";" • expression0

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    $default  reduce using rule 28 (expression0)

    expression                 go to state 442
    expression0                go to state 532
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 508

   93 new_expression: "new" "heap" type "(" function_call_list ")" •

    $default  reduce using rule 93 (new_expression)


State 509

  101 function_call_list: function_call_list "," function_call_arg • ";"

    ";"  shift, and go to state 533


State 510

  142 case_block: "case" expression • ":" block_statement jump_statement

    ":"  shift, and go to state 534


State 511

  145 default_block: "default" • ":" block_statement jump_statement

    ":"  shift, and go to state 535


State 512

  137 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0 •

    $default  reduce using rule 137 (switch_statement)


State 513

  143 default_block0: default_block •

    $default  reduce using rule 143 (default_block0)


State 514

  141 case_blocks: case_blocks case_block •

    $default  reduce using rule 141 (case_blocks)


State 515

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | "(" rvalue_expression ")" "?" rvalue_expression ":" • rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 536
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 516

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  194 return_type: "typeof" "(" • expression ")"

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    expression                 go to state 537
    assignment_arg_expression  go to state 164
    prvalue_expression         go to state 165
    rvalue_expression          go to state 166
    xvalue_expression          go to state 167
    literal                    go to state 168
    lambda_expression          go to state 169
    new_expression             go to state 170
    function_call              go to state 171


State 517

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  192 return_types_list: return_types_list "," • return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_type         go to state 538


State 518

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" • block_statement
  112 block_statement: • "{" statements0 "}"

    "{"  shift, and go to state 93

    block_statement  go to state 539


State 519

  133 else_if_statement: "else-if" "(" expression ")" block_statement •

    $default  reduce using rule 133 (else_if_statement)


State 520

  150 catch_block: "catch" "(" variable_declaration ")" block_statement •

    $default  reduce using rule 150 (catch_block)


State 521

  185 function_argument_list: function_argument_list • "," function_argument
  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list • ")" throwable_expression

    ","  shift, and go to state 339
    ")"  shift, and go to state 540


State 522

  261 property: "let" access_modifier "property" type IDENTIFIER "{" • property_blocks "}" ";"
  262 property_blocks: • get_block
  263                | • set_block
  264                | • get_block set_block
  265                | • set_block get_block
  266 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  267          | • "get" "(" ")" block_statement
  268 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  269          | • "set" "(" ")" block_statement

    "get"  shift, and go to state 541
    "set"  shift, and go to state 542

    property_blocks  go to state 543
    get_block        go to state 544
    set_block        go to state 545


State 523

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "&&" rvalue_expression
   50                   | • rvalue_expression "||" rvalue_expression
   51                   | • rvalue_expression "&" rvalue_expression
   52                   | • rvalue_expression "^" rvalue_expression
   53                   | • rvalue_expression "|" rvalue_expression
   54                   | • rvalue_expression "~" rvalue_expression
   55                   | • rvalue_expression ">>" rvalue_expression
   56                   | • rvalue_expression "<<" rvalue_expression
   57                   | • xvalue_expression "&=" rvalue_expression
   58                   | • xvalue_expression "^=" rvalue_expression
   59                   | • xvalue_expression "|=" rvalue_expression
   60                   | • xvalue_expression "~=" rvalue_expression
   61                   | • xvalue_expression ">>=" rvalue_expression
   62                   | • xvalue_expression "<<=" rvalue_expression
   63                   | • rvalue_expression "is" type
   64                   | • "!" rvalue_expression
   65                   | • "-" rvalue_expression
   66                   | • "typeof" "(" rvalue_expression ")"
   67                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   68                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   69                   | • new_expression
   70                   | • lambda_expression
   71 rvalue_expression: • prvalue_expression
   72                  | • xvalue_expression
   73 xvalue_expression: • IDENTIFIER
   74                  | • "this"
   75                  | • "++" xvalue_expression
   76                  | • "--" xvalue_expression
   77                  | • xvalue_expression "++"
   78                  | • xvalue_expression "--"
   79                  | • "*" xvalue_expression
   80                  | • xvalue_expression "." xvalue_expression
   81                  | • xvalue_expression "->" xvalue_expression
   82                  | • "(" rvalue_expression ")"
   83                  | • "[" array_index_list "]"
   84                  | • function_call
   85 literal: • BOOL
   86        | • NPTR
   87        | • INT
   88        | • FLOAT
   89        | • STRING
   90        | • CHAR
   91 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   92 new_expression: • "new" type "(" function_call_list ")"
   93               | • "new" "heap" type "(" function_call_list ")"
   98 function_call: • xvalue_expression "(" function_argument_list ")"
   99              | • xvalue_expression "(" ")"
  278 initializer_block: IDENTIFIER ":" • rvalue_expression

    IDENTIFIER  shift, and go to state 129
    NPTR        shift, and go to state 130
    BOOL        shift, and go to state 131
    INT         shift, and go to state 132
    FLOAT       shift, and go to state 133
    CHAR        shift, and go to state 134
    STRING      shift, and go to state 135
    "castas"    shift, and go to state 137
    "new"       shift, and go to state 144
    "super"     shift, and go to state 147
    "this"      shift, and go to state 149
    "typeof"    shift, and go to state 152
    "["         shift, and go to state 155
    "-"         shift, and go to state 156
    "*"         shift, and go to state 157
    "!"         shift, and go to state 158
    "++"        shift, and go to state 159
    "--"        shift, and go to state 160
    "("         shift, and go to state 161

    prvalue_expression  go to state 260
    rvalue_expression   go to state 546
    xvalue_expression   go to state 262
    literal             go to state 168
    lambda_expression   go to state 169
    new_expression      go to state 170
    function_call       go to state 171


State 524

  277 initializer_blocks_list: initializer_blocks_list "," • initializer_block
  278 initializer_block: • IDENTIFIER ":" rvalue_expression

    IDENTIFIER  shift, and go to state 494

    initializer_block  go to state 547


State 525

  275 initializer_list: "=>" "initailize" "(" initializer_blocks_list ")" •

    $default  reduce using rule 275 (initializer_list)


State 526

  190 throwable_expression: "nothrowable" "(" expression ")" •

    $default  reduce using rule 190 (throwable_expression)


State 527

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 548
    return_type         go to state 489


State 528

   67 prvalue_expression: "castas" "<" type ">" "(" rvalue_expression ")" •

    $default  reduce using rule 67 (prvalue_expression)


State 529

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  184 function_argument_list: • function_argument
  185                       | • function_argument_list "," function_argument
  186 function_argument: • type IDENTIFIER
  187                  | • type "..."
  188                  | • type IDENTIFIER "=" expression
  196 anonymous_function_header: "func" "compeval" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38

    type                    go to state 220
    type_root               go to state 40
    non_reference_type      go to state 41
    type_core               go to state 42
    reference_type          go to state 43
    function_argument_list  go to state 549
    function_argument       go to state 222


State 530

  185 function_argument_list: function_argument_list • "," function_argument
  197 anonymous_function_header: "func" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 339
    ")"  shift, and go to state 550


State 531

  152 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";" •

    $default  reduce using rule 152 (clean_up_statement)


State 532

  123 for_loop_condition: variable_declaration ";" expression0 ";" expression0 •

    $default  reduce using rule 123 (for_loop_condition)


State 533

  101 function_call_list: function_call_list "," function_call_arg ";" •

    $default  reduce using rule 101 (function_call_list)


State 534

  112 block_statement: • "{" statements0 "}"
  142 case_block: "case" expression ":" • block_statement jump_statement

    "{"  shift, and go to state 93

    block_statement  go to state 551


State 535

  112 block_statement: • "{" statements0 "}"
  145 default_block: "default" ":" • block_statement jump_statement

    "{"  shift, and go to state 93

    block_statement  go to state 552


State 536

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
   68                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 68 (prvalue_expression)

    Conflict between rule 68 and token "is" resolved as shift (%right "is").
    Conflict between rule 68 and token ">" resolved as shift (TERN < ">").
    Conflict between rule 68 and token "+" resolved as shift (TERN < "+").
    Conflict between rule 68 and token "-" resolved as shift (TERN < "-").
    Conflict between rule 68 and token "/" resolved as shift (TERN < "/").
    Conflict between rule 68 and token "//" resolved as shift (TERN < "//").
    Conflict between rule 68 and token "*" resolved as shift (TERN < "*").
    Conflict between rule 68 and token "^^" resolved as shift (TERN < "^^").
    Conflict between rule 68 and token "<=" resolved as shift (TERN < "<=").
    Conflict between rule 68 and token ">=" resolved as shift (TERN < ">=").
    Conflict between rule 68 and token "<=>" resolved as shift (TERN < "<=>").
    Conflict between rule 68 and token "&&" resolved as shift (TERN < "&&").
    Conflict between rule 68 and token "||" resolved as shift (TERN < "||").
    Conflict between rule 68 and token "&" resolved as shift (TERN < "&").
    Conflict between rule 68 and token "|" resolved as shift (TERN < "|").
    Conflict between rule 68 and token "^" resolved as shift (TERN < "^").
    Conflict between rule 68 and token "~" resolved as shift (TERN < "~").
    Conflict between rule 68 and token ">>" resolved as shift (TERN < ">>").
    Conflict between rule 68 and token "<<" resolved as shift (TERN < "<<").


State 537

  194 return_type: "typeof" "(" expression • ")"

    ")"  shift, and go to state 553


State 538

  192 return_types_list: return_types_list "," return_type •

    $default  reduce using rule 192 (return_types_list)


State 539

   91 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement •

    $default  reduce using rule 91 (lambda_expression)


State 540

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" • throwable_expression

    "nothrowable"  shift, and go to state 423

    throwable_expression  go to state 554


State 541

  266 get_block: "get" • "(" ")" "=>" IDENTIFIER ";"
  267          | "get" • "(" ")" block_statement

    "("  shift, and go to state 555


State 542

  268 set_block: "set" • "(" ")" "=>" IDENTIFIER ";"
  269          | "set" • "(" ")" block_statement

    "("  shift, and go to state 556


State 543

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks • "}" ";"

    "}"  shift, and go to state 557


State 544

  262 property_blocks: get_block •  ["}"]
  264                | get_block • set_block
  268 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  269          | • "set" "(" ")" block_statement

    "set"  shift, and go to state 542

    $default  reduce using rule 262 (property_blocks)

    set_block  go to state 558


State 545

  263 property_blocks: set_block •  ["}"]
  265                | set_block • get_block
  266 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  267          | • "get" "(" ")" block_statement

    "get"  shift, and go to state 541

    $default  reduce using rule 263 (property_blocks)

    get_block  go to state 559


State 546

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "&&" rvalue_expression
   50                   | rvalue_expression • "||" rvalue_expression
   51                   | rvalue_expression • "&" rvalue_expression
   52                   | rvalue_expression • "^" rvalue_expression
   53                   | rvalue_expression • "|" rvalue_expression
   54                   | rvalue_expression • "~" rvalue_expression
   55                   | rvalue_expression • ">>" rvalue_expression
   56                   | rvalue_expression • "<<" rvalue_expression
   63                   | rvalue_expression • "is" type
  278 initializer_block: IDENTIFIER ":" rvalue_expression •  [",", ")"]

    "is"   shift, and go to state 270
    ">"    shift, and go to state 271
    "+"    shift, and go to state 272
    "-"    shift, and go to state 273
    "/"    shift, and go to state 274
    "//"   shift, and go to state 275
    "*"    shift, and go to state 276
    "^^"   shift, and go to state 277
    "<="   shift, and go to state 278
    ">="   shift, and go to state 279
    "<=>"  shift, and go to state 280
    "&&"   shift, and go to state 281
    "||"   shift, and go to state 282
    "&"    shift, and go to state 283
    "|"    shift, and go to state 284
    "^"    shift, and go to state 285
    "~"    shift, and go to state 286
    ">>"   shift, and go to state 287
    "<<"   shift, and go to state 288

    $default  reduce using rule 278 (initializer_block)


State 547

  277 initializer_blocks_list: initializer_blocks_list "," initializer_block •

    $default  reduce using rule 277 (initializer_blocks_list)


State 548

  178 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  192 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 517

    $default  reduce using rule 178 (function_header)


State 549

  185 function_argument_list: function_argument_list • "," function_argument
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 339
    ")"  shift, and go to state 560


State 550

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  197 anonymous_function_header: "func" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 423

    throwable_expression  go to state 561


State 551

  142 case_block: "case" expression ":" block_statement • jump_statement
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 136
    "continue"  shift, and go to state 139
    "goto"      shift, and go to state 142
    "rethrow"   shift, and go to state 145
    "return"    shift, and go to state 146
    "throw"     shift, and go to state 150
    "yield"     shift, and go to state 154

    jump_statement  go to state 562


State 552

  145 default_block: "default" ":" block_statement • jump_statement
  157 jump_statement: • "return" ";"
  158               | • "break" ";"
  159               | • "continue" ";"
  160               | • "rethrow" ";"
  161               | • "throw" expression ";"
  162               | • "yield" ";"
  163               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 136
    "continue"  shift, and go to state 139
    "goto"      shift, and go to state 142
    "rethrow"   shift, and go to state 145
    "return"    shift, and go to state 146
    "throw"     shift, and go to state 150
    "yield"     shift, and go to state 154

    jump_statement  go to state 563


State 553

  194 return_type: "typeof" "(" expression ")" •

    $default  reduce using rule 194 (return_type)


State 554

  274 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression •

    $default  reduce using rule 274 (constructor_header)


State 555

  266 get_block: "get" "(" • ")" "=>" IDENTIFIER ";"
  267          | "get" "(" • ")" block_statement

    ")"  shift, and go to state 564


State 556

  268 set_block: "set" "(" • ")" "=>" IDENTIFIER ";"
  269          | "set" "(" • ")" block_statement

    ")"  shift, and go to state 565


State 557

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" • ";"

    ";"  shift, and go to state 566


State 558

  264 property_blocks: get_block set_block •

    $default  reduce using rule 264 (property_blocks)


State 559

  265 property_blocks: set_block get_block •

    $default  reduce using rule 265 (property_blocks)


State 560

  189 throwable_expression: • "nothrowable"
  190                     | • "nothrowable" "(" expression ")"
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 423

    throwable_expression  go to state 567


State 561

  197 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 568


State 562

  142 case_block: "case" expression ":" block_statement jump_statement •

    $default  reduce using rule 142 (case_block)


State 563

  145 default_block: "default" ":" block_statement jump_statement •

    $default  reduce using rule 145 (default_block)


State 564

  112 block_statement: • "{" statements0 "}"
  266 get_block: "get" "(" ")" • "=>" IDENTIFIER ";"
  267          | "get" "(" ")" • block_statement

    "{"   shift, and go to state 93
    "=>"  shift, and go to state 569

    block_statement  go to state 570


State 565

  112 block_statement: • "{" statements0 "}"
  268 set_block: "set" "(" ")" • "=>" IDENTIFIER ";"
  269          | "set" "(" ")" • block_statement

    "{"   shift, and go to state 93
    "=>"  shift, and go to state 571

    block_statement  go to state 572


State 566

  261 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";" •

    $default  reduce using rule 261 (property)


State 567

  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 573


State 568

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"
  197 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 574
    return_type         go to state 489


State 569

  266 get_block: "get" "(" ")" "=>" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 575


State 570

  267 get_block: "get" "(" ")" block_statement •

    $default  reduce using rule 267 (get_block)


State 571

  268 set_block: "set" "(" ")" "=>" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 576


State 572

  269 set_block: "set" "(" ")" block_statement •

    $default  reduce using rule 269 (set_block)


State 573

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 return_types_list: • return_type
  192                  | • return_types_list "," return_type
  193 return_type: • type
  194            | • "typeof" "(" expression ")"
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 28
    "bit"     shift, and go to state 29
    "bool"    shift, and go to state 30
    "char"    shift, and go to state 31
    "const"   shift, and go to state 32
    "float"   shift, and go to state 33
    "int"     shift, and go to state 34
    "long"    shift, and go to state 35
    "ref"     shift, and go to state 36
    "rref"    shift, and go to state 37
    "short"   shift, and go to state 38
    "typeof"  shift, and go to state 486

    type                go to state 487
    type_root           go to state 40
    non_reference_type  go to state 41
    type_core           go to state 42
    reference_type      go to state 43
    return_types_list   go to state 577
    return_type         go to state 489


State 574

  192 return_types_list: return_types_list • "," return_type
  197 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 517

    $default  reduce using rule 197 (anonymous_function_header)


State 575

  266 get_block: "get" "(" ")" "=>" IDENTIFIER • ";"

    ";"  shift, and go to state 578


State 576

  268 set_block: "set" "(" ")" "=>" IDENTIFIER • ";"

    ";"  shift, and go to state 579


State 577

  192 return_types_list: return_types_list • "," return_type
  196 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 517

    $default  reduce using rule 196 (anonymous_function_header)


State 578

  266 get_block: "get" "(" ")" "=>" IDENTIFIER ";" •

    $default  reduce using rule 266 (get_block)


State 579

  268 set_block: "set" "(" ")" "=>" IDENTIFIER ";" •

    $default  reduce using rule 268 (set_block)
