State 180 conflicts: 1 shift/reduce
State 182 conflicts: 1 shift/reduce
State 183 conflicts: 1 shift/reduce
State 296 conflicts: 1 shift/reduce
State 297 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: callables

    2 type: "const" type_root
    3     | type_root

    4 type_root: non_reference_type
    5          | reference_type

    6 non_reference_type: type_core
    7                   | type_core POINTER_TYPE
    8                   | type_core ARRAYL INT ARRAYR

    9 type_core: TYPENAME type_template_paramaters
   10          | TYPENAME

   11 type_template_paramaters: "!" "(" type_list ")"

   12 type_list: type
   13          | type_list "," type

   14 reference_type: "ref" non_reference_type
   15               | "rref" non_reference_type

   16 expression: assignment_arg_expression
   17           | xvalue_expression "=" rvalue_expression

   18 expression0: expression
   19            | %empty

   20 assignment_arg_expression: xvalue_expression
   21                          | prvalue_expression

   22 prvalue_expression: literal
   23                   | "super"
   24                   | rvalue_expression "+" rvalue_expression
   25                   | rvalue_expression "-" rvalue_expression
   26                   | rvalue_expression "*" rvalue_expression
   27                   | rvalue_expression "/" rvalue_expression
   28                   | rvalue_expression "//" rvalue_expression
   29                   | rvalue_expression "^^" rvalue_expression
   30                   | xvalue_expression "+=" rvalue_expression
   31                   | xvalue_expression "-=" rvalue_expression
   32                   | xvalue_expression "*=" rvalue_expression
   33                   | xvalue_expression "/=" rvalue_expression
   34                   | xvalue_expression "//=" rvalue_expression
   35                   | xvalue_expression "^^=" rvalue_expression
   36                   | rvalue_expression ">" rvalue_expression
   37                   | rvalue_expression ">=" rvalue_expression
   38                   | rvalue_expression "<=" rvalue_expression
   39                   | rvalue_expression "<=>" rvalue_expression
   40                   | rvalue_expression "&&" rvalue_expression
   41                   | rvalue_expression "||" rvalue_expression
   42                   | rvalue_expression "&" rvalue_expression
   43                   | rvalue_expression "^" rvalue_expression
   44                   | rvalue_expression "|" rvalue_expression
   45                   | rvalue_expression "~" rvalue_expression
   46                   | rvalue_expression ">>" rvalue_expression
   47                   | rvalue_expression "<<" rvalue_expression
   48                   | xvalue_expression "&=" rvalue_expression
   49                   | xvalue_expression "^=" rvalue_expression
   50                   | xvalue_expression "|=" rvalue_expression
   51                   | xvalue_expression "~=" rvalue_expression
   52                   | xvalue_expression ">>=" rvalue_expression
   53                   | xvalue_expression "<<=" rvalue_expression
   54                   | rvalue_expression "is" type
   55                   | "!" rvalue_expression
   56                   | "-" rvalue_expression
   57                   | "typeof" "(" rvalue_expression ")"
   58                   | "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | new_expression
   61                   | lambda_expression

   62 rvalue_expression: prvalue_expression
   63                  | xvalue_expression

   64 xvalue_expression: IDENTIFIER
   65                  | "this"
   66                  | "++" xvalue_expression
   67                  | "--" xvalue_expression
   68                  | xvalue_expression "++"
   69                  | xvalue_expression "--"
   70                  | "*" xvalue_expression
   71                  | xvalue_expression "." xvalue_expression
   72                  | xvalue_expression "->" xvalue_expression
   73                  | "(" rvalue_expression ")"
   74                  | "[" array_index_list "]"
   75                  | function_call

   76 literal: BOOL
   77        | NPTR
   78        | INT
   79        | FLOAT
   80        | STRING
   81        | CHAR

   82 variable_declaration: "let" variable_declaration_block_list

   83 variable_declaration_block_list: variable_declaration_block
   84                                | variable_declaration_block_list "," variable_declaration_block

   85 variable_declaration_block: "let" type IDENTIFIER
   86                           | "let" type IDENTIFIER "=" expression

   87 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement

   88 new_expression: "new" type "(" function_call_list ")"
   89               | "new" "heap" type "(" function_call_list ")"

   90 array_index_list: array_index
   91                 | array_index_list "," array_index

   92 array_index: expression
   93            | expression0 ":" expression0

   94 function_call: xvalue_expression "(" function_call_list ")"
   95              | xvalue_expression "(" ")"

   96 function_call_list: function_call_arg
   97                   | function_call_list "," function_call_arg ";"

   98 function_call_arg: expression

   99 statement: block_statement
  100          | loop_statement
  101          | conditional_statement
  102          | exception_statement
  103          | clean_up_statement
  104          | jump_statement
  105          | expression_statement
  106          | variable_declaration_statement
  107          | no_op_statement

  108 block_statement: "{" statements0 "}"

  109 statements0: statements
  110            | %empty

  111 statements: statement
  112           | statements statement

  113 loop_statement: while_loop_statement
  114               | do_loop_statement
  115               | for_loop_statement

  116 while_loop_statement: "while" "(" expression ")" block_statement

  117 do_loop_statement: "do" block_statement "while" "(" expression ")"

  118 for_loop_statement: "for" "(" for_loop_condition ")" block_statement

  119 for_loop_condition: variable_declaration ";" expression0 ";" expression0
  120                   | variable_declaration "in" expression

  121 conditional_statement: if_statement_sequence
  122                      | switch_statement

  123 if_statement_sequence: if_statement else_if_statements0 else_statement0

  124 if_statement: "if" "(" expression ")" block_statement

  125 else_if_statements0: else_if_statements
  126                    | %empty

  127 else_if_statements: else_if_statement
  128                   | else_if_statements else_if_statement

  129 else_if_statement: "else-if" "(" expression ")" block_statement

  130 else_statement0: else_statement
  131                | %empty

  132 else_statement: "else" block_statement

  133 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0

  134 case_blocks0: case_blocks
  135             | %empty

  136 case_blocks: case_block
  137            | case_blocks case_block

  138 case_block: "case" expression ":" block_statement jump_statement

  139 default_block0: default_block
  140               | %empty

  141 default_block: "default" ":" block_statement jump_statement

  142 exception_statement: try_block catch_blocks

  143 try_block: "try" block_statement

  144 catch_blocks: catch_block
  145             | catch_blocks catch_block

  146 catch_block: "catch" "(" variable_declaration ")" block_statement
  147            | "catch-all" block_statement

  148 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"

  149 clean_up_arg: IDENTIFIER
  150             | lambda_expression
  151             | function
  152             | anonymous_function

  153 jump_statement: "return" ";"
  154               | "break" ";"
  155               | "continue" ";"
  156               | "rethrow" ";"
  157               | "throw" expression ";"
  158               | "yield" ";"
  159               | "goto" IDENTIFIER ";"

  160 expression_statement: expression ";"

  161 variable_declaration_statement: variable_declaration ";"

  162 no_op_statement: ";"

  163 function: function_header block_statement

  164 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  165                | "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

  166 function_modifiers: "virtual"
  167                   | "compeval"
  168                   | "static"
  169                   | "static" "compeval"

  170 function_argument_list: function_argument
  171                       | function_argument_list "," function_argument

  172 function_argument: type IDENTIFIER
  173                  | type "..."
  174                  | type IDENTIFIER "=" expression

  175 throwable_expression: "nothrowable"
  176                     | "nothrowable" "(" expression ")"

  177 return_types_list: return_type
  178                  | return_types_list "," return_type

  179 return_type: type
  180            | "typeof" "(" expression ")"

  181 anonymous_function: anonymous_function_header block_statement

  182 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  183                          | "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

  184 operator_overload: operator_overload_header block_statement
  185                  | operator_overload_header "=" function_options ";"

  186 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list

  187 operator: "+"
  188         | "-"
  189         | "*"
  190         | "/"
  191         | "//"
  192         | "^^"
  193         | "%"
  194         | "+="
  195         | "-="
  196         | "*="
  197         | "/="
  198         | "//="
  199         | "^^="
  200         | "%="
  201         | ">"
  202         | ">="
  203         | "<"
  204         | "<="
  205         | "<=>"
  206         | "=="
  207         | "!="
  208         | "^"
  209         | "&"
  210         | "~"
  211         | "<<"
  212         | ">>"
  213         | "="
  214         | "++"
  215         | "--"
  216         | "[" "]"
  217         | "(" ")"
  218         | "->"
  219         | "new"
  220         | type

  221 function_options: "delete"
  222                 | "default"

  223 callable: function
  224         | operator_overload

  225 callables: callable
  226          | callables callable


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <std::string> (258) 64 85 86 148 149 159 164 165 172 174
    TYPENAME <std::string> (259) 9 10
    BOOL <bool> (260) 76
    NPTR <std::nullptr_t> (261) 77
    INT <int> (262) 8 78
    FLOAT <double> (263) 79
    CHAR <char> (264) 81
    STRING <std::string> (265) 80
    "break" (266) 154
    "case" (267) 138
    "castas" (268) 58
    "catch" (269) 146
    "catch-all" (270) 147
    "cleanup" (271) 148
    "const" (272) 2
    "continue" (273) 155
    "compeval" (274) 167 169 182
    "default" (275) 141 222
    "delete" (276) 221
    "do" (277) 117
    "else" (278) 132
    "else-if" (279) 129
    "for" (280) 118
    "func" (281) 164 165 182 183
    "goto" (282) 159
    "heap" (283) 89
    "if" (284) 124
    "in" (285) 120
    "is" (286) 54
    "let" (287) 82 85 86
    "new" (288) 88 89 219
    "nothrowable" (289) 175 176
    "operator" (290) 186
    "ref" (291) 14
    "rref" (292) 15
    "rethrow" (293) 156
    "return" (294) 153
    "static" (295) 168 169
    "super" (296) 23
    "switch" (297) 133
    "this" (298) 65
    "throw" (299) 157
    "try" (300) 143
    "typeof" (301) 57 180
    "virtual" (302) 166
    "while" (303) 116 117
    "yield" (304) 158
    "[" (305) 74 216
    "]" (306) 74 216
    "<" (307) 203
    ">" (308) 36 201
    "," (309) 13 84 91 97 148 171 178
    "+" (310) 24 187
    "-" (311) 25 56 188
    "/" (312) 27 190
    "//" (313) 28 191
    "*" (314) 26 70 189
    "^^" (315) 29 192
    "%" (316) 193
    "+=" (317) 30 194
    "-=" (318) 31 195
    "*=" (319) 32 196
    "/=" (320) 33 197
    "//=" (321) 34 198
    "^^=" (322) 35 199
    "%=" (323) 200
    "<=" (324) 38 204
    ">=" (325) 37 202
    "==" (326) 206
    "!=" (327) 207
    "<=>" (328) 39 205
    "&&" (329) 40
    "||" (330) 41
    "&" (331) 42 209
    "|" (332) 44
    "!" (333) 11 55
    "^" (334) 43 208
    "~" (335) 45 210
    ">>" (336) 46 212
    "<<" (337) 47 211
    "=" (338) 17 86 174 185 213
    "++" (339) 66 68 214
    "--" (340) 67 69 215
    "(" (341) 11 57 58 59 73 87 88 89 94 95 116 117 118 124 129 133 146 148 164 165 176 180 182 183 186 217
    ")" (342) 11 57 58 59 73 87 88 89 94 95 116 117 118 124 129 133 146 148 164 165 176 180 182 183 186 217
    "?" (343) 59
    ":" (344) 59 93 138 141
    "." (345) 71
    "->" (346) 72 87 164 165 182 183 186 218
    "{" (347) 108
    "}" (348) 108
    "=>" (349) 87
    ";" (350) 97 119 148 153 154 155 156 157 158 159 160 161 162 185
    "..." (351) 173
    "&=" (352) 48
    "^=" (353) 49
    "|=" (354) 50
    "~=" (355) 51
    "<<=" (356) 53
    ">>=" (357) 52
    POINTER_TYPE (358) 7
    ARRAYL (359) 8
    ARRAYR (360) 8
    UMINUS (361)
    POSTINC (362)
    POSTDEC (363)
    TERN (364)
    DEREF (365)
    FUNC_CALL (366)


Nonterminals, with rules where they appear

    $accept (112)
        on left: 0
    start (113)
        on left: 1
        on right: 0
    type (114)
        on left: 2 3
        on right: 12 13 54 58 85 86 88 89 172 173 174 179 220
    type_root (115)
        on left: 4 5
        on right: 2 3
    non_reference_type (116)
        on left: 6 7 8
        on right: 4 14 15
    type_core (117)
        on left: 9 10
        on right: 6 7 8
    type_template_paramaters (118)
        on left: 11
        on right: 9
    type_list (119)
        on left: 12 13
        on right: 11 13
    reference_type (120)
        on left: 14 15
        on right: 5
    expression (121)
        on left: 16 17
        on right: 18 86 92 98 116 117 120 124 129 133 138 157 160 174 176 180
    expression0 (122)
        on left: 18 19
        on right: 93 119
    assignment_arg_expression (123)
        on left: 20 21
        on right: 16
    prvalue_expression (124)
        on left: 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
        on right: 21 62
    rvalue_expression (125)
        on left: 62 63
        on right: 17 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 73
    xvalue_expression (126)
        on left: 64 65 66 67 68 69 70 71 72 73 74 75
        on right: 17 20 30 31 32 33 34 35 48 49 50 51 52 53 63 66 67 68 69 70 71 72 94 95
    literal (127)
        on left: 76 77 78 79 80 81
        on right: 22
    variable_declaration (128)
        on left: 82
        on right: 119 120 146 161
    variable_declaration_block_list (129)
        on left: 83 84
        on right: 82 84
    variable_declaration_block (130)
        on left: 85 86
        on right: 83 84
    lambda_expression (131)
        on left: 87
        on right: 61 150
    new_expression (132)
        on left: 88 89
        on right: 60
    array_index_list (133)
        on left: 90 91
        on right: 74 91
    array_index (134)
        on left: 92 93
        on right: 90 91
    function_call (135)
        on left: 94 95
        on right: 75
    function_call_list (136)
        on left: 96 97
        on right: 88 89 94 97
    function_call_arg (137)
        on left: 98
        on right: 96 97
    statement (138)
        on left: 99 100 101 102 103 104 105 106 107
        on right: 111 112
    block_statement (139)
        on left: 108
        on right: 87 99 116 117 118 124 129 132 138 141 143 146 147 163 181 184
    statements0 (140)
        on left: 109 110
        on right: 108
    statements (141)
        on left: 111 112
        on right: 109 112
    loop_statement (142)
        on left: 113 114 115
        on right: 100
    while_loop_statement (143)
        on left: 116
        on right: 113
    do_loop_statement (144)
        on left: 117
        on right: 114
    for_loop_statement (145)
        on left: 118
        on right: 115
    for_loop_condition (146)
        on left: 119 120
        on right: 118
    conditional_statement (147)
        on left: 121 122
        on right: 101
    if_statement_sequence (148)
        on left: 123
        on right: 121
    if_statement (149)
        on left: 124
        on right: 123
    else_if_statements0 (150)
        on left: 125 126
        on right: 123
    else_if_statements (151)
        on left: 127 128
        on right: 125 128
    else_if_statement (152)
        on left: 129
        on right: 127 128
    else_statement0 (153)
        on left: 130 131
        on right: 123
    else_statement (154)
        on left: 132
        on right: 130
    switch_statement (155)
        on left: 133
        on right: 122
    case_blocks0 (156)
        on left: 134 135
        on right: 133
    case_blocks (157)
        on left: 136 137
        on right: 134 137
    case_block (158)
        on left: 138
        on right: 136 137
    default_block0 (159)
        on left: 139 140
        on right: 133
    default_block (160)
        on left: 141
        on right: 139
    exception_statement (161)
        on left: 142
        on right: 102
    try_block (162)
        on left: 143
        on right: 142
    catch_blocks (163)
        on left: 144 145
        on right: 142 145
    catch_block (164)
        on left: 146 147
        on right: 144 145
    clean_up_statement (165)
        on left: 148
        on right: 103
    clean_up_arg (166)
        on left: 149 150 151 152
        on right: 148
    jump_statement (167)
        on left: 153 154 155 156 157 158 159
        on right: 104 138 141
    expression_statement (168)
        on left: 160
        on right: 105
    variable_declaration_statement (169)
        on left: 161
        on right: 106
    no_op_statement (170)
        on left: 162
        on right: 107
    function (171)
        on left: 163
        on right: 151 223
    function_header (172)
        on left: 164 165
        on right: 163
    function_modifiers (173)
        on left: 166 167 168 169
        on right: 164
    function_argument_list (174)
        on left: 170 171
        on right: 87 164 165 171 182 183 186
    function_argument (175)
        on left: 172 173 174
        on right: 170 171
    throwable_expression (176)
        on left: 175 176
        on right: 164 165 182 183 186
    return_types_list (177)
        on left: 177 178
        on right: 87 164 165 178 182 183 186
    return_type (178)
        on left: 179 180
        on right: 177 178
    anonymous_function (179)
        on left: 181
        on right: 152
    anonymous_function_header (180)
        on left: 182 183
        on right: 181
    operator_overload (181)
        on left: 184 185
        on right: 224
    operator_overload_header (182)
        on left: 186
        on right: 184 185
    operator (183)
        on left: 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220
        on right: 186
    function_options (184)
        on left: 221 222
        on right: 185
    callable (185)
        on left: 223 224
        on right: 225 226
    callables (186)
        on left: 225 226
        on right: 1 226


State 0

    0 $accept: • start $end
    1 start: • callables
  163 function: • function_header block_statement
  164 function_header: • "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  165                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  184 operator_overload: • operator_overload_header block_statement
  185                  | • operator_overload_header "=" function_options ";"
  186 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  223 callable: • function
  224         | • operator_overload
  225 callables: • callable
  226          | • callables callable

    "func"      shift, and go to state 1
    "operator"  shift, and go to state 2

    start                     go to state 3
    function                  go to state 4
    function_header           go to state 5
    operator_overload         go to state 6
    operator_overload_header  go to state 7
    callable                  go to state 8
    callables                 go to state 9


State 1

  164 function_header: "func" • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  165                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  166 function_modifiers: • "virtual"
  167                   | • "compeval"
  168                   | • "static"
  169                   | • "static" "compeval"

    IDENTIFIER  shift, and go to state 10
    "compeval"  shift, and go to state 11
    "static"    shift, and go to state 12
    "virtual"   shift, and go to state 13

    function_modifiers  go to state 14


State 2

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  186 operator_overload_header: "operator" • operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  187 operator: • "+"
  188         | • "-"
  189         | • "*"
  190         | • "/"
  191         | • "//"
  192         | • "^^"
  193         | • "%"
  194         | • "+="
  195         | • "-="
  196         | • "*="
  197         | • "/="
  198         | • "//="
  199         | • "^^="
  200         | • "%="
  201         | • ">"
  202         | • ">="
  203         | • "<"
  204         | • "<="
  205         | • "<=>"
  206         | • "=="
  207         | • "!="
  208         | • "^"
  209         | • "&"
  210         | • "~"
  211         | • "<<"
  212         | • ">>"
  213         | • "="
  214         | • "++"
  215         | • "--"
  216         | • "[" "]"
  217         | • "(" ")"
  218         | • "->"
  219         | • "new"
  220         | • type

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "new"     shift, and go to state 17
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "["       shift, and go to state 20
    "<"       shift, and go to state 21
    ">"       shift, and go to state 22
    "+"       shift, and go to state 23
    "-"       shift, and go to state 24
    "/"       shift, and go to state 25
    "//"      shift, and go to state 26
    "*"       shift, and go to state 27
    "^^"      shift, and go to state 28
    "%"       shift, and go to state 29
    "+="      shift, and go to state 30
    "-="      shift, and go to state 31
    "*="      shift, and go to state 32
    "/="      shift, and go to state 33
    "//="     shift, and go to state 34
    "^^="     shift, and go to state 35
    "%="      shift, and go to state 36
    "<="      shift, and go to state 37
    ">="      shift, and go to state 38
    "=="      shift, and go to state 39
    "!="      shift, and go to state 40
    "<=>"     shift, and go to state 41
    "&"       shift, and go to state 42
    "^"       shift, and go to state 43
    "~"       shift, and go to state 44
    ">>"      shift, and go to state 45
    "<<"      shift, and go to state 46
    "="       shift, and go to state 47
    "++"      shift, and go to state 48
    "--"      shift, and go to state 49
    "("       shift, and go to state 50
    "->"      shift, and go to state 51

    type                go to state 52
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    operator            go to state 57


State 3

    0 $accept: start • $end

    $end  shift, and go to state 58


State 4

  223 callable: function •

    $default  reduce using rule 223 (callable)


State 5

  108 block_statement: • "{" statements0 "}"
  163 function: function_header • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 60


State 6

  224 callable: operator_overload •

    $default  reduce using rule 224 (callable)


State 7

  108 block_statement: • "{" statements0 "}"
  184 operator_overload: operator_overload_header • block_statement
  185                  | operator_overload_header • "=" function_options ";"

    "="  shift, and go to state 61
    "{"  shift, and go to state 59

    block_statement  go to state 62


State 8

  225 callables: callable •

    $default  reduce using rule 225 (callables)


State 9

    1 start: callables •  [$end]
  163 function: • function_header block_statement
  164 function_header: • "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  165                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  184 operator_overload: • operator_overload_header block_statement
  185                  | • operator_overload_header "=" function_options ";"
  186 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  223 callable: • function
  224         | • operator_overload
  226 callables: callables • callable

    "func"      shift, and go to state 1
    "operator"  shift, and go to state 2

    $default  reduce using rule 1 (start)

    function                  go to state 4
    function_header           go to state 5
    operator_overload         go to state 6
    operator_overload_header  go to state 7
    callable                  go to state 63


State 10

  165 function_header: "func" IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 64


State 11

  167 function_modifiers: "compeval" •

    $default  reduce using rule 167 (function_modifiers)


State 12

  168 function_modifiers: "static" •  [IDENTIFIER]
  169                   | "static" • "compeval"

    "compeval"  shift, and go to state 65

    $default  reduce using rule 168 (function_modifiers)


State 13

  166 function_modifiers: "virtual" •

    $default  reduce using rule 166 (function_modifiers)


State 14

  164 function_header: "func" function_modifiers • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 66


State 15

    9 type_core: TYPENAME • type_template_paramaters
   10          | TYPENAME •  [IDENTIFIER, "in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", POINTER_TYPE, ARRAYL]
   11 type_template_paramaters: • "!" "(" type_list ")"

    "!"  shift, and go to state 67

    $default  reduce using rule 10 (type_core)

    type_template_paramaters  go to state 68


State 16

    2 type: "const" • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 15
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type_root           go to state 69
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 17

  219 operator: "new" •

    $default  reduce using rule 219 (operator)


State 18

    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: "ref" • non_reference_type

    TYPENAME  shift, and go to state 15

    non_reference_type  go to state 70
    type_core           go to state 55


State 19

    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   15 reference_type: "rref" • non_reference_type

    TYPENAME  shift, and go to state 15

    non_reference_type  go to state 71
    type_core           go to state 55


State 20

  216 operator: "[" • "]"

    "]"  shift, and go to state 72


State 21

  203 operator: "<" •

    $default  reduce using rule 203 (operator)


State 22

  201 operator: ">" •

    $default  reduce using rule 201 (operator)


State 23

  187 operator: "+" •

    $default  reduce using rule 187 (operator)


State 24

  188 operator: "-" •

    $default  reduce using rule 188 (operator)


State 25

  190 operator: "/" •

    $default  reduce using rule 190 (operator)


State 26

  191 operator: "//" •

    $default  reduce using rule 191 (operator)


State 27

  189 operator: "*" •

    $default  reduce using rule 189 (operator)


State 28

  192 operator: "^^" •

    $default  reduce using rule 192 (operator)


State 29

  193 operator: "%" •

    $default  reduce using rule 193 (operator)


State 30

  194 operator: "+=" •

    $default  reduce using rule 194 (operator)


State 31

  195 operator: "-=" •

    $default  reduce using rule 195 (operator)


State 32

  196 operator: "*=" •

    $default  reduce using rule 196 (operator)


State 33

  197 operator: "/=" •

    $default  reduce using rule 197 (operator)


State 34

  198 operator: "//=" •

    $default  reduce using rule 198 (operator)


State 35

  199 operator: "^^=" •

    $default  reduce using rule 199 (operator)


State 36

  200 operator: "%=" •

    $default  reduce using rule 200 (operator)


State 37

  204 operator: "<=" •

    $default  reduce using rule 204 (operator)


State 38

  202 operator: ">=" •

    $default  reduce using rule 202 (operator)


State 39

  206 operator: "==" •

    $default  reduce using rule 206 (operator)


State 40

  207 operator: "!=" •

    $default  reduce using rule 207 (operator)


State 41

  205 operator: "<=>" •

    $default  reduce using rule 205 (operator)


State 42

  209 operator: "&" •

    $default  reduce using rule 209 (operator)


State 43

  208 operator: "^" •

    $default  reduce using rule 208 (operator)


State 44

  210 operator: "~" •

    $default  reduce using rule 210 (operator)


State 45

  212 operator: ">>" •

    $default  reduce using rule 212 (operator)


State 46

  211 operator: "<<" •

    $default  reduce using rule 211 (operator)


State 47

  213 operator: "=" •

    $default  reduce using rule 213 (operator)


State 48

  214 operator: "++" •

    $default  reduce using rule 214 (operator)


State 49

  215 operator: "--" •

    $default  reduce using rule 215 (operator)


State 50

  217 operator: "(" • ")"

    ")"  shift, and go to state 73


State 51

  218 operator: "->" •

    $default  reduce using rule 218 (operator)


State 52

  220 operator: type •

    $default  reduce using rule 220 (operator)


State 53

    3 type: type_root •

    $default  reduce using rule 3 (type)


State 54

    4 type_root: non_reference_type •

    $default  reduce using rule 4 (type_root)


State 55

    6 non_reference_type: type_core •  [IDENTIFIER, "in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "..."]
    7                   | type_core • POINTER_TYPE
    8                   | type_core • ARRAYL INT ARRAYR

    POINTER_TYPE  shift, and go to state 74
    ARRAYL        shift, and go to state 75

    $default  reduce using rule 6 (non_reference_type)


State 56

    5 type_root: reference_type •

    $default  reduce using rule 5 (type_root)


State 57

  186 operator_overload_header: "operator" operator • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 76


State 58

    0 $accept: start $end •

    $default  accept


State 59

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   82 variable_declaration: • "let" variable_declaration_block_list
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
   99 statement: • block_statement
  100          | • loop_statement
  101          | • conditional_statement
  102          | • exception_statement
  103          | • clean_up_statement
  104          | • jump_statement
  105          | • expression_statement
  106          | • variable_declaration_statement
  107          | • no_op_statement
  108 block_statement: • "{" statements0 "}"
  108                | "{" • statements0 "}"
  109 statements0: • statements
  110            | • %empty  ["}"]
  111 statements: • statement
  112           | • statements statement
  113 loop_statement: • while_loop_statement
  114               | • do_loop_statement
  115               | • for_loop_statement
  116 while_loop_statement: • "while" "(" expression ")" block_statement
  117 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  118 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  121 conditional_statement: • if_statement_sequence
  122                      | • switch_statement
  123 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  124 if_statement: • "if" "(" expression ")" block_statement
  133 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  142 exception_statement: • try_block catch_blocks
  143 try_block: • "try" block_statement
  148 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  153 jump_statement: • "return" ";"
  154               | • "break" ";"
  155               | • "continue" ";"
  156               | • "rethrow" ";"
  157               | • "throw" expression ";"
  158               | • "yield" ";"
  159               | • "goto" IDENTIFIER ";"
  160 expression_statement: • expression ";"
  161 variable_declaration_statement: • variable_declaration ";"
  162 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "break"     shift, and go to state 84
    "castas"    shift, and go to state 85
    "cleanup"   shift, and go to state 86
    "continue"  shift, and go to state 87
    "do"        shift, and go to state 88
    "for"       shift, and go to state 89
    "goto"      shift, and go to state 90
    "if"        shift, and go to state 91
    "let"       shift, and go to state 92
    "new"       shift, and go to state 93
    "rethrow"   shift, and go to state 94
    "return"    shift, and go to state 95
    "super"     shift, and go to state 96
    "switch"    shift, and go to state 97
    "this"      shift, and go to state 98
    "throw"     shift, and go to state 99
    "try"       shift, and go to state 100
    "typeof"    shift, and go to state 101
    "while"     shift, and go to state 102
    "yield"     shift, and go to state 103
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110
    "{"         shift, and go to state 59
    ";"         shift, and go to state 111

    $default  reduce using rule 110 (statements0)

    expression                      go to state 112
    assignment_arg_expression       go to state 113
    prvalue_expression              go to state 114
    rvalue_expression               go to state 115
    xvalue_expression               go to state 116
    literal                         go to state 117
    variable_declaration            go to state 118
    lambda_expression               go to state 119
    new_expression                  go to state 120
    function_call                   go to state 121
    statement                       go to state 122
    block_statement                 go to state 123
    statements0                     go to state 124
    statements                      go to state 125
    loop_statement                  go to state 126
    while_loop_statement            go to state 127
    do_loop_statement               go to state 128
    for_loop_statement              go to state 129
    conditional_statement           go to state 130
    if_statement_sequence           go to state 131
    if_statement                    go to state 132
    switch_statement                go to state 133
    exception_statement             go to state 134
    try_block                       go to state 135
    clean_up_statement              go to state 136
    jump_statement                  go to state 137
    expression_statement            go to state 138
    variable_declaration_statement  go to state 139
    no_op_statement                 go to state 140


State 60

  163 function: function_header block_statement •

    $default  reduce using rule 163 (function)


State 61

  185 operator_overload: operator_overload_header "=" • function_options ";"
  221 function_options: • "delete"
  222                 | • "default"

    "default"  shift, and go to state 141
    "delete"   shift, and go to state 142

    function_options  go to state 143


State 62

  184 operator_overload: operator_overload_header block_statement •

    $default  reduce using rule 184 (operator_overload)


State 63

  226 callables: callables callable •

    $default  reduce using rule 226 (callables)


State 64

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  165 function_header: "func" IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    function_argument_list  go to state 145
    function_argument       go to state 146


State 65

  169 function_modifiers: "static" "compeval" •

    $default  reduce using rule 169 (function_modifiers)


State 66

  164 function_header: "func" function_modifiers IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 147


State 67

   11 type_template_paramaters: "!" • "(" type_list ")"

    "("  shift, and go to state 148


State 68

    9 type_core: TYPENAME type_template_paramaters •

    $default  reduce using rule 9 (type_core)


State 69

    2 type: "const" type_root •

    $default  reduce using rule 2 (type)


State 70

   14 reference_type: "ref" non_reference_type •

    $default  reduce using rule 14 (reference_type)


State 71

   15 reference_type: "rref" non_reference_type •

    $default  reduce using rule 15 (reference_type)


State 72

  216 operator: "[" "]" •

    $default  reduce using rule 216 (operator)


State 73

  217 operator: "(" ")" •

    $default  reduce using rule 217 (operator)


State 74

    7 non_reference_type: type_core POINTER_TYPE •

    $default  reduce using rule 7 (non_reference_type)


State 75

    8 non_reference_type: type_core ARRAYL • INT ARRAYR

    INT  shift, and go to state 149


State 76

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression
  186 operator_overload_header: "operator" operator "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    function_argument_list  go to state 150
    function_argument       go to state 146


State 77

   64 xvalue_expression: IDENTIFIER •

    $default  reduce using rule 64 (xvalue_expression)


State 78

   76 literal: BOOL •

    $default  reduce using rule 76 (literal)


State 79

   77 literal: NPTR •

    $default  reduce using rule 77 (literal)


State 80

   78 literal: INT •

    $default  reduce using rule 78 (literal)


State 81

   79 literal: FLOAT •

    $default  reduce using rule 79 (literal)


State 82

   81 literal: CHAR •

    $default  reduce using rule 81 (literal)


State 83

   80 literal: STRING •

    $default  reduce using rule 80 (literal)


State 84

  154 jump_statement: "break" • ";"

    ";"  shift, and go to state 151


State 85

   58 prvalue_expression: "castas" • "(" type ")" "(" rvalue_expression ")"

    "("  shift, and go to state 152


State 86

  148 clean_up_statement: "cleanup" • "(" IDENTIFIER "," clean_up_arg ")" ";"

    "("  shift, and go to state 153


State 87

  155 jump_statement: "continue" • ";"

    ";"  shift, and go to state 154


State 88

  108 block_statement: • "{" statements0 "}"
  117 do_loop_statement: "do" • block_statement "while" "(" expression ")"

    "{"  shift, and go to state 59

    block_statement  go to state 155


State 89

  118 for_loop_statement: "for" • "(" for_loop_condition ")" block_statement

    "("  shift, and go to state 156


State 90

  159 jump_statement: "goto" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 157


State 91

  124 if_statement: "if" • "(" expression ")" block_statement

    "("  shift, and go to state 158


State 92

   82 variable_declaration: "let" • variable_declaration_block_list
   83 variable_declaration_block_list: • variable_declaration_block
   84                                | • variable_declaration_block_list "," variable_declaration_block
   85 variable_declaration_block: • "let" type IDENTIFIER
   86                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 159

    variable_declaration_block_list  go to state 160
    variable_declaration_block       go to state 161


State 93

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   88 new_expression: "new" • type "(" function_call_list ")"
   89               | "new" • "heap" type "(" function_call_list ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "heap"    shift, and go to state 162
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 163
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 94

  156 jump_statement: "rethrow" • ";"

    ";"  shift, and go to state 164


State 95

  153 jump_statement: "return" • ";"

    ";"  shift, and go to state 165


State 96

   23 prvalue_expression: "super" •

    $default  reduce using rule 23 (prvalue_expression)


State 97

  133 switch_statement: "switch" • "(" expression ")" case_blocks0 default_block0

    "("  shift, and go to state 166


State 98

   65 xvalue_expression: "this" •

    $default  reduce using rule 65 (xvalue_expression)


State 99

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  157 jump_statement: "throw" • expression ";"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 167
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 100

  108 block_statement: • "{" statements0 "}"
  143 try_block: "try" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 168


State 101

   57 prvalue_expression: "typeof" • "(" rvalue_expression ")"

    "("  shift, and go to state 169


State 102

  116 while_loop_statement: "while" • "(" expression ")" block_statement

    "("  shift, and go to state 170


State 103

  158 jump_statement: "yield" • ";"

    ";"  shift, and go to state 171


State 104

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   18 expression0: • expression
   19            | • %empty  [":"]
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   74                  | "[" • array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   90 array_index_list: • array_index
   91                 | • array_index_list "," array_index
   92 array_index: • expression
   93            | • expression0 ":" expression0
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    $default  reduce using rule 19 (expression0)

    expression                 go to state 172
    expression0                go to state 173
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    array_index_list           go to state 174
    array_index                go to state 175
    function_call              go to state 121


State 105

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   56                   | "-" • rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 177
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 106

   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   70                  | "*" • xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    "this"      shift, and go to state 98
    "["         shift, and go to state 104
    "*"         shift, and go to state 106
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 179

    xvalue_expression  go to state 180
    function_call      go to state 121


State 107

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   55                   | "!" • rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 181
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 108

   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   66                  | "++" • xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    "this"      shift, and go to state 98
    "["         shift, and go to state 104
    "*"         shift, and go to state 106
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 179

    xvalue_expression  go to state 182
    function_call      go to state 121


State 109

   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   67                  | "--" • xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    "this"      shift, and go to state 98
    "["         shift, and go to state 104
    "*"         shift, and go to state 106
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 179

    xvalue_expression  go to state 183
    function_call      go to state 121


State 110

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   59                   | "(" • rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   73                  | "(" • rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   87                  | "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 77
    TYPENAME    shift, and go to state 15
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "const"     shift, and go to state 16
    "new"       shift, and go to state 93
    "ref"       shift, and go to state 18
    "rref"      shift, and go to state 19
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    prvalue_expression      go to state 176
    rvalue_expression       go to state 184
    xvalue_expression       go to state 178
    literal                 go to state 117
    lambda_expression       go to state 119
    new_expression          go to state 120
    function_call           go to state 121
    function_argument_list  go to state 185
    function_argument       go to state 146


State 111

  162 no_op_statement: ";" •

    $default  reduce using rule 162 (no_op_statement)


State 112

  160 expression_statement: expression • ";"

    ";"  shift, and go to state 186


State 113

   16 expression: assignment_arg_expression •

    $default  reduce using rule 16 (expression)


State 114

   21 assignment_arg_expression: prvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62 rvalue_expression: prvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]

    "in"      reduce using rule 21 (assignment_arg_expression)
    "]"       reduce using rule 21 (assignment_arg_expression)
    ","       reduce using rule 21 (assignment_arg_expression)
    ")"       reduce using rule 21 (assignment_arg_expression)
    ":"       reduce using rule 21 (assignment_arg_expression)
    ";"       reduce using rule 21 (assignment_arg_expression)
    $default  reduce using rule 62 (rvalue_expression)


State 115

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205


State 116

   17 expression: xvalue_expression • "=" rvalue_expression
   20 assignment_arg_expression: xvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   30 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   31                   | xvalue_expression • "-=" rvalue_expression
   32                   | xvalue_expression • "*=" rvalue_expression
   33                   | xvalue_expression • "/=" rvalue_expression
   34                   | xvalue_expression • "//=" rvalue_expression
   35                   | xvalue_expression • "^^=" rvalue_expression
   48                   | xvalue_expression • "&=" rvalue_expression
   49                   | xvalue_expression • "^=" rvalue_expression
   50                   | xvalue_expression • "|=" rvalue_expression
   51                   | xvalue_expression • "~=" rvalue_expression
   52                   | xvalue_expression • ">>=" rvalue_expression
   53                   | xvalue_expression • "<<=" rvalue_expression
   63 rvalue_expression: xvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]
   68 xvalue_expression: xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   71                  | xvalue_expression • "." xvalue_expression
   72                  | xvalue_expression • "->" xvalue_expression
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 206
    "-="   shift, and go to state 207
    "*="   shift, and go to state 208
    "/="   shift, and go to state 209
    "//="  shift, and go to state 210
    "^^="  shift, and go to state 211
    "="    shift, and go to state 212
    "++"   shift, and go to state 213
    "--"   shift, and go to state 214
    "("    shift, and go to state 215
    "."    shift, and go to state 216
    "->"   shift, and go to state 217
    "&="   shift, and go to state 218
    "^="   shift, and go to state 219
    "|="   shift, and go to state 220
    "~="   shift, and go to state 221
    "<<="  shift, and go to state 222
    ">>="  shift, and go to state 223

    "in"      reduce using rule 20 (assignment_arg_expression)
    "]"       reduce using rule 20 (assignment_arg_expression)
    ","       reduce using rule 20 (assignment_arg_expression)
    ")"       reduce using rule 20 (assignment_arg_expression)
    ":"       reduce using rule 20 (assignment_arg_expression)
    ";"       reduce using rule 20 (assignment_arg_expression)
    $default  reduce using rule 63 (rvalue_expression)


State 117

   22 prvalue_expression: literal •

    $default  reduce using rule 22 (prvalue_expression)


State 118

  161 variable_declaration_statement: variable_declaration • ";"

    ";"  shift, and go to state 224


State 119

   61 prvalue_expression: lambda_expression •

    $default  reduce using rule 61 (prvalue_expression)


State 120

   60 prvalue_expression: new_expression •

    $default  reduce using rule 60 (prvalue_expression)


State 121

   75 xvalue_expression: function_call •

    $default  reduce using rule 75 (xvalue_expression)


State 122

  111 statements: statement •

    $default  reduce using rule 111 (statements)


State 123

   99 statement: block_statement •

    $default  reduce using rule 99 (statement)


State 124

  108 block_statement: "{" statements0 • "}"

    "}"  shift, and go to state 225


State 125

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   82 variable_declaration: • "let" variable_declaration_block_list
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
   99 statement: • block_statement
  100          | • loop_statement
  101          | • conditional_statement
  102          | • exception_statement
  103          | • clean_up_statement
  104          | • jump_statement
  105          | • expression_statement
  106          | • variable_declaration_statement
  107          | • no_op_statement
  108 block_statement: • "{" statements0 "}"
  109 statements0: statements •  ["}"]
  112 statements: statements • statement
  113 loop_statement: • while_loop_statement
  114               | • do_loop_statement
  115               | • for_loop_statement
  116 while_loop_statement: • "while" "(" expression ")" block_statement
  117 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  118 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  121 conditional_statement: • if_statement_sequence
  122                      | • switch_statement
  123 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  124 if_statement: • "if" "(" expression ")" block_statement
  133 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  142 exception_statement: • try_block catch_blocks
  143 try_block: • "try" block_statement
  148 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  153 jump_statement: • "return" ";"
  154               | • "break" ";"
  155               | • "continue" ";"
  156               | • "rethrow" ";"
  157               | • "throw" expression ";"
  158               | • "yield" ";"
  159               | • "goto" IDENTIFIER ";"
  160 expression_statement: • expression ";"
  161 variable_declaration_statement: • variable_declaration ";"
  162 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "break"     shift, and go to state 84
    "castas"    shift, and go to state 85
    "cleanup"   shift, and go to state 86
    "continue"  shift, and go to state 87
    "do"        shift, and go to state 88
    "for"       shift, and go to state 89
    "goto"      shift, and go to state 90
    "if"        shift, and go to state 91
    "let"       shift, and go to state 92
    "new"       shift, and go to state 93
    "rethrow"   shift, and go to state 94
    "return"    shift, and go to state 95
    "super"     shift, and go to state 96
    "switch"    shift, and go to state 97
    "this"      shift, and go to state 98
    "throw"     shift, and go to state 99
    "try"       shift, and go to state 100
    "typeof"    shift, and go to state 101
    "while"     shift, and go to state 102
    "yield"     shift, and go to state 103
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110
    "{"         shift, and go to state 59
    ";"         shift, and go to state 111

    $default  reduce using rule 109 (statements0)

    expression                      go to state 112
    assignment_arg_expression       go to state 113
    prvalue_expression              go to state 114
    rvalue_expression               go to state 115
    xvalue_expression               go to state 116
    literal                         go to state 117
    variable_declaration            go to state 118
    lambda_expression               go to state 119
    new_expression                  go to state 120
    function_call                   go to state 121
    statement                       go to state 226
    block_statement                 go to state 123
    loop_statement                  go to state 126
    while_loop_statement            go to state 127
    do_loop_statement               go to state 128
    for_loop_statement              go to state 129
    conditional_statement           go to state 130
    if_statement_sequence           go to state 131
    if_statement                    go to state 132
    switch_statement                go to state 133
    exception_statement             go to state 134
    try_block                       go to state 135
    clean_up_statement              go to state 136
    jump_statement                  go to state 137
    expression_statement            go to state 138
    variable_declaration_statement  go to state 139
    no_op_statement                 go to state 140


State 126

  100 statement: loop_statement •

    $default  reduce using rule 100 (statement)


State 127

  113 loop_statement: while_loop_statement •

    $default  reduce using rule 113 (loop_statement)


State 128

  114 loop_statement: do_loop_statement •

    $default  reduce using rule 114 (loop_statement)


State 129

  115 loop_statement: for_loop_statement •

    $default  reduce using rule 115 (loop_statement)


State 130

  101 statement: conditional_statement •

    $default  reduce using rule 101 (statement)


State 131

  121 conditional_statement: if_statement_sequence •

    $default  reduce using rule 121 (conditional_statement)


State 132

  123 if_statement_sequence: if_statement • else_if_statements0 else_statement0
  125 else_if_statements0: • else_if_statements
  126                    | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  127 else_if_statements: • else_if_statement
  128                   | • else_if_statements else_if_statement
  129 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 227

    $default  reduce using rule 126 (else_if_statements0)

    else_if_statements0  go to state 228
    else_if_statements   go to state 229
    else_if_statement    go to state 230


State 133

  122 conditional_statement: switch_statement •

    $default  reduce using rule 122 (conditional_statement)


State 134

  102 statement: exception_statement •

    $default  reduce using rule 102 (statement)


State 135

  142 exception_statement: try_block • catch_blocks
  144 catch_blocks: • catch_block
  145             | • catch_blocks catch_block
  146 catch_block: • "catch" "(" variable_declaration ")" block_statement
  147            | • "catch-all" block_statement

    "catch"      shift, and go to state 231
    "catch-all"  shift, and go to state 232

    catch_blocks  go to state 233
    catch_block   go to state 234


State 136

  103 statement: clean_up_statement •

    $default  reduce using rule 103 (statement)


State 137

  104 statement: jump_statement •

    $default  reduce using rule 104 (statement)


State 138

  105 statement: expression_statement •

    $default  reduce using rule 105 (statement)


State 139

  106 statement: variable_declaration_statement •

    $default  reduce using rule 106 (statement)


State 140

  107 statement: no_op_statement •

    $default  reduce using rule 107 (statement)


State 141

  222 function_options: "default" •

    $default  reduce using rule 222 (function_options)


State 142

  221 function_options: "delete" •

    $default  reduce using rule 221 (function_options)


State 143

  185 operator_overload: operator_overload_header "=" function_options • ";"

    ";"  shift, and go to state 235


State 144

  172 function_argument: type • IDENTIFIER
  173                  | type • "..."
  174                  | type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 236
    "..."       shift, and go to state 237


State 145

  165 function_header: "func" IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  171 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 238
    ")"  shift, and go to state 239


State 146

  170 function_argument_list: function_argument •

    $default  reduce using rule 170 (function_argument_list)


State 147

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  164 function_header: "func" function_modifiers IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    function_argument_list  go to state 240
    function_argument       go to state 146


State 148

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   11 type_template_paramaters: "!" "(" • type_list ")"
   12 type_list: • type
   13          | • type_list "," type
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 241
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    type_list           go to state 242
    reference_type      go to state 56


State 149

    8 non_reference_type: type_core ARRAYL INT • ARRAYR

    ARRAYR  shift, and go to state 243


State 150

  171 function_argument_list: function_argument_list • "," function_argument
  186 operator_overload_header: "operator" operator "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 238
    ")"  shift, and go to state 244


State 151

  154 jump_statement: "break" ";" •

    $default  reduce using rule 154 (jump_statement)


State 152

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   58 prvalue_expression: "castas" "(" • type ")" "(" rvalue_expression ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 245
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 153

  148 clean_up_statement: "cleanup" "(" • IDENTIFIER "," clean_up_arg ")" ";"

    IDENTIFIER  shift, and go to state 246


State 154

  155 jump_statement: "continue" ";" •

    $default  reduce using rule 155 (jump_statement)


State 155

  117 do_loop_statement: "do" block_statement • "while" "(" expression ")"

    "while"  shift, and go to state 247


State 156

   82 variable_declaration: • "let" variable_declaration_block_list
  118 for_loop_statement: "for" "(" • for_loop_condition ")" block_statement
  119 for_loop_condition: • variable_declaration ";" expression0 ";" expression0
  120                   | • variable_declaration "in" expression

    "let"  shift, and go to state 92

    variable_declaration  go to state 248
    for_loop_condition    go to state 249


State 157

  159 jump_statement: "goto" IDENTIFIER • ";"

    ";"  shift, and go to state 250


State 158

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  124 if_statement: "if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 251
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 159

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   85 variable_declaration_block: "let" • type IDENTIFIER
   86                           | "let" • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 252
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 160

   82 variable_declaration: "let" variable_declaration_block_list •  ["in", ")", ";"]
   84 variable_declaration_block_list: variable_declaration_block_list • "," variable_declaration_block

    ","  shift, and go to state 253

    $default  reduce using rule 82 (variable_declaration)


State 161

   83 variable_declaration_block_list: variable_declaration_block •

    $default  reduce using rule 83 (variable_declaration_block_list)


State 162

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   89 new_expression: "new" "heap" • type "(" function_call_list ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 254
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 163

   88 new_expression: "new" type • "(" function_call_list ")"

    "("  shift, and go to state 255


State 164

  156 jump_statement: "rethrow" ";" •

    $default  reduce using rule 156 (jump_statement)


State 165

  153 jump_statement: "return" ";" •

    $default  reduce using rule 153 (jump_statement)


State 166

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  133 switch_statement: "switch" "(" • expression ")" case_blocks0 default_block0

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 256
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 167

  157 jump_statement: "throw" expression • ";"

    ";"  shift, and go to state 257


State 168

  143 try_block: "try" block_statement •

    $default  reduce using rule 143 (try_block)


State 169

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   57                   | "typeof" "(" • rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 258
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 170

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  116 while_loop_statement: "while" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 259
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 171

  158 jump_statement: "yield" ";" •

    $default  reduce using rule 158 (jump_statement)


State 172

   18 expression0: expression •  [":"]
   92 array_index: expression •  ["]", ","]

    ":"       reduce using rule 18 (expression0)
    $default  reduce using rule 92 (array_index)


State 173

   93 array_index: expression0 • ":" expression0

    ":"  shift, and go to state 260


State 174

   74 xvalue_expression: "[" array_index_list • "]"
   91 array_index_list: array_index_list • "," array_index

    "]"  shift, and go to state 261
    ","  shift, and go to state 262


State 175

   90 array_index_list: array_index •

    $default  reduce using rule 90 (array_index_list)


State 176

   62 rvalue_expression: prvalue_expression •

    $default  reduce using rule 62 (rvalue_expression)


State 177

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   56                   | "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 203

    $default  reduce using rule 56 (prvalue_expression)

    Conflict between rule 56 and token "is" resolved as reduce ("is" < UMINUS).
    Conflict between rule 56 and token ">" resolved as reduce (">" < UMINUS).
    Conflict between rule 56 and token "+" resolved as reduce ("+" < UMINUS).
    Conflict between rule 56 and token "-" resolved as reduce ("-" < UMINUS).
    Conflict between rule 56 and token "/" resolved as reduce ("/" < UMINUS).
    Conflict between rule 56 and token "//" resolved as reduce ("//" < UMINUS).
    Conflict between rule 56 and token "*" resolved as reduce ("*" < UMINUS).
    Conflict between rule 56 and token "^^" resolved as reduce ("^^" < UMINUS).
    Conflict between rule 56 and token "<=" resolved as reduce ("<=" < UMINUS).
    Conflict between rule 56 and token ">=" resolved as reduce (">=" < UMINUS).
    Conflict between rule 56 and token "<=>" resolved as reduce ("<=>" < UMINUS).
    Conflict between rule 56 and token "&&" resolved as reduce ("&&" < UMINUS).
    Conflict between rule 56 and token "||" resolved as reduce ("||" < UMINUS).
    Conflict between rule 56 and token "&" resolved as reduce ("&" < UMINUS).
    Conflict between rule 56 and token "|" resolved as reduce ("|" < UMINUS).
    Conflict between rule 56 and token "^" resolved as reduce ("^" < UMINUS).
    Conflict between rule 56 and token "~" resolved as shift (%right "~").
    Conflict between rule 56 and token ">>" resolved as reduce (">>" < UMINUS).
    Conflict between rule 56 and token "<<" resolved as reduce ("<<" < UMINUS).


State 178

   30 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   31                   | xvalue_expression • "-=" rvalue_expression
   32                   | xvalue_expression • "*=" rvalue_expression
   33                   | xvalue_expression • "/=" rvalue_expression
   34                   | xvalue_expression • "//=" rvalue_expression
   35                   | xvalue_expression • "^^=" rvalue_expression
   48                   | xvalue_expression • "&=" rvalue_expression
   49                   | xvalue_expression • "^=" rvalue_expression
   50                   | xvalue_expression • "|=" rvalue_expression
   51                   | xvalue_expression • "~=" rvalue_expression
   52                   | xvalue_expression • ">>=" rvalue_expression
   53                   | xvalue_expression • "<<=" rvalue_expression
   63 rvalue_expression: xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", ")", ":", ";"]
   68 xvalue_expression: xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   71                  | xvalue_expression • "." xvalue_expression
   72                  | xvalue_expression • "->" xvalue_expression
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 206
    "-="   shift, and go to state 207
    "*="   shift, and go to state 208
    "/="   shift, and go to state 209
    "//="  shift, and go to state 210
    "^^="  shift, and go to state 211
    "++"   shift, and go to state 213
    "--"   shift, and go to state 214
    "("    shift, and go to state 215
    "."    shift, and go to state 216
    "->"   shift, and go to state 217
    "&="   shift, and go to state 218
    "^="   shift, and go to state 219
    "|="   shift, and go to state 220
    "~="   shift, and go to state 221
    "<<="  shift, and go to state 222
    ">>="  shift, and go to state 223

    $default  reduce using rule 63 (rvalue_expression)


State 179

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   73                  | "(" • rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 263
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 180

   68 xvalue_expression: xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   70                  | "*" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   71                  | xvalue_expression • "." xvalue_expression
   72                  | xvalue_expression • "->" xvalue_expression
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 213
    "--"  shift, and go to state 214
    "("   shift, and go to state 215
    "."   shift, and go to state 216
    "->"  shift, and go to state 217

    "("       [reduce using rule 70 (xvalue_expression)]
    $default  reduce using rule 70 (xvalue_expression)

    Conflict between rule 70 and token "++" resolved as shift (%right "++").
    Conflict between rule 70 and token "--" resolved as shift (%right "--").
    Conflict between rule 70 and token "." resolved as shift (DEREF < ".").
    Conflict between rule 70 and token "->" resolved as shift (DEREF < "->").

    shift/reduce conflict on token "(":
       70 xvalue_expression: "*" xvalue_expression •
       94 function_call: xvalue_expression • "(" function_call_list ")"
      Example: "*" xvalue_expression • "(" function_call_list ")"
      Shift derivation
        xvalue_expression
        ↳ "*" xvalue_expression
              ↳ function_call
                ↳ xvalue_expression • "(" function_call_list ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression         "(" function_call_list ")"
            ↳ "*" xvalue_expression •

    shift/reduce conflict on token "(":
       70 xvalue_expression: "*" xvalue_expression •
       95 function_call: xvalue_expression • "(" ")"
      Example: "*" xvalue_expression • "(" ")"
      Shift derivation
        xvalue_expression
        ↳ "*" xvalue_expression
              ↳ function_call
                ↳ xvalue_expression • "(" ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression         "(" ")"
            ↳ "*" xvalue_expression •



State 181

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   55                   | "!" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 203

    $default  reduce using rule 55 (prvalue_expression)

    Conflict between rule 55 and token "is" resolved as reduce ("is" < "!").
    Conflict between rule 55 and token ">" resolved as reduce (">" < "!").
    Conflict between rule 55 and token "+" resolved as reduce ("+" < "!").
    Conflict between rule 55 and token "-" resolved as reduce ("-" < "!").
    Conflict between rule 55 and token "/" resolved as reduce ("/" < "!").
    Conflict between rule 55 and token "//" resolved as reduce ("//" < "!").
    Conflict between rule 55 and token "*" resolved as reduce ("*" < "!").
    Conflict between rule 55 and token "^^" resolved as reduce ("^^" < "!").
    Conflict between rule 55 and token "<=" resolved as reduce ("<=" < "!").
    Conflict between rule 55 and token ">=" resolved as reduce (">=" < "!").
    Conflict between rule 55 and token "<=>" resolved as reduce ("<=>" < "!").
    Conflict between rule 55 and token "&&" resolved as reduce ("&&" < "!").
    Conflict between rule 55 and token "||" resolved as reduce ("||" < "!").
    Conflict between rule 55 and token "&" resolved as reduce ("&" < "!").
    Conflict between rule 55 and token "|" resolved as reduce ("|" < "!").
    Conflict between rule 55 and token "^" resolved as reduce ("^" < "!").
    Conflict between rule 55 and token "~" resolved as shift (%right "~").
    Conflict between rule 55 and token ">>" resolved as reduce (">>" < "!").
    Conflict between rule 55 and token "<<" resolved as reduce ("<<" < "!").


State 182

   66 xvalue_expression: "++" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   68                  | xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   71                  | xvalue_expression • "." xvalue_expression
   72                  | xvalue_expression • "->" xvalue_expression
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 213
    "--"  shift, and go to state 214
    "("   shift, and go to state 215
    "."   shift, and go to state 216
    "->"  shift, and go to state 217

    "("       [reduce using rule 66 (xvalue_expression)]
    $default  reduce using rule 66 (xvalue_expression)

    Conflict between rule 66 and token "++" resolved as shift (%right "++").
    Conflict between rule 66 and token "--" resolved as shift (%right "--").
    Conflict between rule 66 and token "." resolved as shift ("++" < ".").
    Conflict between rule 66 and token "->" resolved as shift ("++" < "->").

    shift/reduce conflict on token "(":
       66 xvalue_expression: "++" xvalue_expression •
       94 function_call: xvalue_expression • "(" function_call_list ")"
      Example: "++" xvalue_expression • "(" function_call_list ")"
      Shift derivation
        xvalue_expression
        ↳ "++" xvalue_expression
               ↳ function_call
                 ↳ xvalue_expression • "(" function_call_list ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression          "(" function_call_list ")"
            ↳ "++" xvalue_expression •

    shift/reduce conflict on token "(":
       66 xvalue_expression: "++" xvalue_expression •
       95 function_call: xvalue_expression • "(" ")"
      Example: "++" xvalue_expression • "(" ")"
      Shift derivation
        xvalue_expression
        ↳ "++" xvalue_expression
               ↳ function_call
                 ↳ xvalue_expression • "(" ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression          "(" ")"
            ↳ "++" xvalue_expression •



State 183

   67 xvalue_expression: "--" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   68                  | xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   71                  | xvalue_expression • "." xvalue_expression
   72                  | xvalue_expression • "->" xvalue_expression
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 213
    "--"  shift, and go to state 214
    "("   shift, and go to state 215
    "."   shift, and go to state 216
    "->"  shift, and go to state 217

    "("       [reduce using rule 67 (xvalue_expression)]
    $default  reduce using rule 67 (xvalue_expression)

    Conflict between rule 67 and token "++" resolved as shift (%right "++").
    Conflict between rule 67 and token "--" resolved as shift (%right "--").
    Conflict between rule 67 and token "." resolved as shift ("--" < ".").
    Conflict between rule 67 and token "->" resolved as shift ("--" < "->").

    shift/reduce conflict on token "(":
       67 xvalue_expression: "--" xvalue_expression •
       94 function_call: xvalue_expression • "(" function_call_list ")"
      Example: "--" xvalue_expression • "(" function_call_list ")"
      Shift derivation
        xvalue_expression
        ↳ "--" xvalue_expression
               ↳ function_call
                 ↳ xvalue_expression • "(" function_call_list ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression          "(" function_call_list ")"
            ↳ "--" xvalue_expression •

    shift/reduce conflict on token "(":
       67 xvalue_expression: "--" xvalue_expression •
       95 function_call: xvalue_expression • "(" ")"
      Example: "--" xvalue_expression • "(" ")"
      Shift derivation
        xvalue_expression
        ↳ "--" xvalue_expression
               ↳ function_call
                 ↳ xvalue_expression • "(" ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression          "(" ")"
            ↳ "--" xvalue_expression •



State 184

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   59                   | "(" rvalue_expression • ")" "?" rvalue_expression ":" rvalue_expression
   73 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205
    ")"    shift, and go to state 264


State 185

   87 lambda_expression: "(" function_argument_list • ")" "->" return_types_list "=>" block_statement
  171 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 238
    ")"  shift, and go to state 265


State 186

  160 expression_statement: expression ";" •

    $default  reduce using rule 160 (expression_statement)


State 187

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   54 prvalue_expression: rvalue_expression "is" • type

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 266
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 188

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   36                   | rvalue_expression ">" • rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 267
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 189

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   24                   | rvalue_expression "+" • rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 268
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 190

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   25                   | rvalue_expression "-" • rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 269
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 191

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   27                   | rvalue_expression "/" • rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 270
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 192

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   28                   | rvalue_expression "//" • rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 271
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 193

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   26                   | rvalue_expression "*" • rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 272
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 194

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   29                   | rvalue_expression "^^" • rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 273
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 195

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   38                   | rvalue_expression "<=" • rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 274
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 196

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   37                   | rvalue_expression ">=" • rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 275
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 197

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   39                   | rvalue_expression "<=>" • rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 276
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 198

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   40                   | rvalue_expression "&&" • rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 277
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 199

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   41                   | rvalue_expression "||" • rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 278
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 200

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   42                   | rvalue_expression "&" • rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 279
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 201

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   44                   | rvalue_expression "|" • rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 280
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 202

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   43                   | rvalue_expression "^" • rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 281
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 203

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   45                   | rvalue_expression "~" • rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 282
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 204

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   46                   | rvalue_expression ">>" • rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 283
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 205

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   47                   | rvalue_expression "<<" • rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 284
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 206

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   30                   | xvalue_expression "+=" • rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 285
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 207

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   31                   | xvalue_expression "-=" • rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 286
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 208

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   32                   | xvalue_expression "*=" • rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 287
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 209

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   33                   | xvalue_expression "/=" • rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 288
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 210

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   34                   | xvalue_expression "//=" • rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 289
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 211

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   35                   | xvalue_expression "^^=" • rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 290
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 212

   17 expression: xvalue_expression "=" • rvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 291
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 213

   68 xvalue_expression: xvalue_expression "++" •

    $default  reduce using rule 68 (xvalue_expression)


State 214

   69 xvalue_expression: xvalue_expression "--" •

    $default  reduce using rule 69 (xvalue_expression)


State 215

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   94              | xvalue_expression "(" • function_call_list ")"
   95              | • xvalue_expression "(" ")"
   95              | xvalue_expression "(" • ")"
   96 function_call_list: • function_call_arg
   97                   | • function_call_list "," function_call_arg ";"
   98 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110
    ")"         shift, and go to state 292

    expression                 go to state 293
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121
    function_call_list         go to state 294
    function_call_arg          go to state 295


State 216

   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   71                  | xvalue_expression "." • xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    "this"      shift, and go to state 98
    "["         shift, and go to state 104
    "*"         shift, and go to state 106
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 179

    xvalue_expression  go to state 296
    function_call      go to state 121


State 217

   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   72                  | xvalue_expression "->" • xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    "this"      shift, and go to state 98
    "["         shift, and go to state 104
    "*"         shift, and go to state 106
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 179

    xvalue_expression  go to state 297
    function_call      go to state 121


State 218

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   48                   | xvalue_expression "&=" • rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 298
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 219

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   49                   | xvalue_expression "^=" • rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 299
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 220

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   50                   | xvalue_expression "|=" • rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 300
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 221

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   51                   | xvalue_expression "~=" • rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 301
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 222

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   53                   | xvalue_expression "<<=" • rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 302
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 223

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   52                   | xvalue_expression ">>=" • rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 303
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 224

  161 variable_declaration_statement: variable_declaration ";" •

    $default  reduce using rule 161 (variable_declaration_statement)


State 225

  108 block_statement: "{" statements0 "}" •

    $default  reduce using rule 108 (block_statement)


State 226

  112 statements: statements statement •

    $default  reduce using rule 112 (statements)


State 227

  129 else_if_statement: "else-if" • "(" expression ")" block_statement

    "("  shift, and go to state 304


State 228

  123 if_statement_sequence: if_statement else_if_statements0 • else_statement0
  130 else_statement0: • else_statement
  131                | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  132 else_statement: • "else" block_statement

    "else"  shift, and go to state 305

    $default  reduce using rule 131 (else_statement0)

    else_statement0  go to state 306
    else_statement   go to state 307


State 229

  125 else_if_statements0: else_if_statements •  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  128 else_if_statements: else_if_statements • else_if_statement
  129 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 227

    $default  reduce using rule 125 (else_if_statements0)

    else_if_statement  go to state 308


State 230

  127 else_if_statements: else_if_statement •

    $default  reduce using rule 127 (else_if_statements)


State 231

  146 catch_block: "catch" • "(" variable_declaration ")" block_statement

    "("  shift, and go to state 309


State 232

  108 block_statement: • "{" statements0 "}"
  147 catch_block: "catch-all" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 310


State 233

  142 exception_statement: try_block catch_blocks •  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  145 catch_blocks: catch_blocks • catch_block
  146 catch_block: • "catch" "(" variable_declaration ")" block_statement
  147            | • "catch-all" block_statement

    "catch"      shift, and go to state 231
    "catch-all"  shift, and go to state 232

    $default  reduce using rule 142 (exception_statement)

    catch_block  go to state 311


State 234

  144 catch_blocks: catch_block •

    $default  reduce using rule 144 (catch_blocks)


State 235

  185 operator_overload: operator_overload_header "=" function_options ";" •

    $default  reduce using rule 185 (operator_overload)


State 236

  172 function_argument: type IDENTIFIER •  [",", ")"]
  174                  | type IDENTIFIER • "=" expression

    "="  shift, and go to state 312

    $default  reduce using rule 172 (function_argument)


State 237

  173 function_argument: type "..." •

    $default  reduce using rule 173 (function_argument)


State 238

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  171 function_argument_list: function_argument_list "," • function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 144
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    function_argument   go to state 313


State 239

  165 function_header: "func" IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  175 throwable_expression: • "nothrowable"
  176                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 314

    throwable_expression  go to state 315


State 240

  164 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  171 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 238
    ")"  shift, and go to state 316


State 241

   12 type_list: type •

    $default  reduce using rule 12 (type_list)


State 242

   11 type_template_paramaters: "!" "(" type_list • ")"
   13 type_list: type_list • "," type

    ","  shift, and go to state 317
    ")"  shift, and go to state 318


State 243

    8 non_reference_type: type_core ARRAYL INT ARRAYR •

    $default  reduce using rule 8 (non_reference_type)


State 244

  175 throwable_expression: • "nothrowable"
  176                     | • "nothrowable" "(" expression ")"
  186 operator_overload_header: "operator" operator "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 314

    throwable_expression  go to state 319


State 245

   58 prvalue_expression: "castas" "(" type • ")" "(" rvalue_expression ")"

    ")"  shift, and go to state 320


State 246

  148 clean_up_statement: "cleanup" "(" IDENTIFIER • "," clean_up_arg ")" ";"

    ","  shift, and go to state 321


State 247

  117 do_loop_statement: "do" block_statement "while" • "(" expression ")"

    "("  shift, and go to state 322


State 248

  119 for_loop_condition: variable_declaration • ";" expression0 ";" expression0
  120                   | variable_declaration • "in" expression

    "in"  shift, and go to state 323
    ";"   shift, and go to state 324


State 249

  118 for_loop_statement: "for" "(" for_loop_condition • ")" block_statement

    ")"  shift, and go to state 325


State 250

  159 jump_statement: "goto" IDENTIFIER ";" •

    $default  reduce using rule 159 (jump_statement)


State 251

  124 if_statement: "if" "(" expression • ")" block_statement

    ")"  shift, and go to state 326


State 252

   85 variable_declaration_block: "let" type • IDENTIFIER
   86                           | "let" type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 327


State 253

   84 variable_declaration_block_list: variable_declaration_block_list "," • variable_declaration_block
   85 variable_declaration_block: • "let" type IDENTIFIER
   86                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 159

    variable_declaration_block  go to state 328


State 254

   89 new_expression: "new" "heap" type • "(" function_call_list ")"

    "("  shift, and go to state 329


State 255

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   88               | "new" type "(" • function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
   96 function_call_list: • function_call_arg
   97                   | • function_call_list "," function_call_arg ";"
   98 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 293
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121
    function_call_list         go to state 330
    function_call_arg          go to state 295


State 256

  133 switch_statement: "switch" "(" expression • ")" case_blocks0 default_block0

    ")"  shift, and go to state 331


State 257

  157 jump_statement: "throw" expression ";" •

    $default  reduce using rule 157 (jump_statement)


State 258

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   57                   | "typeof" "(" rvalue_expression • ")"

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205
    ")"    shift, and go to state 332


State 259

  116 while_loop_statement: "while" "(" expression • ")" block_statement

    ")"  shift, and go to state 333


State 260

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   18 expression0: • expression
   19            | • %empty  ["]", ","]
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   93 array_index: expression0 ":" • expression0
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    $default  reduce using rule 19 (expression0)

    expression                 go to state 334
    expression0                go to state 335
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 261

   74 xvalue_expression: "[" array_index_list "]" •

    $default  reduce using rule 74 (xvalue_expression)


State 262

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   18 expression0: • expression
   19            | • %empty  [":"]
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   91 array_index_list: array_index_list "," • array_index
   92 array_index: • expression
   93            | • expression0 ":" expression0
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    $default  reduce using rule 19 (expression0)

    expression                 go to state 172
    expression0                go to state 173
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    array_index                go to state 336
    function_call              go to state 121


State 263

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   73 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205
    ")"    shift, and go to state 337


State 264

   59 prvalue_expression: "(" rvalue_expression ")" • "?" rvalue_expression ":" rvalue_expression
   73 xvalue_expression: "(" rvalue_expression ")" •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]

    "?"  shift, and go to state 338

    $default  reduce using rule 73 (xvalue_expression)


State 265

   87 lambda_expression: "(" function_argument_list ")" • "->" return_types_list "=>" block_statement

    "->"  shift, and go to state 339


State 266

   54 prvalue_expression: rvalue_expression "is" type •

    $default  reduce using rule 54 (prvalue_expression)


State 267

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   36                   | rvalue_expression ">" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<=>"  shift, and go to state 197
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 36 (prvalue_expression)

    Conflict between rule 36 and token "is" resolved as reduce ("is" < ">").
    Conflict between rule 36 and token ">" resolved as reduce (%left ">").
    Conflict between rule 36 and token "+" resolved as shift (">" < "+").
    Conflict between rule 36 and token "-" resolved as shift (">" < "-").
    Conflict between rule 36 and token "/" resolved as shift (">" < "/").
    Conflict between rule 36 and token "//" resolved as shift (">" < "//").
    Conflict between rule 36 and token "*" resolved as shift (">" < "*").
    Conflict between rule 36 and token "^^" resolved as shift (">" < "^^").
    Conflict between rule 36 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 36 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 36 and token "<=>" resolved as shift (">" < "<=>").
    Conflict between rule 36 and token "&&" resolved as reduce ("&&" < ">").
    Conflict between rule 36 and token "||" resolved as reduce ("||" < ">").
    Conflict between rule 36 and token "&" resolved as reduce ("&" < ">").
    Conflict between rule 36 and token "|" resolved as reduce ("|" < ">").
    Conflict between rule 36 and token "^" resolved as reduce ("^" < ">").
    Conflict between rule 36 and token "~" resolved as shift (">" < "~").
    Conflict between rule 36 and token ">>" resolved as shift (">" < ">>").
    Conflict between rule 36 and token "<<" resolved as shift (">" < "<<").


State 268

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   24                   | rvalue_expression "+" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "/"   shift, and go to state 191
    "//"  shift, and go to state 192
    "*"   shift, and go to state 193
    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 24 (prvalue_expression)

    Conflict between rule 24 and token "is" resolved as reduce ("is" < "+").
    Conflict between rule 24 and token ">" resolved as reduce (">" < "+").
    Conflict between rule 24 and token "+" resolved as reduce (%left "+").
    Conflict between rule 24 and token "-" resolved as reduce (%left "-").
    Conflict between rule 24 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 24 and token "//" resolved as shift ("+" < "//").
    Conflict between rule 24 and token "*" resolved as shift ("+" < "*").
    Conflict between rule 24 and token "^^" resolved as shift ("+" < "^^").
    Conflict between rule 24 and token "<=" resolved as reduce ("<=" < "+").
    Conflict between rule 24 and token ">=" resolved as reduce (">=" < "+").
    Conflict between rule 24 and token "<=>" resolved as reduce ("<=>" < "+").
    Conflict between rule 24 and token "&&" resolved as reduce ("&&" < "+").
    Conflict between rule 24 and token "||" resolved as reduce ("||" < "+").
    Conflict between rule 24 and token "&" resolved as reduce ("&" < "+").
    Conflict between rule 24 and token "|" resolved as reduce ("|" < "+").
    Conflict between rule 24 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 24 and token "~" resolved as shift ("+" < "~").
    Conflict between rule 24 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 24 and token "<<" resolved as reduce ("<<" < "+").


State 269

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   25                   | rvalue_expression "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "/"   shift, and go to state 191
    "//"  shift, and go to state 192
    "*"   shift, and go to state 193
    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 25 (prvalue_expression)

    Conflict between rule 25 and token "is" resolved as reduce ("is" < "-").
    Conflict between rule 25 and token ">" resolved as reduce (">" < "-").
    Conflict between rule 25 and token "+" resolved as reduce (%left "+").
    Conflict between rule 25 and token "-" resolved as reduce (%left "-").
    Conflict between rule 25 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 25 and token "//" resolved as shift ("-" < "//").
    Conflict between rule 25 and token "*" resolved as shift ("-" < "*").
    Conflict between rule 25 and token "^^" resolved as shift ("-" < "^^").
    Conflict between rule 25 and token "<=" resolved as reduce ("<=" < "-").
    Conflict between rule 25 and token ">=" resolved as reduce (">=" < "-").
    Conflict between rule 25 and token "<=>" resolved as reduce ("<=>" < "-").
    Conflict between rule 25 and token "&&" resolved as reduce ("&&" < "-").
    Conflict between rule 25 and token "||" resolved as reduce ("||" < "-").
    Conflict between rule 25 and token "&" resolved as reduce ("&" < "-").
    Conflict between rule 25 and token "|" resolved as reduce ("|" < "-").
    Conflict between rule 25 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 25 and token "~" resolved as shift ("-" < "~").
    Conflict between rule 25 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 25 and token "<<" resolved as reduce ("<<" < "-").


State 270

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   27                   | rvalue_expression "/" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 27 (prvalue_expression)

    Conflict between rule 27 and token "is" resolved as reduce ("is" < "/").
    Conflict between rule 27 and token ">" resolved as reduce (">" < "/").
    Conflict between rule 27 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 27 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 27 and token "/" resolved as reduce (%left "/").
    Conflict between rule 27 and token "//" resolved as reduce (%left "//").
    Conflict between rule 27 and token "*" resolved as reduce (%left "*").
    Conflict between rule 27 and token "^^" resolved as shift ("/" < "^^").
    Conflict between rule 27 and token "<=" resolved as reduce ("<=" < "/").
    Conflict between rule 27 and token ">=" resolved as reduce (">=" < "/").
    Conflict between rule 27 and token "<=>" resolved as reduce ("<=>" < "/").
    Conflict between rule 27 and token "&&" resolved as reduce ("&&" < "/").
    Conflict between rule 27 and token "||" resolved as reduce ("||" < "/").
    Conflict between rule 27 and token "&" resolved as reduce ("&" < "/").
    Conflict between rule 27 and token "|" resolved as reduce ("|" < "/").
    Conflict between rule 27 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 27 and token "~" resolved as shift ("/" < "~").
    Conflict between rule 27 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 27 and token "<<" resolved as reduce ("<<" < "/").


State 271

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   28                   | rvalue_expression "//" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 28 (prvalue_expression)

    Conflict between rule 28 and token "is" resolved as reduce ("is" < "//").
    Conflict between rule 28 and token ">" resolved as reduce (">" < "//").
    Conflict between rule 28 and token "+" resolved as reduce ("+" < "//").
    Conflict between rule 28 and token "-" resolved as reduce ("-" < "//").
    Conflict between rule 28 and token "/" resolved as reduce (%left "/").
    Conflict between rule 28 and token "//" resolved as reduce (%left "//").
    Conflict between rule 28 and token "*" resolved as reduce (%left "*").
    Conflict between rule 28 and token "^^" resolved as shift ("//" < "^^").
    Conflict between rule 28 and token "<=" resolved as reduce ("<=" < "//").
    Conflict between rule 28 and token ">=" resolved as reduce (">=" < "//").
    Conflict between rule 28 and token "<=>" resolved as reduce ("<=>" < "//").
    Conflict between rule 28 and token "&&" resolved as reduce ("&&" < "//").
    Conflict between rule 28 and token "||" resolved as reduce ("||" < "//").
    Conflict between rule 28 and token "&" resolved as reduce ("&" < "//").
    Conflict between rule 28 and token "|" resolved as reduce ("|" < "//").
    Conflict between rule 28 and token "^" resolved as reduce ("^" < "//").
    Conflict between rule 28 and token "~" resolved as shift ("//" < "~").
    Conflict between rule 28 and token ">>" resolved as reduce (">>" < "//").
    Conflict between rule 28 and token "<<" resolved as reduce ("<<" < "//").


State 272

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   26                   | rvalue_expression "*" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 26 (prvalue_expression)

    Conflict between rule 26 and token "is" resolved as reduce ("is" < "*").
    Conflict between rule 26 and token ">" resolved as reduce (">" < "*").
    Conflict between rule 26 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 26 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 26 and token "/" resolved as reduce (%left "/").
    Conflict between rule 26 and token "//" resolved as reduce (%left "//").
    Conflict between rule 26 and token "*" resolved as reduce (%left "*").
    Conflict between rule 26 and token "^^" resolved as shift ("*" < "^^").
    Conflict between rule 26 and token "<=" resolved as reduce ("<=" < "*").
    Conflict between rule 26 and token ">=" resolved as reduce (">=" < "*").
    Conflict between rule 26 and token "<=>" resolved as reduce ("<=>" < "*").
    Conflict between rule 26 and token "&&" resolved as reduce ("&&" < "*").
    Conflict between rule 26 and token "||" resolved as reduce ("||" < "*").
    Conflict between rule 26 and token "&" resolved as reduce ("&" < "*").
    Conflict between rule 26 and token "|" resolved as reduce ("|" < "*").
    Conflict between rule 26 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 26 and token "~" resolved as shift ("*" < "~").
    Conflict between rule 26 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 26 and token "<<" resolved as reduce ("<<" < "*").


State 273

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   29                   | rvalue_expression "^^" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 29 (prvalue_expression)

    Conflict between rule 29 and token "is" resolved as reduce ("is" < "^^").
    Conflict between rule 29 and token ">" resolved as reduce (">" < "^^").
    Conflict between rule 29 and token "+" resolved as reduce ("+" < "^^").
    Conflict between rule 29 and token "-" resolved as reduce ("-" < "^^").
    Conflict between rule 29 and token "/" resolved as reduce ("/" < "^^").
    Conflict between rule 29 and token "//" resolved as reduce ("//" < "^^").
    Conflict between rule 29 and token "*" resolved as reduce ("*" < "^^").
    Conflict between rule 29 and token "^^" resolved as shift (%right "^^").
    Conflict between rule 29 and token "<=" resolved as reduce ("<=" < "^^").
    Conflict between rule 29 and token ">=" resolved as reduce (">=" < "^^").
    Conflict between rule 29 and token "<=>" resolved as reduce ("<=>" < "^^").
    Conflict between rule 29 and token "&&" resolved as reduce ("&&" < "^^").
    Conflict between rule 29 and token "||" resolved as reduce ("||" < "^^").
    Conflict between rule 29 and token "&" resolved as reduce ("&" < "^^").
    Conflict between rule 29 and token "|" resolved as reduce ("|" < "^^").
    Conflict between rule 29 and token "^" resolved as reduce ("^" < "^^").
    Conflict between rule 29 and token "~" resolved as shift ("^^" < "~").
    Conflict between rule 29 and token ">>" resolved as reduce (">>" < "^^").
    Conflict between rule 29 and token "<<" resolved as reduce ("<<" < "^^").


State 274

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   38                   | rvalue_expression "<=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<=>"  shift, and go to state 197
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 38 (prvalue_expression)

    Conflict between rule 38 and token "is" resolved as reduce ("is" < "<=").
    Conflict between rule 38 and token ">" resolved as reduce (%left ">").
    Conflict between rule 38 and token "+" resolved as shift ("<=" < "+").
    Conflict between rule 38 and token "-" resolved as shift ("<=" < "-").
    Conflict between rule 38 and token "/" resolved as shift ("<=" < "/").
    Conflict between rule 38 and token "//" resolved as shift ("<=" < "//").
    Conflict between rule 38 and token "*" resolved as shift ("<=" < "*").
    Conflict between rule 38 and token "^^" resolved as shift ("<=" < "^^").
    Conflict between rule 38 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 38 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 38 and token "<=>" resolved as shift ("<=" < "<=>").
    Conflict between rule 38 and token "&&" resolved as reduce ("&&" < "<=").
    Conflict between rule 38 and token "||" resolved as reduce ("||" < "<=").
    Conflict between rule 38 and token "&" resolved as reduce ("&" < "<=").
    Conflict between rule 38 and token "|" resolved as reduce ("|" < "<=").
    Conflict between rule 38 and token "^" resolved as reduce ("^" < "<=").
    Conflict between rule 38 and token "~" resolved as shift ("<=" < "~").
    Conflict between rule 38 and token ">>" resolved as shift ("<=" < ">>").
    Conflict between rule 38 and token "<<" resolved as shift ("<=" < "<<").


State 275

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   37                   | rvalue_expression ">=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<=>"  shift, and go to state 197
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 37 (prvalue_expression)

    Conflict between rule 37 and token "is" resolved as reduce ("is" < ">=").
    Conflict between rule 37 and token ">" resolved as reduce (%left ">").
    Conflict between rule 37 and token "+" resolved as shift (">=" < "+").
    Conflict between rule 37 and token "-" resolved as shift (">=" < "-").
    Conflict between rule 37 and token "/" resolved as shift (">=" < "/").
    Conflict between rule 37 and token "//" resolved as shift (">=" < "//").
    Conflict between rule 37 and token "*" resolved as shift (">=" < "*").
    Conflict between rule 37 and token "^^" resolved as shift (">=" < "^^").
    Conflict between rule 37 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 37 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 37 and token "<=>" resolved as shift (">=" < "<=>").
    Conflict between rule 37 and token "&&" resolved as reduce ("&&" < ">=").
    Conflict between rule 37 and token "||" resolved as reduce ("||" < ">=").
    Conflict between rule 37 and token "&" resolved as reduce ("&" < ">=").
    Conflict between rule 37 and token "|" resolved as reduce ("|" < ">=").
    Conflict between rule 37 and token "^" resolved as reduce ("^" < ">=").
    Conflict between rule 37 and token "~" resolved as shift (">=" < "~").
    Conflict between rule 37 and token ">>" resolved as shift (">=" < ">>").
    Conflict between rule 37 and token "<<" resolved as shift (">=" < "<<").


State 276

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   39                   | rvalue_expression "<=>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ")", ":", ";"]
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "+"   shift, and go to state 189
    "-"   shift, and go to state 190
    "/"   shift, and go to state 191
    "//"  shift, and go to state 192
    "*"   shift, and go to state 193
    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203
    ">>"  shift, and go to state 204
    "<<"  shift, and go to state 205

    $default  reduce using rule 39 (prvalue_expression)

    Conflict between rule 39 and token "is" resolved as reduce ("is" < "<=>").
    Conflict between rule 39 and token ">" resolved as reduce (">" < "<=>").
    Conflict between rule 39 and token "+" resolved as shift ("<=>" < "+").
    Conflict between rule 39 and token "-" resolved as shift ("<=>" < "-").
    Conflict between rule 39 and token "/" resolved as shift ("<=>" < "/").
    Conflict between rule 39 and token "//" resolved as shift ("<=>" < "//").
    Conflict between rule 39 and token "*" resolved as shift ("<=>" < "*").
    Conflict between rule 39 and token "^^" resolved as shift ("<=>" < "^^").
    Conflict between rule 39 and token "<=" resolved as reduce ("<=" < "<=>").
    Conflict between rule 39 and token ">=" resolved as reduce (">=" < "<=>").
    Conflict between rule 39 and token "<=>" resolved as reduce (%left "<=>").
    Conflict between rule 39 and token "&&" resolved as reduce ("&&" < "<=>").
    Conflict between rule 39 and token "||" resolved as reduce ("||" < "<=>").
    Conflict between rule 39 and token "&" resolved as reduce ("&" < "<=>").
    Conflict between rule 39 and token "|" resolved as reduce ("|" < "<=>").
    Conflict between rule 39 and token "^" resolved as reduce ("^" < "<=>").
    Conflict between rule 39 and token "~" resolved as shift ("<=>" < "~").
    Conflict between rule 39 and token ">>" resolved as shift ("<=>" < ">>").
    Conflict between rule 39 and token "<<" resolved as shift ("<=>" < "<<").


State 277

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   40                   | rvalue_expression "&&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", ")", ":", ";"]
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 40 (prvalue_expression)

    Conflict between rule 40 and token "is" resolved as reduce ("is" < "&&").
    Conflict between rule 40 and token ">" resolved as shift ("&&" < ">").
    Conflict between rule 40 and token "+" resolved as shift ("&&" < "+").
    Conflict between rule 40 and token "-" resolved as shift ("&&" < "-").
    Conflict between rule 40 and token "/" resolved as shift ("&&" < "/").
    Conflict between rule 40 and token "//" resolved as shift ("&&" < "//").
    Conflict between rule 40 and token "*" resolved as shift ("&&" < "*").
    Conflict between rule 40 and token "^^" resolved as shift ("&&" < "^^").
    Conflict between rule 40 and token "<=" resolved as shift ("&&" < "<=").
    Conflict between rule 40 and token ">=" resolved as shift ("&&" < ">=").
    Conflict between rule 40 and token "<=>" resolved as shift ("&&" < "<=>").
    Conflict between rule 40 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 40 and token "||" resolved as reduce ("||" < "&&").
    Conflict between rule 40 and token "&" resolved as shift ("&&" < "&").
    Conflict between rule 40 and token "|" resolved as shift ("&&" < "|").
    Conflict between rule 40 and token "^" resolved as shift ("&&" < "^").
    Conflict between rule 40 and token "~" resolved as shift ("&&" < "~").
    Conflict between rule 40 and token ">>" resolved as shift ("&&" < ">>").
    Conflict between rule 40 and token "<<" resolved as shift ("&&" < "<<").


State 278

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   41                   | rvalue_expression "||" rvalue_expression •  ["in", "is", "]", ",", "||", ")", ":", ";"]
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 41 (prvalue_expression)

    Conflict between rule 41 and token "is" resolved as reduce ("is" < "||").
    Conflict between rule 41 and token ">" resolved as shift ("||" < ">").
    Conflict between rule 41 and token "+" resolved as shift ("||" < "+").
    Conflict between rule 41 and token "-" resolved as shift ("||" < "-").
    Conflict between rule 41 and token "/" resolved as shift ("||" < "/").
    Conflict between rule 41 and token "//" resolved as shift ("||" < "//").
    Conflict between rule 41 and token "*" resolved as shift ("||" < "*").
    Conflict between rule 41 and token "^^" resolved as shift ("||" < "^^").
    Conflict between rule 41 and token "<=" resolved as shift ("||" < "<=").
    Conflict between rule 41 and token ">=" resolved as shift ("||" < ">=").
    Conflict between rule 41 and token "<=>" resolved as shift ("||" < "<=>").
    Conflict between rule 41 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 41 and token "||" resolved as reduce (%left "||").
    Conflict between rule 41 and token "&" resolved as shift ("||" < "&").
    Conflict between rule 41 and token "|" resolved as shift ("||" < "|").
    Conflict between rule 41 and token "^" resolved as shift ("||" < "^").
    Conflict between rule 41 and token "~" resolved as shift ("||" < "~").
    Conflict between rule 41 and token ">>" resolved as shift ("||" < ">>").
    Conflict between rule 41 and token "<<" resolved as shift ("||" < "<<").


State 279

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   42                   | rvalue_expression "&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "&", "|", "^", ")", ":", ";"]
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 42 (prvalue_expression)

    Conflict between rule 42 and token "is" resolved as reduce ("is" < "&").
    Conflict between rule 42 and token ">" resolved as shift ("&" < ">").
    Conflict between rule 42 and token "+" resolved as shift ("&" < "+").
    Conflict between rule 42 and token "-" resolved as shift ("&" < "-").
    Conflict between rule 42 and token "/" resolved as shift ("&" < "/").
    Conflict between rule 42 and token "//" resolved as shift ("&" < "//").
    Conflict between rule 42 and token "*" resolved as shift ("&" < "*").
    Conflict between rule 42 and token "^^" resolved as shift ("&" < "^^").
    Conflict between rule 42 and token "<=" resolved as shift ("&" < "<=").
    Conflict between rule 42 and token ">=" resolved as shift ("&" < ">=").
    Conflict between rule 42 and token "<=>" resolved as shift ("&" < "<=>").
    Conflict between rule 42 and token "&&" resolved as reduce ("&&" < "&").
    Conflict between rule 42 and token "||" resolved as reduce ("||" < "&").
    Conflict between rule 42 and token "&" resolved as reduce (%left "&").
    Conflict between rule 42 and token "|" resolved as reduce ("|" < "&").
    Conflict between rule 42 and token "^" resolved as reduce ("^" < "&").
    Conflict between rule 42 and token "~" resolved as shift ("&" < "~").
    Conflict between rule 42 and token ">>" resolved as shift ("&" < ">>").
    Conflict between rule 42 and token "<<" resolved as shift ("&" < "<<").


State 280

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   44                   | rvalue_expression "|" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", ")", ":", ";"]
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&"    shift, and go to state 200
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 44 (prvalue_expression)

    Conflict between rule 44 and token "is" resolved as reduce ("is" < "|").
    Conflict between rule 44 and token ">" resolved as shift ("|" < ">").
    Conflict between rule 44 and token "+" resolved as shift ("|" < "+").
    Conflict between rule 44 and token "-" resolved as shift ("|" < "-").
    Conflict between rule 44 and token "/" resolved as shift ("|" < "/").
    Conflict between rule 44 and token "//" resolved as shift ("|" < "//").
    Conflict between rule 44 and token "*" resolved as shift ("|" < "*").
    Conflict between rule 44 and token "^^" resolved as shift ("|" < "^^").
    Conflict between rule 44 and token "<=" resolved as shift ("|" < "<=").
    Conflict between rule 44 and token ">=" resolved as shift ("|" < ">=").
    Conflict between rule 44 and token "<=>" resolved as shift ("|" < "<=>").
    Conflict between rule 44 and token "&&" resolved as reduce ("&&" < "|").
    Conflict between rule 44 and token "||" resolved as reduce ("||" < "|").
    Conflict between rule 44 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 44 and token "|" resolved as reduce (%left "|").
    Conflict between rule 44 and token "^" resolved as shift ("|" < "^").
    Conflict between rule 44 and token "~" resolved as shift ("|" < "~").
    Conflict between rule 44 and token ">>" resolved as shift ("|" < ">>").
    Conflict between rule 44 and token "<<" resolved as shift ("|" < "<<").


State 281

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   43                   | rvalue_expression "^" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", "^", ")", ":", ";"]
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&"    shift, and go to state 200
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 43 (prvalue_expression)

    Conflict between rule 43 and token "is" resolved as reduce ("is" < "^").
    Conflict between rule 43 and token ">" resolved as shift ("^" < ">").
    Conflict between rule 43 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 43 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 43 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 43 and token "//" resolved as shift ("^" < "//").
    Conflict between rule 43 and token "*" resolved as shift ("^" < "*").
    Conflict between rule 43 and token "^^" resolved as shift ("^" < "^^").
    Conflict between rule 43 and token "<=" resolved as shift ("^" < "<=").
    Conflict between rule 43 and token ">=" resolved as shift ("^" < ">=").
    Conflict between rule 43 and token "<=>" resolved as shift ("^" < "<=>").
    Conflict between rule 43 and token "&&" resolved as reduce ("&&" < "^").
    Conflict between rule 43 and token "||" resolved as reduce ("||" < "^").
    Conflict between rule 43 and token "&" resolved as shift ("^" < "&").
    Conflict between rule 43 and token "|" resolved as reduce ("|" < "^").
    Conflict between rule 43 and token "^" resolved as reduce (%left "^").
    Conflict between rule 43 and token "~" resolved as shift ("^" < "~").
    Conflict between rule 43 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 43 and token "<<" resolved as shift ("^" < "<<").


State 282

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   45                   | rvalue_expression "~" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "~"  shift, and go to state 203

    $default  reduce using rule 45 (prvalue_expression)

    Conflict between rule 45 and token "is" resolved as reduce ("is" < "~").
    Conflict between rule 45 and token ">" resolved as reduce (">" < "~").
    Conflict between rule 45 and token "+" resolved as reduce ("+" < "~").
    Conflict between rule 45 and token "-" resolved as reduce ("-" < "~").
    Conflict between rule 45 and token "/" resolved as reduce ("/" < "~").
    Conflict between rule 45 and token "//" resolved as reduce ("//" < "~").
    Conflict between rule 45 and token "*" resolved as reduce ("*" < "~").
    Conflict between rule 45 and token "^^" resolved as reduce ("^^" < "~").
    Conflict between rule 45 and token "<=" resolved as reduce ("<=" < "~").
    Conflict between rule 45 and token ">=" resolved as reduce (">=" < "~").
    Conflict between rule 45 and token "<=>" resolved as reduce ("<=>" < "~").
    Conflict between rule 45 and token "&&" resolved as reduce ("&&" < "~").
    Conflict between rule 45 and token "||" resolved as reduce ("||" < "~").
    Conflict between rule 45 and token "&" resolved as reduce ("&" < "~").
    Conflict between rule 45 and token "|" resolved as reduce ("|" < "~").
    Conflict between rule 45 and token "^" resolved as reduce ("^" < "~").
    Conflict between rule 45 and token "~" resolved as shift (%right "~").
    Conflict between rule 45 and token ">>" resolved as reduce (">>" < "~").
    Conflict between rule 45 and token "<<" resolved as reduce ("<<" < "~").


State 283

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   46                   | rvalue_expression ">>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "+"   shift, and go to state 189
    "-"   shift, and go to state 190
    "/"   shift, and go to state 191
    "//"  shift, and go to state 192
    "*"   shift, and go to state 193
    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 46 (prvalue_expression)

    Conflict between rule 46 and token "is" resolved as reduce ("is" < ">>").
    Conflict between rule 46 and token ">" resolved as reduce (">" < ">>").
    Conflict between rule 46 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 46 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 46 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 46 and token "//" resolved as shift (">>" < "//").
    Conflict between rule 46 and token "*" resolved as shift (">>" < "*").
    Conflict between rule 46 and token "^^" resolved as shift (">>" < "^^").
    Conflict between rule 46 and token "<=" resolved as reduce ("<=" < ">>").
    Conflict between rule 46 and token ">=" resolved as reduce (">=" < ">>").
    Conflict between rule 46 and token "<=>" resolved as reduce ("<=>" < ">>").
    Conflict between rule 46 and token "&&" resolved as reduce ("&&" < ">>").
    Conflict between rule 46 and token "||" resolved as reduce ("||" < ">>").
    Conflict between rule 46 and token "&" resolved as reduce ("&" < ">>").
    Conflict between rule 46 and token "|" resolved as reduce ("|" < ">>").
    Conflict between rule 46 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 46 and token "~" resolved as shift (">>" < "~").
    Conflict between rule 46 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 46 and token "<<" resolved as reduce (%left "<<").


State 284

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   47                   | rvalue_expression "<<" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "+"   shift, and go to state 189
    "-"   shift, and go to state 190
    "/"   shift, and go to state 191
    "//"  shift, and go to state 192
    "*"   shift, and go to state 193
    "^^"  shift, and go to state 194
    "~"   shift, and go to state 203

    $default  reduce using rule 47 (prvalue_expression)

    Conflict between rule 47 and token "is" resolved as reduce ("is" < "<<").
    Conflict between rule 47 and token ">" resolved as reduce (">" < "<<").
    Conflict between rule 47 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 47 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 47 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 47 and token "//" resolved as shift ("<<" < "//").
    Conflict between rule 47 and token "*" resolved as shift ("<<" < "*").
    Conflict between rule 47 and token "^^" resolved as shift ("<<" < "^^").
    Conflict between rule 47 and token "<=" resolved as reduce ("<=" < "<<").
    Conflict between rule 47 and token ">=" resolved as reduce (">=" < "<<").
    Conflict between rule 47 and token "<=>" resolved as reduce ("<=>" < "<<").
    Conflict between rule 47 and token "&&" resolved as reduce ("&&" < "<<").
    Conflict between rule 47 and token "||" resolved as reduce ("||" < "<<").
    Conflict between rule 47 and token "&" resolved as reduce ("&" < "<<").
    Conflict between rule 47 and token "|" resolved as reduce ("|" < "<<").
    Conflict between rule 47 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 47 and token "~" resolved as shift ("<<" < "~").
    Conflict between rule 47 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 47 and token "<<" resolved as reduce (%left "<<").


State 285

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   30                   | xvalue_expression "+=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 30 (prvalue_expression)

    Conflict between rule 30 and token "is" resolved as shift (%right "is").
    Conflict between rule 30 and token ">" resolved as shift ("+=" < ">").
    Conflict between rule 30 and token "+" resolved as shift ("+=" < "+").
    Conflict between rule 30 and token "-" resolved as shift ("+=" < "-").
    Conflict between rule 30 and token "/" resolved as shift ("+=" < "/").
    Conflict between rule 30 and token "//" resolved as shift ("+=" < "//").
    Conflict between rule 30 and token "*" resolved as shift ("+=" < "*").
    Conflict between rule 30 and token "^^" resolved as shift ("+=" < "^^").
    Conflict between rule 30 and token "<=" resolved as shift ("+=" < "<=").
    Conflict between rule 30 and token ">=" resolved as shift ("+=" < ">=").
    Conflict between rule 30 and token "<=>" resolved as shift ("+=" < "<=>").
    Conflict between rule 30 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 30 and token "||" resolved as shift ("+=" < "||").
    Conflict between rule 30 and token "&" resolved as shift ("+=" < "&").
    Conflict between rule 30 and token "|" resolved as shift ("+=" < "|").
    Conflict between rule 30 and token "^" resolved as shift ("+=" < "^").
    Conflict between rule 30 and token "~" resolved as shift ("+=" < "~").
    Conflict between rule 30 and token ">>" resolved as shift ("+=" < ">>").
    Conflict between rule 30 and token "<<" resolved as shift ("+=" < "<<").


State 286

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   31                   | xvalue_expression "-=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 31 (prvalue_expression)

    Conflict between rule 31 and token "is" resolved as shift (%right "is").
    Conflict between rule 31 and token ">" resolved as shift ("-=" < ">").
    Conflict between rule 31 and token "+" resolved as shift ("-=" < "+").
    Conflict between rule 31 and token "-" resolved as shift ("-=" < "-").
    Conflict between rule 31 and token "/" resolved as shift ("-=" < "/").
    Conflict between rule 31 and token "//" resolved as shift ("-=" < "//").
    Conflict between rule 31 and token "*" resolved as shift ("-=" < "*").
    Conflict between rule 31 and token "^^" resolved as shift ("-=" < "^^").
    Conflict between rule 31 and token "<=" resolved as shift ("-=" < "<=").
    Conflict between rule 31 and token ">=" resolved as shift ("-=" < ">=").
    Conflict between rule 31 and token "<=>" resolved as shift ("-=" < "<=>").
    Conflict between rule 31 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 31 and token "||" resolved as shift ("-=" < "||").
    Conflict between rule 31 and token "&" resolved as shift ("-=" < "&").
    Conflict between rule 31 and token "|" resolved as shift ("-=" < "|").
    Conflict between rule 31 and token "^" resolved as shift ("-=" < "^").
    Conflict between rule 31 and token "~" resolved as shift ("-=" < "~").
    Conflict between rule 31 and token ">>" resolved as shift ("-=" < ">>").
    Conflict between rule 31 and token "<<" resolved as shift ("-=" < "<<").


State 287

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   32                   | xvalue_expression "*=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 32 (prvalue_expression)

    Conflict between rule 32 and token "is" resolved as shift (%right "is").
    Conflict between rule 32 and token ">" resolved as shift ("*=" < ">").
    Conflict between rule 32 and token "+" resolved as shift ("*=" < "+").
    Conflict between rule 32 and token "-" resolved as shift ("*=" < "-").
    Conflict between rule 32 and token "/" resolved as shift ("*=" < "/").
    Conflict between rule 32 and token "//" resolved as shift ("*=" < "//").
    Conflict between rule 32 and token "*" resolved as shift ("*=" < "*").
    Conflict between rule 32 and token "^^" resolved as shift ("*=" < "^^").
    Conflict between rule 32 and token "<=" resolved as shift ("*=" < "<=").
    Conflict between rule 32 and token ">=" resolved as shift ("*=" < ">=").
    Conflict between rule 32 and token "<=>" resolved as shift ("*=" < "<=>").
    Conflict between rule 32 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 32 and token "||" resolved as shift ("*=" < "||").
    Conflict between rule 32 and token "&" resolved as shift ("*=" < "&").
    Conflict between rule 32 and token "|" resolved as shift ("*=" < "|").
    Conflict between rule 32 and token "^" resolved as shift ("*=" < "^").
    Conflict between rule 32 and token "~" resolved as shift ("*=" < "~").
    Conflict between rule 32 and token ">>" resolved as shift ("*=" < ">>").
    Conflict between rule 32 and token "<<" resolved as shift ("*=" < "<<").


State 288

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   33                   | xvalue_expression "/=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 33 (prvalue_expression)

    Conflict between rule 33 and token "is" resolved as shift (%right "is").
    Conflict between rule 33 and token ">" resolved as shift ("/=" < ">").
    Conflict between rule 33 and token "+" resolved as shift ("/=" < "+").
    Conflict between rule 33 and token "-" resolved as shift ("/=" < "-").
    Conflict between rule 33 and token "/" resolved as shift ("/=" < "/").
    Conflict between rule 33 and token "//" resolved as shift ("/=" < "//").
    Conflict between rule 33 and token "*" resolved as shift ("/=" < "*").
    Conflict between rule 33 and token "^^" resolved as shift ("/=" < "^^").
    Conflict between rule 33 and token "<=" resolved as shift ("/=" < "<=").
    Conflict between rule 33 and token ">=" resolved as shift ("/=" < ">=").
    Conflict between rule 33 and token "<=>" resolved as shift ("/=" < "<=>").
    Conflict between rule 33 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 33 and token "||" resolved as shift ("/=" < "||").
    Conflict between rule 33 and token "&" resolved as shift ("/=" < "&").
    Conflict between rule 33 and token "|" resolved as shift ("/=" < "|").
    Conflict between rule 33 and token "^" resolved as shift ("/=" < "^").
    Conflict between rule 33 and token "~" resolved as shift ("/=" < "~").
    Conflict between rule 33 and token ">>" resolved as shift ("/=" < ">>").
    Conflict between rule 33 and token "<<" resolved as shift ("/=" < "<<").


State 289

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   34                   | xvalue_expression "//=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 34 (prvalue_expression)

    Conflict between rule 34 and token "is" resolved as shift (%right "is").
    Conflict between rule 34 and token ">" resolved as shift ("//=" < ">").
    Conflict between rule 34 and token "+" resolved as shift ("//=" < "+").
    Conflict between rule 34 and token "-" resolved as shift ("//=" < "-").
    Conflict between rule 34 and token "/" resolved as shift ("//=" < "/").
    Conflict between rule 34 and token "//" resolved as shift ("//=" < "//").
    Conflict between rule 34 and token "*" resolved as shift ("//=" < "*").
    Conflict between rule 34 and token "^^" resolved as shift ("//=" < "^^").
    Conflict between rule 34 and token "<=" resolved as shift ("//=" < "<=").
    Conflict between rule 34 and token ">=" resolved as shift ("//=" < ">=").
    Conflict between rule 34 and token "<=>" resolved as shift ("//=" < "<=>").
    Conflict between rule 34 and token "&&" resolved as shift ("//=" < "&&").
    Conflict between rule 34 and token "||" resolved as shift ("//=" < "||").
    Conflict between rule 34 and token "&" resolved as shift ("//=" < "&").
    Conflict between rule 34 and token "|" resolved as shift ("//=" < "|").
    Conflict between rule 34 and token "^" resolved as shift ("//=" < "^").
    Conflict between rule 34 and token "~" resolved as shift ("//=" < "~").
    Conflict between rule 34 and token ">>" resolved as shift ("//=" < ">>").
    Conflict between rule 34 and token "<<" resolved as shift ("//=" < "<<").


State 290

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   35                   | xvalue_expression "^^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 35 (prvalue_expression)

    Conflict between rule 35 and token "is" resolved as shift (%right "is").
    Conflict between rule 35 and token ">" resolved as shift ("^^=" < ">").
    Conflict between rule 35 and token "+" resolved as shift ("^^=" < "+").
    Conflict between rule 35 and token "-" resolved as shift ("^^=" < "-").
    Conflict between rule 35 and token "/" resolved as shift ("^^=" < "/").
    Conflict between rule 35 and token "//" resolved as shift ("^^=" < "//").
    Conflict between rule 35 and token "*" resolved as shift ("^^=" < "*").
    Conflict between rule 35 and token "^^" resolved as shift ("^^=" < "^^").
    Conflict between rule 35 and token "<=" resolved as shift ("^^=" < "<=").
    Conflict between rule 35 and token ">=" resolved as shift ("^^=" < ">=").
    Conflict between rule 35 and token "<=>" resolved as shift ("^^=" < "<=>").
    Conflict between rule 35 and token "&&" resolved as shift ("^^=" < "&&").
    Conflict between rule 35 and token "||" resolved as shift ("^^=" < "||").
    Conflict between rule 35 and token "&" resolved as shift ("^^=" < "&").
    Conflict between rule 35 and token "|" resolved as shift ("^^=" < "|").
    Conflict between rule 35 and token "^" resolved as shift ("^^=" < "^").
    Conflict between rule 35 and token "~" resolved as shift ("^^=" < "~").
    Conflict between rule 35 and token ">>" resolved as shift ("^^=" < ">>").
    Conflict between rule 35 and token "<<" resolved as shift ("^^=" < "<<").


State 291

   17 expression: xvalue_expression "=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 17 (expression)


State 292

   95 function_call: xvalue_expression "(" ")" •

    $default  reduce using rule 95 (function_call)


State 293

   98 function_call_arg: expression •

    $default  reduce using rule 98 (function_call_arg)


State 294

   94 function_call: xvalue_expression "(" function_call_list • ")"
   97 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 340
    ")"  shift, and go to state 341


State 295

   96 function_call_list: function_call_arg •

    $default  reduce using rule 96 (function_call_list)


State 296

   68 xvalue_expression: xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   71                  | xvalue_expression • "." xvalue_expression
   71                  | xvalue_expression "." xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   72                  | xvalue_expression • "->" xvalue_expression
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "("  shift, and go to state 215

    "("       [reduce using rule 71 (xvalue_expression)]
    $default  reduce using rule 71 (xvalue_expression)

    Conflict between rule 71 and token "++" resolved as reduce ("++" < ".").
    Conflict between rule 71 and token "--" resolved as reduce ("--" < ".").
    Conflict between rule 71 and token "." resolved as reduce (%left ".").
    Conflict between rule 71 and token "->" resolved as reduce (%left "->").

    shift/reduce conflict on token "(":
       71 xvalue_expression: xvalue_expression "." xvalue_expression •
       94 function_call: xvalue_expression • "(" function_call_list ")"
      Example: xvalue_expression "." xvalue_expression • "(" function_call_list ")"
      Shift derivation
        xvalue_expression
        ↳ xvalue_expression "." xvalue_expression
                                ↳ function_call
                                  ↳ xvalue_expression • "(" function_call_list ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression                           "(" function_call_list ")"
            ↳ xvalue_expression "." xvalue_expression •

    shift/reduce conflict on token "(":
       71 xvalue_expression: xvalue_expression "." xvalue_expression •
       95 function_call: xvalue_expression • "(" ")"
      Example: xvalue_expression "." xvalue_expression • "(" ")"
      Shift derivation
        xvalue_expression
        ↳ xvalue_expression "." xvalue_expression
                                ↳ function_call
                                  ↳ xvalue_expression • "(" ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression                           "(" ")"
            ↳ xvalue_expression "." xvalue_expression •



State 297

   68 xvalue_expression: xvalue_expression • "++"
   69                  | xvalue_expression • "--"
   71                  | xvalue_expression • "." xvalue_expression
   72                  | xvalue_expression • "->" xvalue_expression
   72                  | xvalue_expression "->" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   94 function_call: xvalue_expression • "(" function_call_list ")"
   95              | xvalue_expression • "(" ")"

    "("  shift, and go to state 215

    "("       [reduce using rule 72 (xvalue_expression)]
    $default  reduce using rule 72 (xvalue_expression)

    Conflict between rule 72 and token "++" resolved as reduce ("++" < "->").
    Conflict between rule 72 and token "--" resolved as reduce ("--" < "->").
    Conflict between rule 72 and token "." resolved as reduce (%left ".").
    Conflict between rule 72 and token "->" resolved as reduce (%left "->").

    shift/reduce conflict on token "(":
       72 xvalue_expression: xvalue_expression "->" xvalue_expression •
       94 function_call: xvalue_expression • "(" function_call_list ")"
      Example: xvalue_expression "->" xvalue_expression • "(" function_call_list ")"
      Shift derivation
        xvalue_expression
        ↳ xvalue_expression "->" xvalue_expression
                                 ↳ function_call
                                   ↳ xvalue_expression • "(" function_call_list ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression                            "(" function_call_list ")"
            ↳ xvalue_expression "->" xvalue_expression •

    shift/reduce conflict on token "(":
       72 xvalue_expression: xvalue_expression "->" xvalue_expression •
       95 function_call: xvalue_expression • "(" ")"
      Example: xvalue_expression "->" xvalue_expression • "(" ")"
      Shift derivation
        xvalue_expression
        ↳ xvalue_expression "->" xvalue_expression
                                 ↳ function_call
                                   ↳ xvalue_expression • "(" ")"
      Reduce derivation
        xvalue_expression
        ↳ function_call
          ↳ xvalue_expression                            "(" ")"
            ↳ xvalue_expression "->" xvalue_expression •



State 298

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   48                   | xvalue_expression "&=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 48 (prvalue_expression)

    Conflict between rule 48 and token "is" resolved as shift (%right "is").
    Conflict between rule 48 and token ">" resolved as shift ("&=" < ">").
    Conflict between rule 48 and token "+" resolved as shift ("&=" < "+").
    Conflict between rule 48 and token "-" resolved as shift ("&=" < "-").
    Conflict between rule 48 and token "/" resolved as shift ("&=" < "/").
    Conflict between rule 48 and token "//" resolved as shift ("&=" < "//").
    Conflict between rule 48 and token "*" resolved as shift ("&=" < "*").
    Conflict between rule 48 and token "^^" resolved as shift ("&=" < "^^").
    Conflict between rule 48 and token "<=" resolved as shift ("&=" < "<=").
    Conflict between rule 48 and token ">=" resolved as shift ("&=" < ">=").
    Conflict between rule 48 and token "<=>" resolved as shift ("&=" < "<=>").
    Conflict between rule 48 and token "&&" resolved as shift ("&=" < "&&").
    Conflict between rule 48 and token "||" resolved as shift ("&=" < "||").
    Conflict between rule 48 and token "&" resolved as shift ("&=" < "&").
    Conflict between rule 48 and token "|" resolved as shift ("&=" < "|").
    Conflict between rule 48 and token "^" resolved as shift ("&=" < "^").
    Conflict between rule 48 and token "~" resolved as shift ("&=" < "~").
    Conflict between rule 48 and token ">>" resolved as shift ("&=" < ">>").
    Conflict between rule 48 and token "<<" resolved as shift ("&=" < "<<").


State 299

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   49                   | xvalue_expression "^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 49 (prvalue_expression)

    Conflict between rule 49 and token "is" resolved as shift (%right "is").
    Conflict between rule 49 and token ">" resolved as shift ("^=" < ">").
    Conflict between rule 49 and token "+" resolved as shift ("^=" < "+").
    Conflict between rule 49 and token "-" resolved as shift ("^=" < "-").
    Conflict between rule 49 and token "/" resolved as shift ("^=" < "/").
    Conflict between rule 49 and token "//" resolved as shift ("^=" < "//").
    Conflict between rule 49 and token "*" resolved as shift ("^=" < "*").
    Conflict between rule 49 and token "^^" resolved as shift ("^=" < "^^").
    Conflict between rule 49 and token "<=" resolved as shift ("^=" < "<=").
    Conflict between rule 49 and token ">=" resolved as shift ("^=" < ">=").
    Conflict between rule 49 and token "<=>" resolved as shift ("^=" < "<=>").
    Conflict between rule 49 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 49 and token "||" resolved as shift ("^=" < "||").
    Conflict between rule 49 and token "&" resolved as shift ("^=" < "&").
    Conflict between rule 49 and token "|" resolved as shift ("^=" < "|").
    Conflict between rule 49 and token "^" resolved as shift ("^=" < "^").
    Conflict between rule 49 and token "~" resolved as shift ("^=" < "~").
    Conflict between rule 49 and token ">>" resolved as shift ("^=" < ">>").
    Conflict between rule 49 and token "<<" resolved as shift ("^=" < "<<").


State 300

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   50                   | xvalue_expression "|=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 50 (prvalue_expression)

    Conflict between rule 50 and token "is" resolved as shift (%right "is").
    Conflict between rule 50 and token ">" resolved as shift ("|=" < ">").
    Conflict between rule 50 and token "+" resolved as shift ("|=" < "+").
    Conflict between rule 50 and token "-" resolved as shift ("|=" < "-").
    Conflict between rule 50 and token "/" resolved as shift ("|=" < "/").
    Conflict between rule 50 and token "//" resolved as shift ("|=" < "//").
    Conflict between rule 50 and token "*" resolved as shift ("|=" < "*").
    Conflict between rule 50 and token "^^" resolved as shift ("|=" < "^^").
    Conflict between rule 50 and token "<=" resolved as shift ("|=" < "<=").
    Conflict between rule 50 and token ">=" resolved as shift ("|=" < ">=").
    Conflict between rule 50 and token "<=>" resolved as shift ("|=" < "<=>").
    Conflict between rule 50 and token "&&" resolved as shift ("|=" < "&&").
    Conflict between rule 50 and token "||" resolved as shift ("|=" < "||").
    Conflict between rule 50 and token "&" resolved as shift ("|=" < "&").
    Conflict between rule 50 and token "|" resolved as shift ("|=" < "|").
    Conflict between rule 50 and token "^" resolved as shift ("|=" < "^").
    Conflict between rule 50 and token "~" resolved as shift ("|=" < "~").
    Conflict between rule 50 and token ">>" resolved as shift ("|=" < ">>").
    Conflict between rule 50 and token "<<" resolved as shift ("|=" < "<<").


State 301

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   51                   | xvalue_expression "~=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 51 (prvalue_expression)

    Conflict between rule 51 and token "is" resolved as shift (%right "is").
    Conflict between rule 51 and token ">" resolved as shift ("~=" < ">").
    Conflict between rule 51 and token "+" resolved as shift ("~=" < "+").
    Conflict between rule 51 and token "-" resolved as shift ("~=" < "-").
    Conflict between rule 51 and token "/" resolved as shift ("~=" < "/").
    Conflict between rule 51 and token "//" resolved as shift ("~=" < "//").
    Conflict between rule 51 and token "*" resolved as shift ("~=" < "*").
    Conflict between rule 51 and token "^^" resolved as shift ("~=" < "^^").
    Conflict between rule 51 and token "<=" resolved as shift ("~=" < "<=").
    Conflict between rule 51 and token ">=" resolved as shift ("~=" < ">=").
    Conflict between rule 51 and token "<=>" resolved as shift ("~=" < "<=>").
    Conflict between rule 51 and token "&&" resolved as shift ("~=" < "&&").
    Conflict between rule 51 and token "||" resolved as shift ("~=" < "||").
    Conflict between rule 51 and token "&" resolved as shift ("~=" < "&").
    Conflict between rule 51 and token "|" resolved as shift ("~=" < "|").
    Conflict between rule 51 and token "^" resolved as shift ("~=" < "^").
    Conflict between rule 51 and token "~" resolved as shift ("~=" < "~").
    Conflict between rule 51 and token ">>" resolved as shift ("~=" < ">>").
    Conflict between rule 51 and token "<<" resolved as shift ("~=" < "<<").


State 302

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   53                   | xvalue_expression "<<=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 53 (prvalue_expression)

    Conflict between rule 53 and token "is" resolved as shift (%right "is").
    Conflict between rule 53 and token ">" resolved as shift ("<<=" < ">").
    Conflict between rule 53 and token "+" resolved as shift ("<<=" < "+").
    Conflict between rule 53 and token "-" resolved as shift ("<<=" < "-").
    Conflict between rule 53 and token "/" resolved as shift ("<<=" < "/").
    Conflict between rule 53 and token "//" resolved as shift ("<<=" < "//").
    Conflict between rule 53 and token "*" resolved as shift ("<<=" < "*").
    Conflict between rule 53 and token "^^" resolved as shift ("<<=" < "^^").
    Conflict between rule 53 and token "<=" resolved as shift ("<<=" < "<=").
    Conflict between rule 53 and token ">=" resolved as shift ("<<=" < ">=").
    Conflict between rule 53 and token "<=>" resolved as shift ("<<=" < "<=>").
    Conflict between rule 53 and token "&&" resolved as shift ("<<=" < "&&").
    Conflict between rule 53 and token "||" resolved as shift ("<<=" < "||").
    Conflict between rule 53 and token "&" resolved as shift ("<<=" < "&").
    Conflict between rule 53 and token "|" resolved as shift ("<<=" < "|").
    Conflict between rule 53 and token "^" resolved as shift ("<<=" < "^").
    Conflict between rule 53 and token "~" resolved as shift ("<<=" < "~").
    Conflict between rule 53 and token ">>" resolved as shift ("<<=" < ">>").
    Conflict between rule 53 and token "<<" resolved as shift ("<<=" < "<<").


State 303

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   52                   | xvalue_expression ">>=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   54                   | rvalue_expression • "is" type

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 52 (prvalue_expression)

    Conflict between rule 52 and token "is" resolved as shift (%right "is").
    Conflict between rule 52 and token ">" resolved as shift (">>=" < ">").
    Conflict between rule 52 and token "+" resolved as shift (">>=" < "+").
    Conflict between rule 52 and token "-" resolved as shift (">>=" < "-").
    Conflict between rule 52 and token "/" resolved as shift (">>=" < "/").
    Conflict between rule 52 and token "//" resolved as shift (">>=" < "//").
    Conflict between rule 52 and token "*" resolved as shift (">>=" < "*").
    Conflict between rule 52 and token "^^" resolved as shift (">>=" < "^^").
    Conflict between rule 52 and token "<=" resolved as shift (">>=" < "<=").
    Conflict between rule 52 and token ">=" resolved as shift (">>=" < ">=").
    Conflict between rule 52 and token "<=>" resolved as shift (">>=" < "<=>").
    Conflict between rule 52 and token "&&" resolved as shift (">>=" < "&&").
    Conflict between rule 52 and token "||" resolved as shift (">>=" < "||").
    Conflict between rule 52 and token "&" resolved as shift (">>=" < "&").
    Conflict between rule 52 and token "|" resolved as shift (">>=" < "|").
    Conflict between rule 52 and token "^" resolved as shift (">>=" < "^").
    Conflict between rule 52 and token "~" resolved as shift (">>=" < "~").
    Conflict between rule 52 and token ">>" resolved as shift (">>=" < ">>").
    Conflict between rule 52 and token "<<" resolved as shift (">>=" < "<<").


State 304

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  129 else_if_statement: "else-if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 342
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 305

  108 block_statement: • "{" statements0 "}"
  132 else_statement: "else" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 343


State 306

  123 if_statement_sequence: if_statement else_if_statements0 else_statement0 •

    $default  reduce using rule 123 (if_statement_sequence)


State 307

  130 else_statement0: else_statement •

    $default  reduce using rule 130 (else_statement0)


State 308

  128 else_if_statements: else_if_statements else_if_statement •

    $default  reduce using rule 128 (else_if_statements)


State 309

   82 variable_declaration: • "let" variable_declaration_block_list
  146 catch_block: "catch" "(" • variable_declaration ")" block_statement

    "let"  shift, and go to state 92

    variable_declaration  go to state 344


State 310

  147 catch_block: "catch-all" block_statement •

    $default  reduce using rule 147 (catch_block)


State 311

  145 catch_blocks: catch_blocks catch_block •

    $default  reduce using rule 145 (catch_blocks)


State 312

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  174 function_argument: type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 345
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 313

  171 function_argument_list: function_argument_list "," function_argument •

    $default  reduce using rule 171 (function_argument_list)


State 314

  175 throwable_expression: "nothrowable" •  ["->"]
  176                     | "nothrowable" • "(" expression ")"

    "("  shift, and go to state 346

    $default  reduce using rule 175 (throwable_expression)


State 315

  165 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 347


State 316

  164 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  175 throwable_expression: • "nothrowable"
  176                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 314

    throwable_expression  go to state 348


State 317

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   13 type_list: type_list "," • type
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                go to state 349
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56


State 318

   11 type_template_paramaters: "!" "(" type_list ")" •

    $default  reduce using rule 11 (type_template_paramaters)


State 319

  186 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 350


State 320

   58 prvalue_expression: "castas" "(" type ")" • "(" rvalue_expression ")"

    "("  shift, and go to state 351


State 321

   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
  148 clean_up_statement: "cleanup" "(" IDENTIFIER "," • clean_up_arg ")" ";"
  149 clean_up_arg: • IDENTIFIER
  150             | • lambda_expression
  151             | • function
  152             | • anonymous_function
  163 function: • function_header block_statement
  164 function_header: • "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  165                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  181 anonymous_function: • anonymous_function_header block_statement
  182 anonymous_function_header: • "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  183                          | • "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 352
    "func"      shift, and go to state 353
    "("         shift, and go to state 354

    lambda_expression          go to state 355
    clean_up_arg               go to state 356
    function                   go to state 357
    function_header            go to state 5
    anonymous_function         go to state 358
    anonymous_function_header  go to state 359


State 322

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  117 do_loop_statement: "do" block_statement "while" "(" • expression ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 360
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 323

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  120 for_loop_condition: variable_declaration "in" • expression

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 361
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 324

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   18 expression0: • expression
   19            | • %empty  [";"]
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  119 for_loop_condition: variable_declaration ";" • expression0 ";" expression0

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    $default  reduce using rule 19 (expression0)

    expression                 go to state 334
    expression0                go to state 362
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 325

  108 block_statement: • "{" statements0 "}"
  118 for_loop_statement: "for" "(" for_loop_condition ")" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 363


State 326

  108 block_statement: • "{" statements0 "}"
  124 if_statement: "if" "(" expression ")" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 364


State 327

   85 variable_declaration_block: "let" type IDENTIFIER •  ["in", ",", ")", ";"]
   86                           | "let" type IDENTIFIER • "=" expression

    "="  shift, and go to state 365

    $default  reduce using rule 85 (variable_declaration_block)


State 328

   84 variable_declaration_block_list: variable_declaration_block_list "," variable_declaration_block •

    $default  reduce using rule 84 (variable_declaration_block_list)


State 329

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   89               | "new" "heap" type "(" • function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
   96 function_call_list: • function_call_arg
   97                   | • function_call_list "," function_call_arg ";"
   98 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 293
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121
    function_call_list         go to state 366
    function_call_arg          go to state 295


State 330

   88 new_expression: "new" type "(" function_call_list • ")"
   97 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 340
    ")"  shift, and go to state 367


State 331

  133 switch_statement: "switch" "(" expression ")" • case_blocks0 default_block0
  134 case_blocks0: • case_blocks
  135             | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  136 case_blocks: • case_block
  137            | • case_blocks case_block
  138 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 368

    $default  reduce using rule 135 (case_blocks0)

    case_blocks0  go to state 369
    case_blocks   go to state 370
    case_block    go to state 371


State 332

   57 prvalue_expression: "typeof" "(" rvalue_expression ")" •

    $default  reduce using rule 57 (prvalue_expression)


State 333

  108 block_statement: • "{" statements0 "}"
  116 while_loop_statement: "while" "(" expression ")" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 372


State 334

   18 expression0: expression •

    $default  reduce using rule 18 (expression0)


State 335

   93 array_index: expression0 ":" expression0 •

    $default  reduce using rule 93 (array_index)


State 336

   91 array_index_list: array_index_list "," array_index •

    $default  reduce using rule 91 (array_index_list)


State 337

   73 xvalue_expression: "(" rvalue_expression ")" •

    $default  reduce using rule 73 (xvalue_expression)


State 338

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   59                   | "(" rvalue_expression ")" "?" • rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 373
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 339

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   87 lambda_expression: "(" function_argument_list ")" "->" • return_types_list "=>" block_statement
  177 return_types_list: • return_type
  178                  | • return_types_list "," return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_types_list   go to state 376
    return_type         go to state 377


State 340

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
   97 function_call_list: function_call_list "," • function_call_arg ";"
   98 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 293
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121
    function_call_arg          go to state 378


State 341

   94 function_call: xvalue_expression "(" function_call_list ")" •

    $default  reduce using rule 94 (function_call)


State 342

  129 else_if_statement: "else-if" "(" expression • ")" block_statement

    ")"  shift, and go to state 379


State 343

  132 else_statement: "else" block_statement •

    $default  reduce using rule 132 (else_statement)


State 344

  146 catch_block: "catch" "(" variable_declaration • ")" block_statement

    ")"  shift, and go to state 380


State 345

  174 function_argument: type IDENTIFIER "=" expression •

    $default  reduce using rule 174 (function_argument)


State 346

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  176 throwable_expression: "nothrowable" "(" • expression ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 381
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 347

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  165 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  177 return_types_list: • return_type
  178                  | • return_types_list "," return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_types_list   go to state 382
    return_type         go to state 377


State 348

  164 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 383


State 349

   13 type_list: type_list "," type •

    $default  reduce using rule 13 (type_list)


State 350

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  177 return_types_list: • return_type
  178                  | • return_types_list "," return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"
  186 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_types_list   go to state 384
    return_type         go to state 377


State 351

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   58                   | "castas" "(" type ")" "(" • rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 385
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 352

  149 clean_up_arg: IDENTIFIER •

    $default  reduce using rule 149 (clean_up_arg)


State 353

  164 function_header: "func" • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  165                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  166 function_modifiers: • "virtual"
  167                   | • "compeval"
  168                   | • "static"
  169                   | • "static" "compeval"
  182 anonymous_function_header: "func" • "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  183                          | "func" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 10
    "compeval"  shift, and go to state 386
    "static"    shift, and go to state 12
    "virtual"   shift, and go to state 13
    "("         shift, and go to state 387

    function_modifiers  go to state 14


State 354

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
   87 lambda_expression: "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    function_argument_list  go to state 185
    function_argument       go to state 146


State 355

  150 clean_up_arg: lambda_expression •

    $default  reduce using rule 150 (clean_up_arg)


State 356

  148 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg • ")" ";"

    ")"  shift, and go to state 388


State 357

  151 clean_up_arg: function •

    $default  reduce using rule 151 (clean_up_arg)


State 358

  152 clean_up_arg: anonymous_function •

    $default  reduce using rule 152 (clean_up_arg)


State 359

  108 block_statement: • "{" statements0 "}"
  181 anonymous_function: anonymous_function_header • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 389


State 360

  117 do_loop_statement: "do" block_statement "while" "(" expression • ")"

    ")"  shift, and go to state 390


State 361

  120 for_loop_condition: variable_declaration "in" expression •

    $default  reduce using rule 120 (for_loop_condition)


State 362

  119 for_loop_condition: variable_declaration ";" expression0 • ";" expression0

    ";"  shift, and go to state 391


State 363

  118 for_loop_statement: "for" "(" for_loop_condition ")" block_statement •

    $default  reduce using rule 118 (for_loop_statement)


State 364

  124 if_statement: "if" "(" expression ")" block_statement •

    $default  reduce using rule 124 (if_statement)


State 365

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   86 variable_declaration_block: "let" type IDENTIFIER "=" • expression
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 392
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 366

   89 new_expression: "new" "heap" type "(" function_call_list • ")"
   97 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 340
    ")"  shift, and go to state 393


State 367

   88 new_expression: "new" type "(" function_call_list ")" •

    $default  reduce using rule 88 (new_expression)


State 368

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  138 case_block: "case" • expression ":" block_statement jump_statement

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 394
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 369

  133 switch_statement: "switch" "(" expression ")" case_blocks0 • default_block0
  139 default_block0: • default_block
  140               | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  141 default_block: • "default" ":" block_statement jump_statement

    "default"  shift, and go to state 395

    $default  reduce using rule 140 (default_block0)

    default_block0  go to state 396
    default_block   go to state 397


State 370

  134 case_blocks0: case_blocks •  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  137 case_blocks: case_blocks • case_block
  138 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 368

    $default  reduce using rule 134 (case_blocks0)

    case_block  go to state 398


State 371

  136 case_blocks: case_block •

    $default  reduce using rule 136 (case_blocks)


State 372

  116 while_loop_statement: "while" "(" expression ")" block_statement •

    $default  reduce using rule 116 (while_loop_statement)


State 373

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   59                   | "(" rvalue_expression ")" "?" rvalue_expression • ":" rvalue_expression

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205
    ":"    shift, and go to state 399


State 374

  180 return_type: "typeof" • "(" expression ")"

    "("  shift, and go to state 400


State 375

  179 return_type: type •

    $default  reduce using rule 179 (return_type)


State 376

   87 lambda_expression: "(" function_argument_list ")" "->" return_types_list • "=>" block_statement
  178 return_types_list: return_types_list • "," return_type

    ","   shift, and go to state 401
    "=>"  shift, and go to state 402


State 377

  177 return_types_list: return_type •

    $default  reduce using rule 177 (return_types_list)


State 378

   97 function_call_list: function_call_list "," function_call_arg • ";"

    ";"  shift, and go to state 403


State 379

  108 block_statement: • "{" statements0 "}"
  129 else_if_statement: "else-if" "(" expression ")" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 404


State 380

  108 block_statement: • "{" statements0 "}"
  146 catch_block: "catch" "(" variable_declaration ")" • block_statement

    "{"  shift, and go to state 59

    block_statement  go to state 405


State 381

  176 throwable_expression: "nothrowable" "(" expression • ")"

    ")"  shift, and go to state 406


State 382

  165 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  178 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 401

    $default  reduce using rule 165 (function_header)


State 383

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  164 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  177 return_types_list: • return_type
  178                  | • return_types_list "," return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_types_list   go to state 407
    return_type         go to state 377


State 384

  178 return_types_list: return_types_list • "," return_type
  186 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["=", "{"]

    ","  shift, and go to state 401

    $default  reduce using rule 186 (operator_overload_header)


State 385

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   58                   | "castas" "(" type ")" "(" rvalue_expression • ")"

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205
    ")"    shift, and go to state 408


State 386

  167 function_modifiers: "compeval" •  [IDENTIFIER]
  182 anonymous_function_header: "func" "compeval" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 409

    $default  reduce using rule 167 (function_modifiers)


State 387

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression
  183 anonymous_function_header: "func" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    function_argument_list  go to state 410
    function_argument       go to state 146


State 388

  148 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" • ";"

    ";"  shift, and go to state 411


State 389

  181 anonymous_function: anonymous_function_header block_statement •

    $default  reduce using rule 181 (anonymous_function)


State 390

  117 do_loop_statement: "do" block_statement "while" "(" expression ")" •

    $default  reduce using rule 117 (do_loop_statement)


State 391

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   18 expression0: • expression
   19            | • %empty  [")"]
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  119 for_loop_condition: variable_declaration ";" expression0 ";" • expression0

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    $default  reduce using rule 19 (expression0)

    expression                 go to state 334
    expression0                go to state 412
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 392

   86 variable_declaration_block: "let" type IDENTIFIER "=" expression •

    $default  reduce using rule 86 (variable_declaration_block)


State 393

   89 new_expression: "new" "heap" type "(" function_call_list ")" •

    $default  reduce using rule 89 (new_expression)


State 394

  138 case_block: "case" expression • ":" block_statement jump_statement

    ":"  shift, and go to state 413


State 395

  141 default_block: "default" • ":" block_statement jump_statement

    ":"  shift, and go to state 414


State 396

  133 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0 •

    $default  reduce using rule 133 (switch_statement)


State 397

  139 default_block0: default_block •

    $default  reduce using rule 139 (default_block0)


State 398

  137 case_blocks: case_blocks case_block •

    $default  reduce using rule 137 (case_blocks)


State 399

   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   59                   | "(" rvalue_expression ")" "?" rvalue_expression ":" • rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    prvalue_expression  go to state 176
    rvalue_expression   go to state 415
    xvalue_expression   go to state 178
    literal             go to state 117
    lambda_expression   go to state 119
    new_expression      go to state 120
    function_call       go to state 121


State 400

   16 expression: • assignment_arg_expression
   17           | • xvalue_expression "=" rvalue_expression
   20 assignment_arg_expression: • xvalue_expression
   21                          | • prvalue_expression
   22 prvalue_expression: • literal
   23                   | • "super"
   24                   | • rvalue_expression "+" rvalue_expression
   25                   | • rvalue_expression "-" rvalue_expression
   26                   | • rvalue_expression "*" rvalue_expression
   27                   | • rvalue_expression "/" rvalue_expression
   28                   | • rvalue_expression "//" rvalue_expression
   29                   | • rvalue_expression "^^" rvalue_expression
   30                   | • xvalue_expression "+=" rvalue_expression
   31                   | • xvalue_expression "-=" rvalue_expression
   32                   | • xvalue_expression "*=" rvalue_expression
   33                   | • xvalue_expression "/=" rvalue_expression
   34                   | • xvalue_expression "//=" rvalue_expression
   35                   | • xvalue_expression "^^=" rvalue_expression
   36                   | • rvalue_expression ">" rvalue_expression
   37                   | • rvalue_expression ">=" rvalue_expression
   38                   | • rvalue_expression "<=" rvalue_expression
   39                   | • rvalue_expression "<=>" rvalue_expression
   40                   | • rvalue_expression "&&" rvalue_expression
   41                   | • rvalue_expression "||" rvalue_expression
   42                   | • rvalue_expression "&" rvalue_expression
   43                   | • rvalue_expression "^" rvalue_expression
   44                   | • rvalue_expression "|" rvalue_expression
   45                   | • rvalue_expression "~" rvalue_expression
   46                   | • rvalue_expression ">>" rvalue_expression
   47                   | • rvalue_expression "<<" rvalue_expression
   48                   | • xvalue_expression "&=" rvalue_expression
   49                   | • xvalue_expression "^=" rvalue_expression
   50                   | • xvalue_expression "|=" rvalue_expression
   51                   | • xvalue_expression "~=" rvalue_expression
   52                   | • xvalue_expression ">>=" rvalue_expression
   53                   | • xvalue_expression "<<=" rvalue_expression
   54                   | • rvalue_expression "is" type
   55                   | • "!" rvalue_expression
   56                   | • "-" rvalue_expression
   57                   | • "typeof" "(" rvalue_expression ")"
   58                   | • "castas" "(" type ")" "(" rvalue_expression ")"
   59                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   60                   | • new_expression
   61                   | • lambda_expression
   62 rvalue_expression: • prvalue_expression
   63                  | • xvalue_expression
   64 xvalue_expression: • IDENTIFIER
   65                  | • "this"
   66                  | • "++" xvalue_expression
   67                  | • "--" xvalue_expression
   68                  | • xvalue_expression "++"
   69                  | • xvalue_expression "--"
   70                  | • "*" xvalue_expression
   71                  | • xvalue_expression "." xvalue_expression
   72                  | • xvalue_expression "->" xvalue_expression
   73                  | • "(" rvalue_expression ")"
   74                  | • "[" array_index_list "]"
   75                  | • function_call
   76 literal: • BOOL
   77        | • NPTR
   78        | • INT
   79        | • FLOAT
   80        | • STRING
   81        | • CHAR
   87 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   88 new_expression: • "new" type "(" function_call_list ")"
   89               | • "new" "heap" type "(" function_call_list ")"
   94 function_call: • xvalue_expression "(" function_call_list ")"
   95              | • xvalue_expression "(" ")"
  180 return_type: "typeof" "(" • expression ")"

    IDENTIFIER  shift, and go to state 77
    BOOL        shift, and go to state 78
    NPTR        shift, and go to state 79
    INT         shift, and go to state 80
    FLOAT       shift, and go to state 81
    CHAR        shift, and go to state 82
    STRING      shift, and go to state 83
    "castas"    shift, and go to state 85
    "new"       shift, and go to state 93
    "super"     shift, and go to state 96
    "this"      shift, and go to state 98
    "typeof"    shift, and go to state 101
    "["         shift, and go to state 104
    "-"         shift, and go to state 105
    "*"         shift, and go to state 106
    "!"         shift, and go to state 107
    "++"        shift, and go to state 108
    "--"        shift, and go to state 109
    "("         shift, and go to state 110

    expression                 go to state 416
    assignment_arg_expression  go to state 113
    prvalue_expression         go to state 114
    rvalue_expression          go to state 115
    xvalue_expression          go to state 116
    literal                    go to state 117
    lambda_expression          go to state 119
    new_expression             go to state 120
    function_call              go to state 121


State 401

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  178 return_types_list: return_types_list "," • return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_type         go to state 417


State 402

   87 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" • block_statement
  108 block_statement: • "{" statements0 "}"

    "{"  shift, and go to state 59

    block_statement  go to state 418


State 403

   97 function_call_list: function_call_list "," function_call_arg ";" •

    $default  reduce using rule 97 (function_call_list)


State 404

  129 else_if_statement: "else-if" "(" expression ")" block_statement •

    $default  reduce using rule 129 (else_if_statement)


State 405

  146 catch_block: "catch" "(" variable_declaration ")" block_statement •

    $default  reduce using rule 146 (catch_block)


State 406

  176 throwable_expression: "nothrowable" "(" expression ")" •

    $default  reduce using rule 176 (throwable_expression)


State 407

  164 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  178 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 401

    $default  reduce using rule 164 (function_header)


State 408

   58 prvalue_expression: "castas" "(" type ")" "(" rvalue_expression ")" •

    $default  reduce using rule 58 (prvalue_expression)


State 409

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  170 function_argument_list: • function_argument
  171                       | • function_argument_list "," function_argument
  172 function_argument: • type IDENTIFIER
  173                  | • type "..."
  174                  | • type IDENTIFIER "=" expression
  182 anonymous_function_header: "func" "compeval" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19

    type                    go to state 144
    type_root               go to state 53
    non_reference_type      go to state 54
    type_core               go to state 55
    reference_type          go to state 56
    function_argument_list  go to state 419
    function_argument       go to state 146


State 410

  171 function_argument_list: function_argument_list • "," function_argument
  183 anonymous_function_header: "func" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 238
    ")"  shift, and go to state 420


State 411

  148 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";" •

    $default  reduce using rule 148 (clean_up_statement)


State 412

  119 for_loop_condition: variable_declaration ";" expression0 ";" expression0 •

    $default  reduce using rule 119 (for_loop_condition)


State 413

  108 block_statement: • "{" statements0 "}"
  138 case_block: "case" expression ":" • block_statement jump_statement

    "{"  shift, and go to state 59

    block_statement  go to state 421


State 414

  108 block_statement: • "{" statements0 "}"
  141 default_block: "default" ":" • block_statement jump_statement

    "{"  shift, and go to state 59

    block_statement  go to state 422


State 415

   24 prvalue_expression: rvalue_expression • "+" rvalue_expression
   25                   | rvalue_expression • "-" rvalue_expression
   26                   | rvalue_expression • "*" rvalue_expression
   27                   | rvalue_expression • "/" rvalue_expression
   28                   | rvalue_expression • "//" rvalue_expression
   29                   | rvalue_expression • "^^" rvalue_expression
   36                   | rvalue_expression • ">" rvalue_expression
   37                   | rvalue_expression • ">=" rvalue_expression
   38                   | rvalue_expression • "<=" rvalue_expression
   39                   | rvalue_expression • "<=>" rvalue_expression
   40                   | rvalue_expression • "&&" rvalue_expression
   41                   | rvalue_expression • "||" rvalue_expression
   42                   | rvalue_expression • "&" rvalue_expression
   43                   | rvalue_expression • "^" rvalue_expression
   44                   | rvalue_expression • "|" rvalue_expression
   45                   | rvalue_expression • "~" rvalue_expression
   46                   | rvalue_expression • ">>" rvalue_expression
   47                   | rvalue_expression • "<<" rvalue_expression
   54                   | rvalue_expression • "is" type
   59                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]

    "is"   shift, and go to state 187
    ">"    shift, and go to state 188
    "+"    shift, and go to state 189
    "-"    shift, and go to state 190
    "/"    shift, and go to state 191
    "//"   shift, and go to state 192
    "*"    shift, and go to state 193
    "^^"   shift, and go to state 194
    "<="   shift, and go to state 195
    ">="   shift, and go to state 196
    "<=>"  shift, and go to state 197
    "&&"   shift, and go to state 198
    "||"   shift, and go to state 199
    "&"    shift, and go to state 200
    "|"    shift, and go to state 201
    "^"    shift, and go to state 202
    "~"    shift, and go to state 203
    ">>"   shift, and go to state 204
    "<<"   shift, and go to state 205

    $default  reduce using rule 59 (prvalue_expression)

    Conflict between rule 59 and token "is" resolved as shift (%right "is").
    Conflict between rule 59 and token ">" resolved as shift (TERN < ">").
    Conflict between rule 59 and token "+" resolved as shift (TERN < "+").
    Conflict between rule 59 and token "-" resolved as shift (TERN < "-").
    Conflict between rule 59 and token "/" resolved as shift (TERN < "/").
    Conflict between rule 59 and token "//" resolved as shift (TERN < "//").
    Conflict between rule 59 and token "*" resolved as shift (TERN < "*").
    Conflict between rule 59 and token "^^" resolved as shift (TERN < "^^").
    Conflict between rule 59 and token "<=" resolved as shift (TERN < "<=").
    Conflict between rule 59 and token ">=" resolved as shift (TERN < ">=").
    Conflict between rule 59 and token "<=>" resolved as shift (TERN < "<=>").
    Conflict between rule 59 and token "&&" resolved as shift (TERN < "&&").
    Conflict between rule 59 and token "||" resolved as shift (TERN < "||").
    Conflict between rule 59 and token "&" resolved as shift (TERN < "&").
    Conflict between rule 59 and token "|" resolved as shift (TERN < "|").
    Conflict between rule 59 and token "^" resolved as shift (TERN < "^").
    Conflict between rule 59 and token "~" resolved as shift (TERN < "~").
    Conflict between rule 59 and token ">>" resolved as shift (TERN < ">>").
    Conflict between rule 59 and token "<<" resolved as shift (TERN < "<<").


State 416

  180 return_type: "typeof" "(" expression • ")"

    ")"  shift, and go to state 423


State 417

  178 return_types_list: return_types_list "," return_type •

    $default  reduce using rule 178 (return_types_list)


State 418

   87 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement •

    $default  reduce using rule 87 (lambda_expression)


State 419

  171 function_argument_list: function_argument_list • "," function_argument
  182 anonymous_function_header: "func" "compeval" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 238
    ")"  shift, and go to state 424


State 420

  175 throwable_expression: • "nothrowable"
  176                     | • "nothrowable" "(" expression ")"
  183 anonymous_function_header: "func" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 314

    throwable_expression  go to state 425


State 421

  138 case_block: "case" expression ":" block_statement • jump_statement
  153 jump_statement: • "return" ";"
  154               | • "break" ";"
  155               | • "continue" ";"
  156               | • "rethrow" ";"
  157               | • "throw" expression ";"
  158               | • "yield" ";"
  159               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 84
    "continue"  shift, and go to state 87
    "goto"      shift, and go to state 90
    "rethrow"   shift, and go to state 94
    "return"    shift, and go to state 95
    "throw"     shift, and go to state 99
    "yield"     shift, and go to state 103

    jump_statement  go to state 426


State 422

  141 default_block: "default" ":" block_statement • jump_statement
  153 jump_statement: • "return" ";"
  154               | • "break" ";"
  155               | • "continue" ";"
  156               | • "rethrow" ";"
  157               | • "throw" expression ";"
  158               | • "yield" ";"
  159               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 84
    "continue"  shift, and go to state 87
    "goto"      shift, and go to state 90
    "rethrow"   shift, and go to state 94
    "return"    shift, and go to state 95
    "throw"     shift, and go to state 99
    "yield"     shift, and go to state 103

    jump_statement  go to state 427


State 423

  180 return_type: "typeof" "(" expression ")" •

    $default  reduce using rule 180 (return_type)


State 424

  175 throwable_expression: • "nothrowable"
  176                     | • "nothrowable" "(" expression ")"
  182 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 314

    throwable_expression  go to state 428


State 425

  183 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 429


State 426

  138 case_block: "case" expression ":" block_statement jump_statement •

    $default  reduce using rule 138 (case_block)


State 427

  141 default_block: "default" ":" block_statement jump_statement •

    $default  reduce using rule 141 (default_block)


State 428

  182 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 430


State 429

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  177 return_types_list: • return_type
  178                  | • return_types_list "," return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"
  183 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_types_list   go to state 431
    return_type         go to state 377


State 430

    2 type: • "const" type_root
    3     | • type_root
    4 type_root: • non_reference_type
    5          | • reference_type
    6 non_reference_type: • type_core
    7                   | • type_core POINTER_TYPE
    8                   | • type_core ARRAYL INT ARRAYR
    9 type_core: • TYPENAME type_template_paramaters
   10          | • TYPENAME
   14 reference_type: • "ref" non_reference_type
   15               | • "rref" non_reference_type
  177 return_types_list: • return_type
  178                  | • return_types_list "," return_type
  179 return_type: • type
  180            | • "typeof" "(" expression ")"
  182 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 15
    "const"   shift, and go to state 16
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "typeof"  shift, and go to state 374

    type                go to state 375
    type_root           go to state 53
    non_reference_type  go to state 54
    type_core           go to state 55
    reference_type      go to state 56
    return_types_list   go to state 432
    return_type         go to state 377


State 431

  178 return_types_list: return_types_list • "," return_type
  183 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 401

    $default  reduce using rule 183 (anonymous_function_header)


State 432

  178 return_types_list: return_types_list • "," return_type
  182 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 401

    $default  reduce using rule 182 (anonymous_function_header)
