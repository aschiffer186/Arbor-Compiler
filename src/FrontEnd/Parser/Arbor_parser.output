Grammar

    0 $accept: start $end

    1 start: callables
    2      | enum

    3 type: "const" type_root
    4     | type_root

    5 type_root: non_reference_type
    6          | reference_type

    7 non_reference_type: type_core
    8                   | type_core POINTER_TYPE
    9                   | type_core ARRAYL INT ARRAYR

   10 type_core: TYPENAME type_template_paramaters
   11          | TYPENAME
   12          | "bit"
   13          | "bool"
   14          | "short"
   15          | "int"
   16          | "long"
   17          | "float"
   18          | "char"

   19 type_template_paramaters: "!" "(" type_list ")"

   20 type_list: type
   21          | type_list "," type

   22 reference_type: "ref" non_reference_type
   23               | "rref" non_reference_type

   24 expression: assignment_arg_expression
   25           | xvalue_expression "=" rvalue_expression

   26 expression0: expression
   27            | %empty

   28 assignment_arg_expression: xvalue_expression
   29                          | prvalue_expression

   30 prvalue_expression: literal
   31                   | "super"
   32                   | rvalue_expression "+" rvalue_expression
   33                   | rvalue_expression "-" rvalue_expression
   34                   | rvalue_expression "*" rvalue_expression
   35                   | rvalue_expression "/" rvalue_expression
   36                   | rvalue_expression "//" rvalue_expression
   37                   | rvalue_expression "^^" rvalue_expression
   38                   | xvalue_expression "+=" rvalue_expression
   39                   | xvalue_expression "-=" rvalue_expression
   40                   | xvalue_expression "*=" rvalue_expression
   41                   | xvalue_expression "/=" rvalue_expression
   42                   | xvalue_expression "//=" rvalue_expression
   43                   | xvalue_expression "^^=" rvalue_expression
   44                   | rvalue_expression ">" rvalue_expression
   45                   | rvalue_expression ">=" rvalue_expression
   46                   | rvalue_expression "<=" rvalue_expression
   47                   | rvalue_expression "<=>" rvalue_expression
   48                   | rvalue_expression "&&" rvalue_expression
   49                   | rvalue_expression "||" rvalue_expression
   50                   | rvalue_expression "&" rvalue_expression
   51                   | rvalue_expression "^" rvalue_expression
   52                   | rvalue_expression "|" rvalue_expression
   53                   | rvalue_expression "~" rvalue_expression
   54                   | rvalue_expression ">>" rvalue_expression
   55                   | rvalue_expression "<<" rvalue_expression
   56                   | xvalue_expression "&=" rvalue_expression
   57                   | xvalue_expression "^=" rvalue_expression
   58                   | xvalue_expression "|=" rvalue_expression
   59                   | xvalue_expression "~=" rvalue_expression
   60                   | xvalue_expression ">>=" rvalue_expression
   61                   | xvalue_expression "<<=" rvalue_expression
   62                   | rvalue_expression "is" type
   63                   | "!" rvalue_expression
   64                   | "-" rvalue_expression
   65                   | "typeof" "(" rvalue_expression ")"
   66                   | "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | new_expression
   69                   | lambda_expression

   70 rvalue_expression: prvalue_expression
   71                  | xvalue_expression

   72 xvalue_expression: IDENTIFIER
   73                  | "this"
   74                  | "++" xvalue_expression
   75                  | "--" xvalue_expression
   76                  | xvalue_expression "++"
   77                  | xvalue_expression "--"
   78                  | "*" xvalue_expression
   79                  | xvalue_expression "." xvalue_expression
   80                  | xvalue_expression "->" xvalue_expression
   81                  | "(" rvalue_expression ")"
   82                  | "[" array_index_list "]"
   83                  | function_call

   84 literal: BOOL
   85        | NPTR
   86        | INT
   87        | FLOAT
   88        | STRING
   89        | CHAR

   90 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement

   91 new_expression: "new" type "(" function_call_list ")"
   92               | "new" "heap" type "(" function_call_list ")"

   93 array_index_list: array_index
   94                 | array_index_list "," array_index

   95 array_index: expression
   96            | expression0 ":" expression0

   97 function_call: xvalue_expression "(" function_argument_list ")"
   98              | xvalue_expression "(" ")"

   99 function_call_list: function_call_arg
  100                   | function_call_list "," function_call_arg ";"

  101 function_call_arg: expression

  102 statement: block_statement
  103          | loop_statement
  104          | conditional_statement
  105          | exception_statement
  106          | clean_up_statement
  107          | jump_statement
  108          | expression_statement
  109          | variable_declaration_statement
  110          | no_op_statement

  111 block_statement: "{" statements0 "}"

  112 statements0: statements
  113            | %empty

  114 statements: statement
  115           | statements statement

  116 loop_statement: while_loop_statement
  117               | do_loop_statement
  118               | for_loop_statement

  119 while_loop_statement: "while" "(" expression ")" block_statement

  120 do_loop_statement: "do" block_statement "while" "(" expression ")"

  121 for_loop_statement: "for" "(" for_loop_condition ")" block_statement

  122 for_loop_condition: variable_declaration ";" expression0 ";" expression0
  123                   | variable_declaration "in" expression

  124 conditional_statement: if_statement_sequence
  125                      | switch_statement

  126 if_statement_sequence: if_statement else_if_statements0 else_statement0

  127 if_statement: "if" "(" expression ")" block_statement

  128 else_if_statements0: else_if_statements
  129                    | %empty

  130 else_if_statements: else_if_statement
  131                   | else_if_statements else_if_statement

  132 else_if_statement: "else-if" "(" expression ")" block_statement

  133 else_statement0: else_statement
  134                | %empty

  135 else_statement: "else" block_statement

  136 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0

  137 case_blocks0: case_blocks
  138             | %empty

  139 case_blocks: case_block
  140            | case_blocks case_block

  141 case_block: "case" expression ":" block_statement jump_statement

  142 default_block0: default_block
  143               | %empty

  144 default_block: "default" ":" block_statement jump_statement

  145 exception_statement: try_block catch_blocks

  146 try_block: "try" block_statement

  147 catch_blocks: catch_block
  148             | catch_blocks catch_block

  149 catch_block: "catch" "(" variable_declaration ")" block_statement
  150            | "catch-all" block_statement

  151 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"

  152 clean_up_arg: IDENTIFIER
  153             | lambda_expression
  154             | function
  155             | anonymous_function

  156 jump_statement: "return" ";"
  157               | "break" ";"
  158               | "continue" ";"
  159               | "rethrow" ";"
  160               | "throw" expression ";"
  161               | "yield" ";"
  162               | "goto" IDENTIFIER ";"

  163 expression_statement: expression ";"

  164 variable_declaration_statement: variable_declaration ";"

  165 variable_declaration: "let" variable_declaration_block_list

  166 variable_declaration_block_list: variable_declaration_block
  167                                | variable_declaration_block_list "," variable_declaration_block

  168 variable_declaration_block: "let" type IDENTIFIER
  169                           | "let" type IDENTIFIER "=" expression

  170 no_op_statement: ";"

  171 function: function_header block_statement

  172 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  173                | "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

  174 function_modifiers: "virtual"
  175                   | "compeval"
  176                   | "static"
  177                   | "static" "compeval"

  178 function_argument_list: function_argument
  179                       | function_argument_list "," function_argument

  180 function_argument: type IDENTIFIER
  181                  | type "..."
  182                  | type IDENTIFIER "=" expression

  183 throwable_expression: "nothrowable"
  184                     | "nothrowable" "(" expression ")"

  185 return_types_list: return_type
  186                  | return_types_list "," return_type

  187 return_type: type
  188            | "typeof" "(" expression ")"

  189 anonymous_function: anonymous_function_header block_statement

  190 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  191                          | "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

  192 operator_overload: operator_overload_header block_statement
  193                  | operator_overload_header "=" function_options ";"

  194 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list

  195 operator: "+"
  196         | "-"
  197         | "*"
  198         | "/"
  199         | "//"
  200         | "^^"
  201         | "%"
  202         | "+="
  203         | "-="
  204         | "*="
  205         | "/="
  206         | "//="
  207         | "^^="
  208         | "%="
  209         | ">"
  210         | ">="
  211         | "<"
  212         | "<="
  213         | "<=>"
  214         | "=="
  215         | "!="
  216         | "^"
  217         | "&"
  218         | "~"
  219         | "<<"
  220         | ">>"
  221         | "="
  222         | "++"
  223         | "--"
  224         | "[" "]"
  225         | "(" ")"
  226         | "->"
  227         | "new"
  228         | type

  229 function_options: "delete"
  230                 | "default"

  231 callable: function
  232         | operator_overload

  233 callables: callable
  234          | callables callable

  235 enum: "enum" "{" enum_members_list "}"

  236 enum_members_list: enum_member
  237                  | enum_members_list "," enum_member

  238 enum_member: IDENTIFIER
  239            | IDENTIFIER "=" INT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <std::string> (258) 72 151 152 162 168 169 172 173 180 182 238 239
    TYPENAME <std::string> (259) 10 11
    BOOL <bool> (260) 84
    NPTR <bool> (261) 85
    INT <int> (262) 9 86 239
    FLOAT <double> (263) 87
    CHAR <char> (264) 89
    STRING <std::string> (265) 88
    "break" (266) 157
    "bit" (267) 12
    "bool" (268) 13
    "case" (269) 141
    "castas" (270) 66
    "catch" (271) 149
    "catch-all" (272) 150
    "char" (273) 18
    "cleanup" (274) 151
    "const" (275) 3
    "continue" (276) 158
    "compeval" (277) 175 177 190
    "default" (278) 144 230
    "delete" (279) 229
    "do" (280) 120
    "else" (281) 135
    "else-if" (282) 132
    "enum" (283) 235
    "float" (284) 17
    "for" (285) 121
    "func" (286) 172 173 190 191
    "goto" (287) 162
    "heap" (288) 92
    "if" (289) 127
    "in" (290) 123
    "int" (291) 15
    "is" (292) 62
    "let" (293) 165 168 169
    "long" (294) 16
    "new" (295) 91 92 227
    "nothrowable" (296) 183 184
    "operator" (297) 194
    "ref" (298) 22
    "rref" (299) 23
    "rethrow" (300) 159
    "return" (301) 156
    "short" (302) 14
    "static" (303) 176 177
    "super" (304) 31
    "switch" (305) 136
    "this" (306) 73
    "throw" (307) 160
    "try" (308) 146
    "typeof" (309) 65 188
    "virtual" (310) 174
    "while" (311) 119 120
    "yield" (312) 161
    "[" (313) 82 224
    "]" (314) 82 224
    "<" (315) 211
    ">" (316) 44 209
    "," (317) 21 94 100 151 167 179 186 237
    "+" (318) 32 195
    "-" (319) 33 64 196
    "/" (320) 35 198
    "//" (321) 36 199
    "*" (322) 34 78 197
    "^^" (323) 37 200
    "%" (324) 201
    "+=" (325) 38 202
    "-=" (326) 39 203
    "*=" (327) 40 204
    "/=" (328) 41 205
    "//=" (329) 42 206
    "^^=" (330) 43 207
    "%=" (331) 208
    "<=" (332) 46 212
    ">=" (333) 45 210
    "==" (334) 214
    "!=" (335) 215
    "<=>" (336) 47 213
    "&&" (337) 48
    "||" (338) 49
    "&" (339) 50 217
    "|" (340) 52
    "!" (341) 19 63 66
    "^" (342) 51 216
    "~" (343) 53 218
    ">>" (344) 54 220
    "<<" (345) 55 219
    "=" (346) 25 169 182 193 221 239
    "++" (347) 74 76 222
    "--" (348) 75 77 223
    "(" (349) 19 65 66 67 81 90 91 92 97 98 119 120 121 127 132 136 149 151 172 173 184 188 190 191 194 225
    ")" (350) 19 65 66 67 81 90 91 92 97 98 119 120 121 127 132 136 149 151 172 173 184 188 190 191 194 225
    "?" (351) 67
    ":" (352) 67 96 141 144
    "." (353) 79
    "->" (354) 80 90 172 173 190 191 194 226
    "{" (355) 111 235
    "}" (356) 111 235
    "=>" (357) 90
    ";" (358) 100 122 151 156 157 158 159 160 161 162 163 164 170 193
    "..." (359) 181
    "&=" (360) 56
    "^=" (361) 57
    "|=" (362) 58
    "~=" (363) 59
    "<<=" (364) 61
    ">>=" (365) 60
    POINTER_TYPE (366) 8
    ARRAYL (367) 9
    ARRAYR (368) 9
    UMINUS (369)
    POSTINC (370)
    POSTDEC (371)
    TERN (372)
    DEREF (373)


Nonterminals, with rules where they appear

    $accept (119)
        on left: 0
    start (120)
        on left: 1 2
        on right: 0
    type (121)
        on left: 3 4
        on right: 20 21 62 66 91 92 168 169 180 181 182 187 228
    type_root (122)
        on left: 5 6
        on right: 3 4
    non_reference_type (123)
        on left: 7 8 9
        on right: 5 22 23
    type_core (124)
        on left: 10 11 12 13 14 15 16 17 18
        on right: 7 8 9
    type_template_paramaters (125)
        on left: 19
        on right: 10
    type_list (126)
        on left: 20 21
        on right: 19 21
    reference_type (127)
        on left: 22 23
        on right: 6
    expression (128)
        on left: 24 25
        on right: 26 95 101 119 120 123 127 132 136 141 160 163 169 182 184 188
    expression0 (129)
        on left: 26 27
        on right: 96 122
    assignment_arg_expression (130)
        on left: 28 29
        on right: 24
    prvalue_expression (131)
        on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
        on right: 29 70
    rvalue_expression (132)
        on left: 70 71
        on right: 25 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 81
    xvalue_expression (133)
        on left: 72 73 74 75 76 77 78 79 80 81 82 83
        on right: 25 28 38 39 40 41 42 43 56 57 58 59 60 61 71 74 75 76 77 78 79 80 97 98
    literal (134)
        on left: 84 85 86 87 88 89
        on right: 30
    lambda_expression (135)
        on left: 90
        on right: 69 153
    new_expression (136)
        on left: 91 92
        on right: 68
    array_index_list (137)
        on left: 93 94
        on right: 82 94
    array_index (138)
        on left: 95 96
        on right: 93 94
    function_call (139)
        on left: 97 98
        on right: 83
    function_call_list (140)
        on left: 99 100
        on right: 91 92 100
    function_call_arg (141)
        on left: 101
        on right: 99 100
    statement (142)
        on left: 102 103 104 105 106 107 108 109 110
        on right: 114 115
    block_statement (143)
        on left: 111
        on right: 90 102 119 120 121 127 132 135 141 144 146 149 150 171 189 192
    statements0 (144)
        on left: 112 113
        on right: 111
    statements (145)
        on left: 114 115
        on right: 112 115
    loop_statement (146)
        on left: 116 117 118
        on right: 103
    while_loop_statement (147)
        on left: 119
        on right: 116
    do_loop_statement (148)
        on left: 120
        on right: 117
    for_loop_statement (149)
        on left: 121
        on right: 118
    for_loop_condition (150)
        on left: 122 123
        on right: 121
    conditional_statement (151)
        on left: 124 125
        on right: 104
    if_statement_sequence (152)
        on left: 126
        on right: 124
    if_statement (153)
        on left: 127
        on right: 126
    else_if_statements0 (154)
        on left: 128 129
        on right: 126
    else_if_statements (155)
        on left: 130 131
        on right: 128 131
    else_if_statement (156)
        on left: 132
        on right: 130 131
    else_statement0 (157)
        on left: 133 134
        on right: 126
    else_statement (158)
        on left: 135
        on right: 133
    switch_statement (159)
        on left: 136
        on right: 125
    case_blocks0 (160)
        on left: 137 138
        on right: 136
    case_blocks (161)
        on left: 139 140
        on right: 137 140
    case_block (162)
        on left: 141
        on right: 139 140
    default_block0 (163)
        on left: 142 143
        on right: 136
    default_block (164)
        on left: 144
        on right: 142
    exception_statement (165)
        on left: 145
        on right: 105
    try_block (166)
        on left: 146
        on right: 145
    catch_blocks (167)
        on left: 147 148
        on right: 145 148
    catch_block (168)
        on left: 149 150
        on right: 147 148
    clean_up_statement (169)
        on left: 151
        on right: 106
    clean_up_arg (170)
        on left: 152 153 154 155
        on right: 151
    jump_statement (171)
        on left: 156 157 158 159 160 161 162
        on right: 107 141 144
    expression_statement (172)
        on left: 163
        on right: 108
    variable_declaration_statement (173)
        on left: 164
        on right: 109
    variable_declaration (174)
        on left: 165
        on right: 122 123 149 164
    variable_declaration_block_list (175)
        on left: 166 167
        on right: 165 167
    variable_declaration_block (176)
        on left: 168 169
        on right: 166 167
    no_op_statement (177)
        on left: 170
        on right: 110
    function (178)
        on left: 171
        on right: 154 231
    function_header (179)
        on left: 172 173
        on right: 171
    function_modifiers (180)
        on left: 174 175 176 177
        on right: 172
    function_argument_list (181)
        on left: 178 179
        on right: 90 97 172 173 179 190 191 194
    function_argument (182)
        on left: 180 181 182
        on right: 178 179
    throwable_expression (183)
        on left: 183 184
        on right: 172 173 190 191 194
    return_types_list (184)
        on left: 185 186
        on right: 90 172 173 186 190 191 194
    return_type (185)
        on left: 187 188
        on right: 185 186
    anonymous_function (186)
        on left: 189
        on right: 155
    anonymous_function_header (187)
        on left: 190 191
        on right: 189
    operator_overload (188)
        on left: 192 193
        on right: 232
    operator_overload_header (189)
        on left: 194
        on right: 192 193
    operator (190)
        on left: 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228
        on right: 194
    function_options (191)
        on left: 229 230
        on right: 193
    callable (192)
        on left: 231 232
        on right: 233 234
    callables (193)
        on left: 233 234
        on right: 1 234
    enum (194)
        on left: 235
        on right: 2
    enum_members_list (195)
        on left: 236 237
        on right: 235 237
    enum_member (196)
        on left: 238 239
        on right: 236 237


State 0

    0 $accept: • start $end
    1 start: • callables
    2      | • enum
  171 function: • function_header block_statement
  172 function_header: • "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  173                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  192 operator_overload: • operator_overload_header block_statement
  193                  | • operator_overload_header "=" function_options ";"
  194 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  231 callable: • function
  232         | • operator_overload
  233 callables: • callable
  234          | • callables callable
  235 enum: • "enum" "{" enum_members_list "}"

    "enum"      shift, and go to state 1
    "func"      shift, and go to state 2
    "operator"  shift, and go to state 3

    start                     go to state 4
    function                  go to state 5
    function_header           go to state 6
    operator_overload         go to state 7
    operator_overload_header  go to state 8
    callable                  go to state 9
    callables                 go to state 10
    enum                      go to state 11


State 1

  235 enum: "enum" • "{" enum_members_list "}"

    "{"  shift, and go to state 12


State 2

  172 function_header: "func" • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  173                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  174 function_modifiers: • "virtual"
  175                   | • "compeval"
  176                   | • "static"
  177                   | • "static" "compeval"

    IDENTIFIER  shift, and go to state 13
    "compeval"  shift, and go to state 14
    "static"    shift, and go to state 15
    "virtual"   shift, and go to state 16

    function_modifiers  go to state 17


State 3

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  194 operator_overload_header: "operator" • operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  195 operator: • "+"
  196         | • "-"
  197         | • "*"
  198         | • "/"
  199         | • "//"
  200         | • "^^"
  201         | • "%"
  202         | • "+="
  203         | • "-="
  204         | • "*="
  205         | • "/="
  206         | • "//="
  207         | • "^^="
  208         | • "%="
  209         | • ">"
  210         | • ">="
  211         | • "<"
  212         | • "<="
  213         | • "<=>"
  214         | • "=="
  215         | • "!="
  216         | • "^"
  217         | • "&"
  218         | • "~"
  219         | • "<<"
  220         | • ">>"
  221         | • "="
  222         | • "++"
  223         | • "--"
  224         | • "[" "]"
  225         | • "(" ")"
  226         | • "->"
  227         | • "new"
  228         | • type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "new"     shift, and go to state 26
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "["       shift, and go to state 30
    "<"       shift, and go to state 31
    ">"       shift, and go to state 32
    "+"       shift, and go to state 33
    "-"       shift, and go to state 34
    "/"       shift, and go to state 35
    "//"      shift, and go to state 36
    "*"       shift, and go to state 37
    "^^"      shift, and go to state 38
    "%"       shift, and go to state 39
    "+="      shift, and go to state 40
    "-="      shift, and go to state 41
    "*="      shift, and go to state 42
    "/="      shift, and go to state 43
    "//="     shift, and go to state 44
    "^^="     shift, and go to state 45
    "%="      shift, and go to state 46
    "<="      shift, and go to state 47
    ">="      shift, and go to state 48
    "=="      shift, and go to state 49
    "!="      shift, and go to state 50
    "<=>"     shift, and go to state 51
    "&"       shift, and go to state 52
    "^"       shift, and go to state 53
    "~"       shift, and go to state 54
    ">>"      shift, and go to state 55
    "<<"      shift, and go to state 56
    "="       shift, and go to state 57
    "++"      shift, and go to state 58
    "--"      shift, and go to state 59
    "("       shift, and go to state 60
    "->"      shift, and go to state 61

    type                go to state 62
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    operator            go to state 67


State 4

    0 $accept: start • $end

    $end  shift, and go to state 68


State 5

  231 callable: function •

    $default  reduce using rule 231 (callable)


State 6

  111 block_statement: • "{" statements0 "}"
  171 function: function_header • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 70


State 7

  232 callable: operator_overload •

    $default  reduce using rule 232 (callable)


State 8

  111 block_statement: • "{" statements0 "}"
  192 operator_overload: operator_overload_header • block_statement
  193                  | operator_overload_header • "=" function_options ";"

    "="  shift, and go to state 71
    "{"  shift, and go to state 69

    block_statement  go to state 72


State 9

  233 callables: callable •

    $default  reduce using rule 233 (callables)


State 10

    1 start: callables •  [$end]
  171 function: • function_header block_statement
  172 function_header: • "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  173                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  192 operator_overload: • operator_overload_header block_statement
  193                  | • operator_overload_header "=" function_options ";"
  194 operator_overload_header: • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  231 callable: • function
  232         | • operator_overload
  234 callables: callables • callable

    "func"      shift, and go to state 2
    "operator"  shift, and go to state 3

    $default  reduce using rule 1 (start)

    function                  go to state 5
    function_header           go to state 6
    operator_overload         go to state 7
    operator_overload_header  go to state 8
    callable                  go to state 73


State 11

    2 start: enum •

    $default  reduce using rule 2 (start)


State 12

  235 enum: "enum" "{" • enum_members_list "}"
  236 enum_members_list: • enum_member
  237                  | • enum_members_list "," enum_member
  238 enum_member: • IDENTIFIER
  239            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 74

    enum_members_list  go to state 75
    enum_member        go to state 76


State 13

  173 function_header: "func" IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 77


State 14

  175 function_modifiers: "compeval" •

    $default  reduce using rule 175 (function_modifiers)


State 15

  176 function_modifiers: "static" •  [IDENTIFIER]
  177                   | "static" • "compeval"

    "compeval"  shift, and go to state 78

    $default  reduce using rule 176 (function_modifiers)


State 16

  174 function_modifiers: "virtual" •

    $default  reduce using rule 174 (function_modifiers)


State 17

  172 function_header: "func" function_modifiers • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 79


State 18

   10 type_core: TYPENAME • type_template_paramaters
   11          | TYPENAME •  [IDENTIFIER, "in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", POINTER_TYPE, ARRAYL]
   19 type_template_paramaters: • "!" "(" type_list ")"

    "!"  shift, and go to state 80

    $default  reduce using rule 11 (type_core)

    type_template_paramaters  go to state 81


State 19

   12 type_core: "bit" •

    $default  reduce using rule 12 (type_core)


State 20

   13 type_core: "bool" •

    $default  reduce using rule 13 (type_core)


State 21

   18 type_core: "char" •

    $default  reduce using rule 18 (type_core)


State 22

    3 type: "const" • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type_root           go to state 82
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 23

   17 type_core: "float" •

    $default  reduce using rule 17 (type_core)


State 24

   15 type_core: "int" •

    $default  reduce using rule 15 (type_core)


State 25

   16 type_core: "long" •

    $default  reduce using rule 16 (type_core)


State 26

  227 operator: "new" •

    $default  reduce using rule 227 (operator)


State 27

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: "ref" • non_reference_type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "short"   shift, and go to state 29

    non_reference_type  go to state 83
    type_core           go to state 65


State 28

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   23 reference_type: "rref" • non_reference_type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "short"   shift, and go to state 29

    non_reference_type  go to state 84
    type_core           go to state 65


State 29

   14 type_core: "short" •

    $default  reduce using rule 14 (type_core)


State 30

  224 operator: "[" • "]"

    "]"  shift, and go to state 85


State 31

  211 operator: "<" •

    $default  reduce using rule 211 (operator)


State 32

  209 operator: ">" •

    $default  reduce using rule 209 (operator)


State 33

  195 operator: "+" •

    $default  reduce using rule 195 (operator)


State 34

  196 operator: "-" •

    $default  reduce using rule 196 (operator)


State 35

  198 operator: "/" •

    $default  reduce using rule 198 (operator)


State 36

  199 operator: "//" •

    $default  reduce using rule 199 (operator)


State 37

  197 operator: "*" •

    $default  reduce using rule 197 (operator)


State 38

  200 operator: "^^" •

    $default  reduce using rule 200 (operator)


State 39

  201 operator: "%" •

    $default  reduce using rule 201 (operator)


State 40

  202 operator: "+=" •

    $default  reduce using rule 202 (operator)


State 41

  203 operator: "-=" •

    $default  reduce using rule 203 (operator)


State 42

  204 operator: "*=" •

    $default  reduce using rule 204 (operator)


State 43

  205 operator: "/=" •

    $default  reduce using rule 205 (operator)


State 44

  206 operator: "//=" •

    $default  reduce using rule 206 (operator)


State 45

  207 operator: "^^=" •

    $default  reduce using rule 207 (operator)


State 46

  208 operator: "%=" •

    $default  reduce using rule 208 (operator)


State 47

  212 operator: "<=" •

    $default  reduce using rule 212 (operator)


State 48

  210 operator: ">=" •

    $default  reduce using rule 210 (operator)


State 49

  214 operator: "==" •

    $default  reduce using rule 214 (operator)


State 50

  215 operator: "!=" •

    $default  reduce using rule 215 (operator)


State 51

  213 operator: "<=>" •

    $default  reduce using rule 213 (operator)


State 52

  217 operator: "&" •

    $default  reduce using rule 217 (operator)


State 53

  216 operator: "^" •

    $default  reduce using rule 216 (operator)


State 54

  218 operator: "~" •

    $default  reduce using rule 218 (operator)


State 55

  220 operator: ">>" •

    $default  reduce using rule 220 (operator)


State 56

  219 operator: "<<" •

    $default  reduce using rule 219 (operator)


State 57

  221 operator: "=" •

    $default  reduce using rule 221 (operator)


State 58

  222 operator: "++" •

    $default  reduce using rule 222 (operator)


State 59

  223 operator: "--" •

    $default  reduce using rule 223 (operator)


State 60

  225 operator: "(" • ")"

    ")"  shift, and go to state 86


State 61

  226 operator: "->" •

    $default  reduce using rule 226 (operator)


State 62

  228 operator: type •

    $default  reduce using rule 228 (operator)


State 63

    4 type: type_root •

    $default  reduce using rule 4 (type)


State 64

    5 type_root: non_reference_type •

    $default  reduce using rule 5 (type_root)


State 65

    7 non_reference_type: type_core •  [IDENTIFIER, "in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "..."]
    8                   | type_core • POINTER_TYPE
    9                   | type_core • ARRAYL INT ARRAYR

    POINTER_TYPE  shift, and go to state 87
    ARRAYL        shift, and go to state 88

    $default  reduce using rule 7 (non_reference_type)


State 66

    6 type_root: reference_type •

    $default  reduce using rule 6 (type_root)


State 67

  194 operator_overload_header: "operator" operator • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 89


State 68

    0 $accept: start $end •

    $default  accept


State 69

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  102 statement: • block_statement
  103          | • loop_statement
  104          | • conditional_statement
  105          | • exception_statement
  106          | • clean_up_statement
  107          | • jump_statement
  108          | • expression_statement
  109          | • variable_declaration_statement
  110          | • no_op_statement
  111 block_statement: • "{" statements0 "}"
  111                | "{" • statements0 "}"
  112 statements0: • statements
  113            | • %empty  ["}"]
  114 statements: • statement
  115           | • statements statement
  116 loop_statement: • while_loop_statement
  117               | • do_loop_statement
  118               | • for_loop_statement
  119 while_loop_statement: • "while" "(" expression ")" block_statement
  120 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  121 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  124 conditional_statement: • if_statement_sequence
  125                      | • switch_statement
  126 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  127 if_statement: • "if" "(" expression ")" block_statement
  136 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  145 exception_statement: • try_block catch_blocks
  146 try_block: • "try" block_statement
  151 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  156 jump_statement: • "return" ";"
  157               | • "break" ";"
  158               | • "continue" ";"
  159               | • "rethrow" ";"
  160               | • "throw" expression ";"
  161               | • "yield" ";"
  162               | • "goto" IDENTIFIER ";"
  163 expression_statement: • expression ";"
  164 variable_declaration_statement: • variable_declaration ";"
  165 variable_declaration: • "let" variable_declaration_block_list
  170 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "break"     shift, and go to state 97
    "castas"    shift, and go to state 98
    "cleanup"   shift, and go to state 99
    "continue"  shift, and go to state 100
    "do"        shift, and go to state 101
    "for"       shift, and go to state 102
    "goto"      shift, and go to state 103
    "if"        shift, and go to state 104
    "let"       shift, and go to state 105
    "new"       shift, and go to state 106
    "rethrow"   shift, and go to state 107
    "return"    shift, and go to state 108
    "super"     shift, and go to state 109
    "switch"    shift, and go to state 110
    "this"      shift, and go to state 111
    "throw"     shift, and go to state 112
    "try"       shift, and go to state 113
    "typeof"    shift, and go to state 114
    "while"     shift, and go to state 115
    "yield"     shift, and go to state 116
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123
    "{"         shift, and go to state 69
    ";"         shift, and go to state 124

    $default  reduce using rule 113 (statements0)

    expression                      go to state 125
    assignment_arg_expression       go to state 126
    prvalue_expression              go to state 127
    rvalue_expression               go to state 128
    xvalue_expression               go to state 129
    literal                         go to state 130
    lambda_expression               go to state 131
    new_expression                  go to state 132
    function_call                   go to state 133
    statement                       go to state 134
    block_statement                 go to state 135
    statements0                     go to state 136
    statements                      go to state 137
    loop_statement                  go to state 138
    while_loop_statement            go to state 139
    do_loop_statement               go to state 140
    for_loop_statement              go to state 141
    conditional_statement           go to state 142
    if_statement_sequence           go to state 143
    if_statement                    go to state 144
    switch_statement                go to state 145
    exception_statement             go to state 146
    try_block                       go to state 147
    clean_up_statement              go to state 148
    jump_statement                  go to state 149
    expression_statement            go to state 150
    variable_declaration_statement  go to state 151
    variable_declaration            go to state 152
    no_op_statement                 go to state 153


State 70

  171 function: function_header block_statement •

    $default  reduce using rule 171 (function)


State 71

  193 operator_overload: operator_overload_header "=" • function_options ";"
  229 function_options: • "delete"
  230                 | • "default"

    "default"  shift, and go to state 154
    "delete"   shift, and go to state 155

    function_options  go to state 156


State 72

  192 operator_overload: operator_overload_header block_statement •

    $default  reduce using rule 192 (operator_overload)


State 73

  234 callables: callables callable •

    $default  reduce using rule 234 (callables)


State 74

  238 enum_member: IDENTIFIER •  [",", "}"]
  239            | IDENTIFIER • "=" INT

    "="  shift, and go to state 157

    $default  reduce using rule 238 (enum_member)


State 75

  235 enum: "enum" "{" enum_members_list • "}"
  237 enum_members_list: enum_members_list • "," enum_member

    ","  shift, and go to state 158
    "}"  shift, and go to state 159


State 76

  236 enum_members_list: enum_member •

    $default  reduce using rule 236 (enum_members_list)


State 77

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  173 function_header: "func" IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 161
    function_argument       go to state 162


State 78

  177 function_modifiers: "static" "compeval" •

    $default  reduce using rule 177 (function_modifiers)


State 79

  172 function_header: "func" function_modifiers IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 163


State 80

   19 type_template_paramaters: "!" • "(" type_list ")"

    "("  shift, and go to state 164


State 81

   10 type_core: TYPENAME type_template_paramaters •

    $default  reduce using rule 10 (type_core)


State 82

    3 type: "const" type_root •

    $default  reduce using rule 3 (type)


State 83

   22 reference_type: "ref" non_reference_type •

    $default  reduce using rule 22 (reference_type)


State 84

   23 reference_type: "rref" non_reference_type •

    $default  reduce using rule 23 (reference_type)


State 85

  224 operator: "[" "]" •

    $default  reduce using rule 224 (operator)


State 86

  225 operator: "(" ")" •

    $default  reduce using rule 225 (operator)


State 87

    8 non_reference_type: type_core POINTER_TYPE •

    $default  reduce using rule 8 (non_reference_type)


State 88

    9 non_reference_type: type_core ARRAYL • INT ARRAYR

    INT  shift, and go to state 165


State 89

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression
  194 operator_overload_header: "operator" operator "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 166
    function_argument       go to state 162


State 90

   72 xvalue_expression: IDENTIFIER •

    $default  reduce using rule 72 (xvalue_expression)


State 91

   84 literal: BOOL •

    $default  reduce using rule 84 (literal)


State 92

   85 literal: NPTR •

    $default  reduce using rule 85 (literal)


State 93

   86 literal: INT •

    $default  reduce using rule 86 (literal)


State 94

   87 literal: FLOAT •

    $default  reduce using rule 87 (literal)


State 95

   89 literal: CHAR •

    $default  reduce using rule 89 (literal)


State 96

   88 literal: STRING •

    $default  reduce using rule 88 (literal)


State 97

  157 jump_statement: "break" • ";"

    ";"  shift, and go to state 167


State 98

   66 prvalue_expression: "castas" • "!" "(" type ")" "(" rvalue_expression ")"

    "!"  shift, and go to state 168


State 99

  151 clean_up_statement: "cleanup" • "(" IDENTIFIER "," clean_up_arg ")" ";"

    "("  shift, and go to state 169


State 100

  158 jump_statement: "continue" • ";"

    ";"  shift, and go to state 170


State 101

  111 block_statement: • "{" statements0 "}"
  120 do_loop_statement: "do" • block_statement "while" "(" expression ")"

    "{"  shift, and go to state 69

    block_statement  go to state 171


State 102

  121 for_loop_statement: "for" • "(" for_loop_condition ")" block_statement

    "("  shift, and go to state 172


State 103

  162 jump_statement: "goto" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 173


State 104

  127 if_statement: "if" • "(" expression ")" block_statement

    "("  shift, and go to state 174


State 105

  165 variable_declaration: "let" • variable_declaration_block_list
  166 variable_declaration_block_list: • variable_declaration_block
  167                                | • variable_declaration_block_list "," variable_declaration_block
  168 variable_declaration_block: • "let" type IDENTIFIER
  169                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 175

    variable_declaration_block_list  go to state 176
    variable_declaration_block       go to state 177


State 106

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   91 new_expression: "new" • type "(" function_call_list ")"
   92               | "new" • "heap" type "(" function_call_list ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "heap"    shift, and go to state 178
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 179
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 107

  159 jump_statement: "rethrow" • ";"

    ";"  shift, and go to state 180


State 108

  156 jump_statement: "return" • ";"

    ";"  shift, and go to state 181


State 109

   31 prvalue_expression: "super" •

    $default  reduce using rule 31 (prvalue_expression)


State 110

  136 switch_statement: "switch" • "(" expression ")" case_blocks0 default_block0

    "("  shift, and go to state 182


State 111

   73 xvalue_expression: "this" •

    $default  reduce using rule 73 (xvalue_expression)


State 112

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  160 jump_statement: "throw" • expression ";"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 183
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 113

  111 block_statement: • "{" statements0 "}"
  146 try_block: "try" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 184


State 114

   65 prvalue_expression: "typeof" • "(" rvalue_expression ")"

    "("  shift, and go to state 185


State 115

  119 while_loop_statement: "while" • "(" expression ")" block_statement

    "("  shift, and go to state 186


State 116

  161 jump_statement: "yield" • ";"

    ";"  shift, and go to state 187


State 117

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   26 expression0: • expression
   27            | • %empty  [":"]
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   82                  | "[" • array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   93 array_index_list: • array_index
   94                 | • array_index_list "," array_index
   95 array_index: • expression
   96            | • expression0 ":" expression0
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    $default  reduce using rule 27 (expression0)

    expression                 go to state 188
    expression0                go to state 189
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    array_index_list           go to state 190
    array_index                go to state 191
    function_call              go to state 133


State 118

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   64                   | "-" • rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 193
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 119

   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   78                  | "*" • xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    "this"      shift, and go to state 111
    "["         shift, and go to state 117
    "*"         shift, and go to state 119
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 195

    xvalue_expression  go to state 196
    function_call      go to state 133


State 120

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   63                   | "!" • rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 197
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 121

   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   74                  | "++" • xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    "this"      shift, and go to state 111
    "["         shift, and go to state 117
    "*"         shift, and go to state 119
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 195

    xvalue_expression  go to state 198
    function_call      go to state 133


State 122

   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   75                  | "--" • xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    "this"      shift, and go to state 111
    "["         shift, and go to state 117
    "*"         shift, and go to state 119
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 195

    xvalue_expression  go to state 199
    function_call      go to state 133


State 123

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   67                   | "(" • rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   81                  | "(" • rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   90                  | "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 90
    TYPENAME    shift, and go to state 18
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "bit"       shift, and go to state 19
    "bool"      shift, and go to state 20
    "castas"    shift, and go to state 98
    "char"      shift, and go to state 21
    "const"     shift, and go to state 22
    "float"     shift, and go to state 23
    "int"       shift, and go to state 24
    "long"      shift, and go to state 25
    "new"       shift, and go to state 106
    "ref"       shift, and go to state 27
    "rref"      shift, and go to state 28
    "short"     shift, and go to state 29
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    prvalue_expression      go to state 192
    rvalue_expression       go to state 200
    xvalue_expression       go to state 194
    literal                 go to state 130
    lambda_expression       go to state 131
    new_expression          go to state 132
    function_call           go to state 133
    function_argument_list  go to state 201
    function_argument       go to state 162


State 124

  170 no_op_statement: ";" •

    $default  reduce using rule 170 (no_op_statement)


State 125

  163 expression_statement: expression • ";"

    ";"  shift, and go to state 202


State 126

   24 expression: assignment_arg_expression •

    $default  reduce using rule 24 (expression)


State 127

   29 assignment_arg_expression: prvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   70 rvalue_expression: prvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]

    "in"      reduce using rule 29 (assignment_arg_expression)
    "]"       reduce using rule 29 (assignment_arg_expression)
    ","       reduce using rule 29 (assignment_arg_expression)
    ")"       reduce using rule 29 (assignment_arg_expression)
    ":"       reduce using rule 29 (assignment_arg_expression)
    ";"       reduce using rule 29 (assignment_arg_expression)
    $default  reduce using rule 70 (rvalue_expression)


State 128

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221


State 129

   25 expression: xvalue_expression • "=" rvalue_expression
   28 assignment_arg_expression: xvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   38 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   39                   | xvalue_expression • "-=" rvalue_expression
   40                   | xvalue_expression • "*=" rvalue_expression
   41                   | xvalue_expression • "/=" rvalue_expression
   42                   | xvalue_expression • "//=" rvalue_expression
   43                   | xvalue_expression • "^^=" rvalue_expression
   56                   | xvalue_expression • "&=" rvalue_expression
   57                   | xvalue_expression • "^=" rvalue_expression
   58                   | xvalue_expression • "|=" rvalue_expression
   59                   | xvalue_expression • "~=" rvalue_expression
   60                   | xvalue_expression • ">>=" rvalue_expression
   61                   | xvalue_expression • "<<=" rvalue_expression
   71 rvalue_expression: xvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]
   76 xvalue_expression: xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   79                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression • "->" xvalue_expression
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 222
    "-="   shift, and go to state 223
    "*="   shift, and go to state 224
    "/="   shift, and go to state 225
    "//="  shift, and go to state 226
    "^^="  shift, and go to state 227
    "="    shift, and go to state 228
    "++"   shift, and go to state 229
    "--"   shift, and go to state 230
    "("    shift, and go to state 231
    "."    shift, and go to state 232
    "->"   shift, and go to state 233
    "&="   shift, and go to state 234
    "^="   shift, and go to state 235
    "|="   shift, and go to state 236
    "~="   shift, and go to state 237
    "<<="  shift, and go to state 238
    ">>="  shift, and go to state 239

    "in"      reduce using rule 28 (assignment_arg_expression)
    "]"       reduce using rule 28 (assignment_arg_expression)
    ","       reduce using rule 28 (assignment_arg_expression)
    ")"       reduce using rule 28 (assignment_arg_expression)
    ":"       reduce using rule 28 (assignment_arg_expression)
    ";"       reduce using rule 28 (assignment_arg_expression)
    $default  reduce using rule 71 (rvalue_expression)


State 130

   30 prvalue_expression: literal •

    $default  reduce using rule 30 (prvalue_expression)


State 131

   69 prvalue_expression: lambda_expression •

    $default  reduce using rule 69 (prvalue_expression)


State 132

   68 prvalue_expression: new_expression •

    $default  reduce using rule 68 (prvalue_expression)


State 133

   83 xvalue_expression: function_call •

    $default  reduce using rule 83 (xvalue_expression)


State 134

  114 statements: statement •

    $default  reduce using rule 114 (statements)


State 135

  102 statement: block_statement •

    $default  reduce using rule 102 (statement)


State 136

  111 block_statement: "{" statements0 • "}"

    "}"  shift, and go to state 240


State 137

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  102 statement: • block_statement
  103          | • loop_statement
  104          | • conditional_statement
  105          | • exception_statement
  106          | • clean_up_statement
  107          | • jump_statement
  108          | • expression_statement
  109          | • variable_declaration_statement
  110          | • no_op_statement
  111 block_statement: • "{" statements0 "}"
  112 statements0: statements •  ["}"]
  115 statements: statements • statement
  116 loop_statement: • while_loop_statement
  117               | • do_loop_statement
  118               | • for_loop_statement
  119 while_loop_statement: • "while" "(" expression ")" block_statement
  120 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  121 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  124 conditional_statement: • if_statement_sequence
  125                      | • switch_statement
  126 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  127 if_statement: • "if" "(" expression ")" block_statement
  136 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  145 exception_statement: • try_block catch_blocks
  146 try_block: • "try" block_statement
  151 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  156 jump_statement: • "return" ";"
  157               | • "break" ";"
  158               | • "continue" ";"
  159               | • "rethrow" ";"
  160               | • "throw" expression ";"
  161               | • "yield" ";"
  162               | • "goto" IDENTIFIER ";"
  163 expression_statement: • expression ";"
  164 variable_declaration_statement: • variable_declaration ";"
  165 variable_declaration: • "let" variable_declaration_block_list
  170 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "break"     shift, and go to state 97
    "castas"    shift, and go to state 98
    "cleanup"   shift, and go to state 99
    "continue"  shift, and go to state 100
    "do"        shift, and go to state 101
    "for"       shift, and go to state 102
    "goto"      shift, and go to state 103
    "if"        shift, and go to state 104
    "let"       shift, and go to state 105
    "new"       shift, and go to state 106
    "rethrow"   shift, and go to state 107
    "return"    shift, and go to state 108
    "super"     shift, and go to state 109
    "switch"    shift, and go to state 110
    "this"      shift, and go to state 111
    "throw"     shift, and go to state 112
    "try"       shift, and go to state 113
    "typeof"    shift, and go to state 114
    "while"     shift, and go to state 115
    "yield"     shift, and go to state 116
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123
    "{"         shift, and go to state 69
    ";"         shift, and go to state 124

    $default  reduce using rule 112 (statements0)

    expression                      go to state 125
    assignment_arg_expression       go to state 126
    prvalue_expression              go to state 127
    rvalue_expression               go to state 128
    xvalue_expression               go to state 129
    literal                         go to state 130
    lambda_expression               go to state 131
    new_expression                  go to state 132
    function_call                   go to state 133
    statement                       go to state 241
    block_statement                 go to state 135
    loop_statement                  go to state 138
    while_loop_statement            go to state 139
    do_loop_statement               go to state 140
    for_loop_statement              go to state 141
    conditional_statement           go to state 142
    if_statement_sequence           go to state 143
    if_statement                    go to state 144
    switch_statement                go to state 145
    exception_statement             go to state 146
    try_block                       go to state 147
    clean_up_statement              go to state 148
    jump_statement                  go to state 149
    expression_statement            go to state 150
    variable_declaration_statement  go to state 151
    variable_declaration            go to state 152
    no_op_statement                 go to state 153


State 138

  103 statement: loop_statement •

    $default  reduce using rule 103 (statement)


State 139

  116 loop_statement: while_loop_statement •

    $default  reduce using rule 116 (loop_statement)


State 140

  117 loop_statement: do_loop_statement •

    $default  reduce using rule 117 (loop_statement)


State 141

  118 loop_statement: for_loop_statement •

    $default  reduce using rule 118 (loop_statement)


State 142

  104 statement: conditional_statement •

    $default  reduce using rule 104 (statement)


State 143

  124 conditional_statement: if_statement_sequence •

    $default  reduce using rule 124 (conditional_statement)


State 144

  126 if_statement_sequence: if_statement • else_if_statements0 else_statement0
  128 else_if_statements0: • else_if_statements
  129                    | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  130 else_if_statements: • else_if_statement
  131                   | • else_if_statements else_if_statement
  132 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 242

    $default  reduce using rule 129 (else_if_statements0)

    else_if_statements0  go to state 243
    else_if_statements   go to state 244
    else_if_statement    go to state 245


State 145

  125 conditional_statement: switch_statement •

    $default  reduce using rule 125 (conditional_statement)


State 146

  105 statement: exception_statement •

    $default  reduce using rule 105 (statement)


State 147

  145 exception_statement: try_block • catch_blocks
  147 catch_blocks: • catch_block
  148             | • catch_blocks catch_block
  149 catch_block: • "catch" "(" variable_declaration ")" block_statement
  150            | • "catch-all" block_statement

    "catch"      shift, and go to state 246
    "catch-all"  shift, and go to state 247

    catch_blocks  go to state 248
    catch_block   go to state 249


State 148

  106 statement: clean_up_statement •

    $default  reduce using rule 106 (statement)


State 149

  107 statement: jump_statement •

    $default  reduce using rule 107 (statement)


State 150

  108 statement: expression_statement •

    $default  reduce using rule 108 (statement)


State 151

  109 statement: variable_declaration_statement •

    $default  reduce using rule 109 (statement)


State 152

  164 variable_declaration_statement: variable_declaration • ";"

    ";"  shift, and go to state 250


State 153

  110 statement: no_op_statement •

    $default  reduce using rule 110 (statement)


State 154

  230 function_options: "default" •

    $default  reduce using rule 230 (function_options)


State 155

  229 function_options: "delete" •

    $default  reduce using rule 229 (function_options)


State 156

  193 operator_overload: operator_overload_header "=" function_options • ";"

    ";"  shift, and go to state 251


State 157

  239 enum_member: IDENTIFIER "=" • INT

    INT  shift, and go to state 252


State 158

  237 enum_members_list: enum_members_list "," • enum_member
  238 enum_member: • IDENTIFIER
  239            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 74

    enum_member  go to state 253


State 159

  235 enum: "enum" "{" enum_members_list "}" •

    $default  reduce using rule 235 (enum)


State 160

  180 function_argument: type • IDENTIFIER
  181                  | type • "..."
  182                  | type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 254
    "..."       shift, and go to state 255


State 161

  173 function_header: "func" IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  179 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 256
    ")"  shift, and go to state 257


State 162

  178 function_argument_list: function_argument •

    $default  reduce using rule 178 (function_argument_list)


State 163

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  172 function_header: "func" function_modifiers IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 258
    function_argument       go to state 162


State 164

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   19 type_template_paramaters: "!" "(" • type_list ")"
   20 type_list: • type
   21          | • type_list "," type
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 259
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    type_list           go to state 260
    reference_type      go to state 66


State 165

    9 non_reference_type: type_core ARRAYL INT • ARRAYR

    ARRAYR  shift, and go to state 261


State 166

  179 function_argument_list: function_argument_list • "," function_argument
  194 operator_overload_header: "operator" operator "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 256
    ")"  shift, and go to state 262


State 167

  157 jump_statement: "break" ";" •

    $default  reduce using rule 157 (jump_statement)


State 168

   66 prvalue_expression: "castas" "!" • "(" type ")" "(" rvalue_expression ")"

    "("  shift, and go to state 263


State 169

  151 clean_up_statement: "cleanup" "(" • IDENTIFIER "," clean_up_arg ")" ";"

    IDENTIFIER  shift, and go to state 264


State 170

  158 jump_statement: "continue" ";" •

    $default  reduce using rule 158 (jump_statement)


State 171

  120 do_loop_statement: "do" block_statement • "while" "(" expression ")"

    "while"  shift, and go to state 265


State 172

  121 for_loop_statement: "for" "(" • for_loop_condition ")" block_statement
  122 for_loop_condition: • variable_declaration ";" expression0 ";" expression0
  123                   | • variable_declaration "in" expression
  165 variable_declaration: • "let" variable_declaration_block_list

    "let"  shift, and go to state 105

    for_loop_condition    go to state 266
    variable_declaration  go to state 267


State 173

  162 jump_statement: "goto" IDENTIFIER • ";"

    ";"  shift, and go to state 268


State 174

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  127 if_statement: "if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 269
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 175

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  168 variable_declaration_block: "let" • type IDENTIFIER
  169                           | "let" • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 270
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 176

  165 variable_declaration: "let" variable_declaration_block_list •  ["in", ")", ";"]
  167 variable_declaration_block_list: variable_declaration_block_list • "," variable_declaration_block

    ","  shift, and go to state 271

    $default  reduce using rule 165 (variable_declaration)


State 177

  166 variable_declaration_block_list: variable_declaration_block •

    $default  reduce using rule 166 (variable_declaration_block_list)


State 178

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   92 new_expression: "new" "heap" • type "(" function_call_list ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 272
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 179

   91 new_expression: "new" type • "(" function_call_list ")"

    "("  shift, and go to state 273


State 180

  159 jump_statement: "rethrow" ";" •

    $default  reduce using rule 159 (jump_statement)


State 181

  156 jump_statement: "return" ";" •

    $default  reduce using rule 156 (jump_statement)


State 182

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  136 switch_statement: "switch" "(" • expression ")" case_blocks0 default_block0

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 274
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 183

  160 jump_statement: "throw" expression • ";"

    ";"  shift, and go to state 275


State 184

  146 try_block: "try" block_statement •

    $default  reduce using rule 146 (try_block)


State 185

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   65                   | "typeof" "(" • rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 276
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 186

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  119 while_loop_statement: "while" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 277
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 187

  161 jump_statement: "yield" ";" •

    $default  reduce using rule 161 (jump_statement)


State 188

   26 expression0: expression •  [":"]
   95 array_index: expression •  ["]", ","]

    ":"       reduce using rule 26 (expression0)
    $default  reduce using rule 95 (array_index)


State 189

   96 array_index: expression0 • ":" expression0

    ":"  shift, and go to state 278


State 190

   82 xvalue_expression: "[" array_index_list • "]"
   94 array_index_list: array_index_list • "," array_index

    "]"  shift, and go to state 279
    ","  shift, and go to state 280


State 191

   93 array_index_list: array_index •

    $default  reduce using rule 93 (array_index_list)


State 192

   70 rvalue_expression: prvalue_expression •

    $default  reduce using rule 70 (rvalue_expression)


State 193

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   64                   | "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 219

    $default  reduce using rule 64 (prvalue_expression)

    Conflict between rule 64 and token "is" resolved as reduce ("is" < UMINUS).
    Conflict between rule 64 and token ">" resolved as reduce (">" < UMINUS).
    Conflict between rule 64 and token "+" resolved as reduce ("+" < UMINUS).
    Conflict between rule 64 and token "-" resolved as reduce ("-" < UMINUS).
    Conflict between rule 64 and token "/" resolved as reduce ("/" < UMINUS).
    Conflict between rule 64 and token "//" resolved as reduce ("//" < UMINUS).
    Conflict between rule 64 and token "*" resolved as reduce ("*" < UMINUS).
    Conflict between rule 64 and token "^^" resolved as reduce ("^^" < UMINUS).
    Conflict between rule 64 and token "<=" resolved as reduce ("<=" < UMINUS).
    Conflict between rule 64 and token ">=" resolved as reduce (">=" < UMINUS).
    Conflict between rule 64 and token "<=>" resolved as reduce ("<=>" < UMINUS).
    Conflict between rule 64 and token "&&" resolved as reduce ("&&" < UMINUS).
    Conflict between rule 64 and token "||" resolved as reduce ("||" < UMINUS).
    Conflict between rule 64 and token "&" resolved as reduce ("&" < UMINUS).
    Conflict between rule 64 and token "|" resolved as reduce ("|" < UMINUS).
    Conflict between rule 64 and token "^" resolved as reduce ("^" < UMINUS).
    Conflict between rule 64 and token "~" resolved as shift (%right "~").
    Conflict between rule 64 and token ">>" resolved as reduce (">>" < UMINUS).
    Conflict between rule 64 and token "<<" resolved as reduce ("<<" < UMINUS).


State 194

   38 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   39                   | xvalue_expression • "-=" rvalue_expression
   40                   | xvalue_expression • "*=" rvalue_expression
   41                   | xvalue_expression • "/=" rvalue_expression
   42                   | xvalue_expression • "//=" rvalue_expression
   43                   | xvalue_expression • "^^=" rvalue_expression
   56                   | xvalue_expression • "&=" rvalue_expression
   57                   | xvalue_expression • "^=" rvalue_expression
   58                   | xvalue_expression • "|=" rvalue_expression
   59                   | xvalue_expression • "~=" rvalue_expression
   60                   | xvalue_expression • ">>=" rvalue_expression
   61                   | xvalue_expression • "<<=" rvalue_expression
   71 rvalue_expression: xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", ")", ":", ";"]
   76 xvalue_expression: xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   79                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression • "->" xvalue_expression
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 222
    "-="   shift, and go to state 223
    "*="   shift, and go to state 224
    "/="   shift, and go to state 225
    "//="  shift, and go to state 226
    "^^="  shift, and go to state 227
    "++"   shift, and go to state 229
    "--"   shift, and go to state 230
    "("    shift, and go to state 231
    "."    shift, and go to state 232
    "->"   shift, and go to state 233
    "&="   shift, and go to state 234
    "^="   shift, and go to state 235
    "|="   shift, and go to state 236
    "~="   shift, and go to state 237
    "<<="  shift, and go to state 238
    ">>="  shift, and go to state 239

    $default  reduce using rule 71 (rvalue_expression)


State 195

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   81                  | "(" • rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 281
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 196

   76 xvalue_expression: xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   78                  | "*" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   79                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression • "->" xvalue_expression
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 229
    "--"  shift, and go to state 230
    "("   shift, and go to state 231
    "."   shift, and go to state 232
    "->"  shift, and go to state 233

    $default  reduce using rule 78 (xvalue_expression)

    Conflict between rule 78 and token "++" resolved as shift (%right "++").
    Conflict between rule 78 and token "--" resolved as shift (%right "--").
    Conflict between rule 78 and token "(" resolved as shift (DEREF < "(").
    Conflict between rule 78 and token "." resolved as shift (DEREF < ".").
    Conflict between rule 78 and token "->" resolved as shift (DEREF < "->").


State 197

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   63                   | "!" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 219

    $default  reduce using rule 63 (prvalue_expression)

    Conflict between rule 63 and token "is" resolved as reduce ("is" < "!").
    Conflict between rule 63 and token ">" resolved as reduce (">" < "!").
    Conflict between rule 63 and token "+" resolved as reduce ("+" < "!").
    Conflict between rule 63 and token "-" resolved as reduce ("-" < "!").
    Conflict between rule 63 and token "/" resolved as reduce ("/" < "!").
    Conflict between rule 63 and token "//" resolved as reduce ("//" < "!").
    Conflict between rule 63 and token "*" resolved as reduce ("*" < "!").
    Conflict between rule 63 and token "^^" resolved as reduce ("^^" < "!").
    Conflict between rule 63 and token "<=" resolved as reduce ("<=" < "!").
    Conflict between rule 63 and token ">=" resolved as reduce (">=" < "!").
    Conflict between rule 63 and token "<=>" resolved as reduce ("<=>" < "!").
    Conflict between rule 63 and token "&&" resolved as reduce ("&&" < "!").
    Conflict between rule 63 and token "||" resolved as reduce ("||" < "!").
    Conflict between rule 63 and token "&" resolved as reduce ("&" < "!").
    Conflict between rule 63 and token "|" resolved as reduce ("|" < "!").
    Conflict between rule 63 and token "^" resolved as reduce ("^" < "!").
    Conflict between rule 63 and token "~" resolved as shift (%right "~").
    Conflict between rule 63 and token ">>" resolved as reduce (">>" < "!").
    Conflict between rule 63 and token "<<" resolved as reduce ("<<" < "!").


State 198

   74 xvalue_expression: "++" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   76                  | xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   79                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression • "->" xvalue_expression
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 229
    "--"  shift, and go to state 230
    "("   shift, and go to state 231
    "."   shift, and go to state 232
    "->"  shift, and go to state 233

    $default  reduce using rule 74 (xvalue_expression)

    Conflict between rule 74 and token "++" resolved as shift (%right "++").
    Conflict between rule 74 and token "--" resolved as shift (%right "--").
    Conflict between rule 74 and token "(" resolved as shift ("++" < "(").
    Conflict between rule 74 and token "." resolved as shift ("++" < ".").
    Conflict between rule 74 and token "->" resolved as shift ("++" < "->").


State 199

   75 xvalue_expression: "--" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   76                  | xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   79                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression • "->" xvalue_expression
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 229
    "--"  shift, and go to state 230
    "("   shift, and go to state 231
    "."   shift, and go to state 232
    "->"  shift, and go to state 233

    $default  reduce using rule 75 (xvalue_expression)

    Conflict between rule 75 and token "++" resolved as shift (%right "++").
    Conflict between rule 75 and token "--" resolved as shift (%right "--").
    Conflict between rule 75 and token "(" resolved as shift ("--" < "(").
    Conflict between rule 75 and token "." resolved as shift ("--" < ".").
    Conflict between rule 75 and token "->" resolved as shift ("--" < "->").


State 200

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   67                   | "(" rvalue_expression • ")" "?" rvalue_expression ":" rvalue_expression
   81 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221
    ")"    shift, and go to state 282


State 201

   90 lambda_expression: "(" function_argument_list • ")" "->" return_types_list "=>" block_statement
  179 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 256
    ")"  shift, and go to state 283


State 202

  163 expression_statement: expression ";" •

    $default  reduce using rule 163 (expression_statement)


State 203

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   62 prvalue_expression: rvalue_expression "is" • type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 284
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 204

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   44                   | rvalue_expression ">" • rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 285
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 205

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   32                   | rvalue_expression "+" • rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 286
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 206

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   33                   | rvalue_expression "-" • rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 287
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 207

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   35                   | rvalue_expression "/" • rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 288
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 208

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   36                   | rvalue_expression "//" • rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 289
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 209

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   34                   | rvalue_expression "*" • rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 290
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 210

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   37                   | rvalue_expression "^^" • rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 291
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 211

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   46                   | rvalue_expression "<=" • rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 292
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 212

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   45                   | rvalue_expression ">=" • rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 293
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 213

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   47                   | rvalue_expression "<=>" • rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 294
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 214

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   48                   | rvalue_expression "&&" • rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 295
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 215

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   49                   | rvalue_expression "||" • rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 296
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 216

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   50                   | rvalue_expression "&" • rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 297
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 217

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   52                   | rvalue_expression "|" • rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 298
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 218

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   51                   | rvalue_expression "^" • rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 299
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 219

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   53                   | rvalue_expression "~" • rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 300
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 220

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   54                   | rvalue_expression ">>" • rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 301
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 221

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   55                   | rvalue_expression "<<" • rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 302
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 222

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   38                   | xvalue_expression "+=" • rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 303
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 223

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   39                   | xvalue_expression "-=" • rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 304
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 224

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   40                   | xvalue_expression "*=" • rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 305
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 225

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   41                   | xvalue_expression "/=" • rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 306
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 226

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   42                   | xvalue_expression "//=" • rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 307
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 227

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   43                   | xvalue_expression "^^=" • rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 308
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 228

   25 expression: xvalue_expression "=" • rvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 309
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 229

   76 xvalue_expression: xvalue_expression "++" •

    $default  reduce using rule 76 (xvalue_expression)


State 230

   77 xvalue_expression: xvalue_expression "--" •

    $default  reduce using rule 77 (xvalue_expression)


State 231

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   97 function_call: xvalue_expression "(" • function_argument_list ")"
   98              | xvalue_expression "(" • ")"
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    ")"       shift, and go to state 310

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 311
    function_argument       go to state 162


State 232

   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   79                  | xvalue_expression "." • xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    "this"      shift, and go to state 111
    "["         shift, and go to state 117
    "*"         shift, and go to state 119
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 195

    xvalue_expression  go to state 312
    function_call      go to state 133


State 233

   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   80                  | xvalue_expression "->" • xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    "this"      shift, and go to state 111
    "["         shift, and go to state 117
    "*"         shift, and go to state 119
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 195

    xvalue_expression  go to state 313
    function_call      go to state 133


State 234

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   56                   | xvalue_expression "&=" • rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 314
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 235

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   57                   | xvalue_expression "^=" • rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 315
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 236

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   58                   | xvalue_expression "|=" • rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 316
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 237

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   59                   | xvalue_expression "~=" • rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 317
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 238

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   61                   | xvalue_expression "<<=" • rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 318
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 239

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   60                   | xvalue_expression ">>=" • rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 319
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 240

  111 block_statement: "{" statements0 "}" •

    $default  reduce using rule 111 (block_statement)


State 241

  115 statements: statements statement •

    $default  reduce using rule 115 (statements)


State 242

  132 else_if_statement: "else-if" • "(" expression ")" block_statement

    "("  shift, and go to state 320


State 243

  126 if_statement_sequence: if_statement else_if_statements0 • else_statement0
  133 else_statement0: • else_statement
  134                | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  135 else_statement: • "else" block_statement

    "else"  shift, and go to state 321

    $default  reduce using rule 134 (else_statement0)

    else_statement0  go to state 322
    else_statement   go to state 323


State 244

  128 else_if_statements0: else_if_statements •  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  131 else_if_statements: else_if_statements • else_if_statement
  132 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 242

    $default  reduce using rule 128 (else_if_statements0)

    else_if_statement  go to state 324


State 245

  130 else_if_statements: else_if_statement •

    $default  reduce using rule 130 (else_if_statements)


State 246

  149 catch_block: "catch" • "(" variable_declaration ")" block_statement

    "("  shift, and go to state 325


State 247

  111 block_statement: • "{" statements0 "}"
  150 catch_block: "catch-all" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 326


State 248

  145 exception_statement: try_block catch_blocks •  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  148 catch_blocks: catch_blocks • catch_block
  149 catch_block: • "catch" "(" variable_declaration ")" block_statement
  150            | • "catch-all" block_statement

    "catch"      shift, and go to state 246
    "catch-all"  shift, and go to state 247

    $default  reduce using rule 145 (exception_statement)

    catch_block  go to state 327


State 249

  147 catch_blocks: catch_block •

    $default  reduce using rule 147 (catch_blocks)


State 250

  164 variable_declaration_statement: variable_declaration ";" •

    $default  reduce using rule 164 (variable_declaration_statement)


State 251

  193 operator_overload: operator_overload_header "=" function_options ";" •

    $default  reduce using rule 193 (operator_overload)


State 252

  239 enum_member: IDENTIFIER "=" INT •

    $default  reduce using rule 239 (enum_member)


State 253

  237 enum_members_list: enum_members_list "," enum_member •

    $default  reduce using rule 237 (enum_members_list)


State 254

  180 function_argument: type IDENTIFIER •  [",", ")"]
  182                  | type IDENTIFIER • "=" expression

    "="  shift, and go to state 328

    $default  reduce using rule 180 (function_argument)


State 255

  181 function_argument: type "..." •

    $default  reduce using rule 181 (function_argument)


State 256

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  179 function_argument_list: function_argument_list "," • function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 160
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    function_argument   go to state 329


State 257

  173 function_header: "func" IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  183 throwable_expression: • "nothrowable"
  184                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 330

    throwable_expression  go to state 331


State 258

  172 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  179 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 256
    ")"  shift, and go to state 332


State 259

   20 type_list: type •

    $default  reduce using rule 20 (type_list)


State 260

   19 type_template_paramaters: "!" "(" type_list • ")"
   21 type_list: type_list • "," type

    ","  shift, and go to state 333
    ")"  shift, and go to state 334


State 261

    9 non_reference_type: type_core ARRAYL INT ARRAYR •

    $default  reduce using rule 9 (non_reference_type)


State 262

  183 throwable_expression: • "nothrowable"
  184                     | • "nothrowable" "(" expression ")"
  194 operator_overload_header: "operator" operator "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 330

    throwable_expression  go to state 335


State 263

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   66 prvalue_expression: "castas" "!" "(" • type ")" "(" rvalue_expression ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 336
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 264

  151 clean_up_statement: "cleanup" "(" IDENTIFIER • "," clean_up_arg ")" ";"

    ","  shift, and go to state 337


State 265

  120 do_loop_statement: "do" block_statement "while" • "(" expression ")"

    "("  shift, and go to state 338


State 266

  121 for_loop_statement: "for" "(" for_loop_condition • ")" block_statement

    ")"  shift, and go to state 339


State 267

  122 for_loop_condition: variable_declaration • ";" expression0 ";" expression0
  123                   | variable_declaration • "in" expression

    "in"  shift, and go to state 340
    ";"   shift, and go to state 341


State 268

  162 jump_statement: "goto" IDENTIFIER ";" •

    $default  reduce using rule 162 (jump_statement)


State 269

  127 if_statement: "if" "(" expression • ")" block_statement

    ")"  shift, and go to state 342


State 270

  168 variable_declaration_block: "let" type • IDENTIFIER
  169                           | "let" type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 343


State 271

  167 variable_declaration_block_list: variable_declaration_block_list "," • variable_declaration_block
  168 variable_declaration_block: • "let" type IDENTIFIER
  169                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 175

    variable_declaration_block  go to state 344


State 272

   92 new_expression: "new" "heap" type • "(" function_call_list ")"

    "("  shift, and go to state 345


State 273

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   91               | "new" type "(" • function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
   99 function_call_list: • function_call_arg
  100                   | • function_call_list "," function_call_arg ";"
  101 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 346
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133
    function_call_list         go to state 347
    function_call_arg          go to state 348


State 274

  136 switch_statement: "switch" "(" expression • ")" case_blocks0 default_block0

    ")"  shift, and go to state 349


State 275

  160 jump_statement: "throw" expression ";" •

    $default  reduce using rule 160 (jump_statement)


State 276

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   65                   | "typeof" "(" rvalue_expression • ")"

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221
    ")"    shift, and go to state 350


State 277

  119 while_loop_statement: "while" "(" expression • ")" block_statement

    ")"  shift, and go to state 351


State 278

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   26 expression0: • expression
   27            | • %empty  ["]", ","]
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   96 array_index: expression0 ":" • expression0
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    $default  reduce using rule 27 (expression0)

    expression                 go to state 352
    expression0                go to state 353
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 279

   82 xvalue_expression: "[" array_index_list "]" •

    $default  reduce using rule 82 (xvalue_expression)


State 280

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   26 expression0: • expression
   27            | • %empty  [":"]
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   94 array_index_list: array_index_list "," • array_index
   95 array_index: • expression
   96            | • expression0 ":" expression0
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    $default  reduce using rule 27 (expression0)

    expression                 go to state 188
    expression0                go to state 189
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    array_index                go to state 354
    function_call              go to state 133


State 281

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   81 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221
    ")"    shift, and go to state 355


State 282

   67 prvalue_expression: "(" rvalue_expression ")" • "?" rvalue_expression ":" rvalue_expression
   81 xvalue_expression: "(" rvalue_expression ")" •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]

    "?"  shift, and go to state 356

    $default  reduce using rule 81 (xvalue_expression)


State 283

   90 lambda_expression: "(" function_argument_list ")" • "->" return_types_list "=>" block_statement

    "->"  shift, and go to state 357


State 284

   62 prvalue_expression: rvalue_expression "is" type •

    $default  reduce using rule 62 (prvalue_expression)


State 285

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   44                   | rvalue_expression ">" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<=>"  shift, and go to state 213
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 44 (prvalue_expression)

    Conflict between rule 44 and token "is" resolved as reduce ("is" < ">").
    Conflict between rule 44 and token ">" resolved as reduce (%left ">").
    Conflict between rule 44 and token "+" resolved as shift (">" < "+").
    Conflict between rule 44 and token "-" resolved as shift (">" < "-").
    Conflict between rule 44 and token "/" resolved as shift (">" < "/").
    Conflict between rule 44 and token "//" resolved as shift (">" < "//").
    Conflict between rule 44 and token "*" resolved as shift (">" < "*").
    Conflict between rule 44 and token "^^" resolved as shift (">" < "^^").
    Conflict between rule 44 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 44 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 44 and token "<=>" resolved as shift (">" < "<=>").
    Conflict between rule 44 and token "&&" resolved as reduce ("&&" < ">").
    Conflict between rule 44 and token "||" resolved as reduce ("||" < ">").
    Conflict between rule 44 and token "&" resolved as reduce ("&" < ">").
    Conflict between rule 44 and token "|" resolved as reduce ("|" < ">").
    Conflict between rule 44 and token "^" resolved as reduce ("^" < ">").
    Conflict between rule 44 and token "~" resolved as shift (">" < "~").
    Conflict between rule 44 and token ">>" resolved as shift (">" < ">>").
    Conflict between rule 44 and token "<<" resolved as shift (">" < "<<").


State 286

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   32                   | rvalue_expression "+" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "/"   shift, and go to state 207
    "//"  shift, and go to state 208
    "*"   shift, and go to state 209
    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 32 (prvalue_expression)

    Conflict between rule 32 and token "is" resolved as reduce ("is" < "+").
    Conflict between rule 32 and token ">" resolved as reduce (">" < "+").
    Conflict between rule 32 and token "+" resolved as reduce (%left "+").
    Conflict between rule 32 and token "-" resolved as reduce (%left "-").
    Conflict between rule 32 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 32 and token "//" resolved as shift ("+" < "//").
    Conflict between rule 32 and token "*" resolved as shift ("+" < "*").
    Conflict between rule 32 and token "^^" resolved as shift ("+" < "^^").
    Conflict between rule 32 and token "<=" resolved as reduce ("<=" < "+").
    Conflict between rule 32 and token ">=" resolved as reduce (">=" < "+").
    Conflict between rule 32 and token "<=>" resolved as reduce ("<=>" < "+").
    Conflict between rule 32 and token "&&" resolved as reduce ("&&" < "+").
    Conflict between rule 32 and token "||" resolved as reduce ("||" < "+").
    Conflict between rule 32 and token "&" resolved as reduce ("&" < "+").
    Conflict between rule 32 and token "|" resolved as reduce ("|" < "+").
    Conflict between rule 32 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 32 and token "~" resolved as shift ("+" < "~").
    Conflict between rule 32 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 32 and token "<<" resolved as reduce ("<<" < "+").


State 287

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   33                   | rvalue_expression "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "/"   shift, and go to state 207
    "//"  shift, and go to state 208
    "*"   shift, and go to state 209
    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 33 (prvalue_expression)

    Conflict between rule 33 and token "is" resolved as reduce ("is" < "-").
    Conflict between rule 33 and token ">" resolved as reduce (">" < "-").
    Conflict between rule 33 and token "+" resolved as reduce (%left "+").
    Conflict between rule 33 and token "-" resolved as reduce (%left "-").
    Conflict between rule 33 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 33 and token "//" resolved as shift ("-" < "//").
    Conflict between rule 33 and token "*" resolved as shift ("-" < "*").
    Conflict between rule 33 and token "^^" resolved as shift ("-" < "^^").
    Conflict between rule 33 and token "<=" resolved as reduce ("<=" < "-").
    Conflict between rule 33 and token ">=" resolved as reduce (">=" < "-").
    Conflict between rule 33 and token "<=>" resolved as reduce ("<=>" < "-").
    Conflict between rule 33 and token "&&" resolved as reduce ("&&" < "-").
    Conflict between rule 33 and token "||" resolved as reduce ("||" < "-").
    Conflict between rule 33 and token "&" resolved as reduce ("&" < "-").
    Conflict between rule 33 and token "|" resolved as reduce ("|" < "-").
    Conflict between rule 33 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 33 and token "~" resolved as shift ("-" < "~").
    Conflict between rule 33 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 33 and token "<<" resolved as reduce ("<<" < "-").


State 288

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   35                   | rvalue_expression "/" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 35 (prvalue_expression)

    Conflict between rule 35 and token "is" resolved as reduce ("is" < "/").
    Conflict between rule 35 and token ">" resolved as reduce (">" < "/").
    Conflict between rule 35 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 35 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 35 and token "/" resolved as reduce (%left "/").
    Conflict between rule 35 and token "//" resolved as reduce (%left "//").
    Conflict between rule 35 and token "*" resolved as reduce (%left "*").
    Conflict between rule 35 and token "^^" resolved as shift ("/" < "^^").
    Conflict between rule 35 and token "<=" resolved as reduce ("<=" < "/").
    Conflict between rule 35 and token ">=" resolved as reduce (">=" < "/").
    Conflict between rule 35 and token "<=>" resolved as reduce ("<=>" < "/").
    Conflict between rule 35 and token "&&" resolved as reduce ("&&" < "/").
    Conflict between rule 35 and token "||" resolved as reduce ("||" < "/").
    Conflict between rule 35 and token "&" resolved as reduce ("&" < "/").
    Conflict between rule 35 and token "|" resolved as reduce ("|" < "/").
    Conflict between rule 35 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 35 and token "~" resolved as shift ("/" < "~").
    Conflict between rule 35 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 35 and token "<<" resolved as reduce ("<<" < "/").


State 289

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   36                   | rvalue_expression "//" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 36 (prvalue_expression)

    Conflict between rule 36 and token "is" resolved as reduce ("is" < "//").
    Conflict between rule 36 and token ">" resolved as reduce (">" < "//").
    Conflict between rule 36 and token "+" resolved as reduce ("+" < "//").
    Conflict between rule 36 and token "-" resolved as reduce ("-" < "//").
    Conflict between rule 36 and token "/" resolved as reduce (%left "/").
    Conflict between rule 36 and token "//" resolved as reduce (%left "//").
    Conflict between rule 36 and token "*" resolved as reduce (%left "*").
    Conflict between rule 36 and token "^^" resolved as shift ("//" < "^^").
    Conflict between rule 36 and token "<=" resolved as reduce ("<=" < "//").
    Conflict between rule 36 and token ">=" resolved as reduce (">=" < "//").
    Conflict between rule 36 and token "<=>" resolved as reduce ("<=>" < "//").
    Conflict between rule 36 and token "&&" resolved as reduce ("&&" < "//").
    Conflict between rule 36 and token "||" resolved as reduce ("||" < "//").
    Conflict between rule 36 and token "&" resolved as reduce ("&" < "//").
    Conflict between rule 36 and token "|" resolved as reduce ("|" < "//").
    Conflict between rule 36 and token "^" resolved as reduce ("^" < "//").
    Conflict between rule 36 and token "~" resolved as shift ("//" < "~").
    Conflict between rule 36 and token ">>" resolved as reduce (">>" < "//").
    Conflict between rule 36 and token "<<" resolved as reduce ("<<" < "//").


State 290

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   34                   | rvalue_expression "*" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 34 (prvalue_expression)

    Conflict between rule 34 and token "is" resolved as reduce ("is" < "*").
    Conflict between rule 34 and token ">" resolved as reduce (">" < "*").
    Conflict between rule 34 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 34 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 34 and token "/" resolved as reduce (%left "/").
    Conflict between rule 34 and token "//" resolved as reduce (%left "//").
    Conflict between rule 34 and token "*" resolved as reduce (%left "*").
    Conflict between rule 34 and token "^^" resolved as shift ("*" < "^^").
    Conflict between rule 34 and token "<=" resolved as reduce ("<=" < "*").
    Conflict between rule 34 and token ">=" resolved as reduce (">=" < "*").
    Conflict between rule 34 and token "<=>" resolved as reduce ("<=>" < "*").
    Conflict between rule 34 and token "&&" resolved as reduce ("&&" < "*").
    Conflict between rule 34 and token "||" resolved as reduce ("||" < "*").
    Conflict between rule 34 and token "&" resolved as reduce ("&" < "*").
    Conflict between rule 34 and token "|" resolved as reduce ("|" < "*").
    Conflict between rule 34 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 34 and token "~" resolved as shift ("*" < "~").
    Conflict between rule 34 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 34 and token "<<" resolved as reduce ("<<" < "*").


State 291

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   37                   | rvalue_expression "^^" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 37 (prvalue_expression)

    Conflict between rule 37 and token "is" resolved as reduce ("is" < "^^").
    Conflict between rule 37 and token ">" resolved as reduce (">" < "^^").
    Conflict between rule 37 and token "+" resolved as reduce ("+" < "^^").
    Conflict between rule 37 and token "-" resolved as reduce ("-" < "^^").
    Conflict between rule 37 and token "/" resolved as reduce ("/" < "^^").
    Conflict between rule 37 and token "//" resolved as reduce ("//" < "^^").
    Conflict between rule 37 and token "*" resolved as reduce ("*" < "^^").
    Conflict between rule 37 and token "^^" resolved as shift (%right "^^").
    Conflict between rule 37 and token "<=" resolved as reduce ("<=" < "^^").
    Conflict between rule 37 and token ">=" resolved as reduce (">=" < "^^").
    Conflict between rule 37 and token "<=>" resolved as reduce ("<=>" < "^^").
    Conflict between rule 37 and token "&&" resolved as reduce ("&&" < "^^").
    Conflict between rule 37 and token "||" resolved as reduce ("||" < "^^").
    Conflict between rule 37 and token "&" resolved as reduce ("&" < "^^").
    Conflict between rule 37 and token "|" resolved as reduce ("|" < "^^").
    Conflict between rule 37 and token "^" resolved as reduce ("^" < "^^").
    Conflict between rule 37 and token "~" resolved as shift ("^^" < "~").
    Conflict between rule 37 and token ">>" resolved as reduce (">>" < "^^").
    Conflict between rule 37 and token "<<" resolved as reduce ("<<" < "^^").


State 292

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   46                   | rvalue_expression "<=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<=>"  shift, and go to state 213
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 46 (prvalue_expression)

    Conflict between rule 46 and token "is" resolved as reduce ("is" < "<=").
    Conflict between rule 46 and token ">" resolved as reduce (%left ">").
    Conflict between rule 46 and token "+" resolved as shift ("<=" < "+").
    Conflict between rule 46 and token "-" resolved as shift ("<=" < "-").
    Conflict between rule 46 and token "/" resolved as shift ("<=" < "/").
    Conflict between rule 46 and token "//" resolved as shift ("<=" < "//").
    Conflict between rule 46 and token "*" resolved as shift ("<=" < "*").
    Conflict between rule 46 and token "^^" resolved as shift ("<=" < "^^").
    Conflict between rule 46 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 46 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 46 and token "<=>" resolved as shift ("<=" < "<=>").
    Conflict between rule 46 and token "&&" resolved as reduce ("&&" < "<=").
    Conflict between rule 46 and token "||" resolved as reduce ("||" < "<=").
    Conflict between rule 46 and token "&" resolved as reduce ("&" < "<=").
    Conflict between rule 46 and token "|" resolved as reduce ("|" < "<=").
    Conflict between rule 46 and token "^" resolved as reduce ("^" < "<=").
    Conflict between rule 46 and token "~" resolved as shift ("<=" < "~").
    Conflict between rule 46 and token ">>" resolved as shift ("<=" < ">>").
    Conflict between rule 46 and token "<<" resolved as shift ("<=" < "<<").


State 293

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   45                   | rvalue_expression ">=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<=>"  shift, and go to state 213
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 45 (prvalue_expression)

    Conflict between rule 45 and token "is" resolved as reduce ("is" < ">=").
    Conflict between rule 45 and token ">" resolved as reduce (%left ">").
    Conflict between rule 45 and token "+" resolved as shift (">=" < "+").
    Conflict between rule 45 and token "-" resolved as shift (">=" < "-").
    Conflict between rule 45 and token "/" resolved as shift (">=" < "/").
    Conflict between rule 45 and token "//" resolved as shift (">=" < "//").
    Conflict between rule 45 and token "*" resolved as shift (">=" < "*").
    Conflict between rule 45 and token "^^" resolved as shift (">=" < "^^").
    Conflict between rule 45 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 45 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 45 and token "<=>" resolved as shift (">=" < "<=>").
    Conflict between rule 45 and token "&&" resolved as reduce ("&&" < ">=").
    Conflict between rule 45 and token "||" resolved as reduce ("||" < ">=").
    Conflict between rule 45 and token "&" resolved as reduce ("&" < ">=").
    Conflict between rule 45 and token "|" resolved as reduce ("|" < ">=").
    Conflict between rule 45 and token "^" resolved as reduce ("^" < ">=").
    Conflict between rule 45 and token "~" resolved as shift (">=" < "~").
    Conflict between rule 45 and token ">>" resolved as shift (">=" < ">>").
    Conflict between rule 45 and token "<<" resolved as shift (">=" < "<<").


State 294

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   47                   | rvalue_expression "<=>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ")", ":", ";"]
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "+"   shift, and go to state 205
    "-"   shift, and go to state 206
    "/"   shift, and go to state 207
    "//"  shift, and go to state 208
    "*"   shift, and go to state 209
    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219
    ">>"  shift, and go to state 220
    "<<"  shift, and go to state 221

    $default  reduce using rule 47 (prvalue_expression)

    Conflict between rule 47 and token "is" resolved as reduce ("is" < "<=>").
    Conflict between rule 47 and token ">" resolved as reduce (">" < "<=>").
    Conflict between rule 47 and token "+" resolved as shift ("<=>" < "+").
    Conflict between rule 47 and token "-" resolved as shift ("<=>" < "-").
    Conflict between rule 47 and token "/" resolved as shift ("<=>" < "/").
    Conflict between rule 47 and token "//" resolved as shift ("<=>" < "//").
    Conflict between rule 47 and token "*" resolved as shift ("<=>" < "*").
    Conflict between rule 47 and token "^^" resolved as shift ("<=>" < "^^").
    Conflict between rule 47 and token "<=" resolved as reduce ("<=" < "<=>").
    Conflict between rule 47 and token ">=" resolved as reduce (">=" < "<=>").
    Conflict between rule 47 and token "<=>" resolved as reduce (%left "<=>").
    Conflict between rule 47 and token "&&" resolved as reduce ("&&" < "<=>").
    Conflict between rule 47 and token "||" resolved as reduce ("||" < "<=>").
    Conflict between rule 47 and token "&" resolved as reduce ("&" < "<=>").
    Conflict between rule 47 and token "|" resolved as reduce ("|" < "<=>").
    Conflict between rule 47 and token "^" resolved as reduce ("^" < "<=>").
    Conflict between rule 47 and token "~" resolved as shift ("<=>" < "~").
    Conflict between rule 47 and token ">>" resolved as shift ("<=>" < ">>").
    Conflict between rule 47 and token "<<" resolved as shift ("<=>" < "<<").


State 295

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   48                   | rvalue_expression "&&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", ")", ":", ";"]
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 48 (prvalue_expression)

    Conflict between rule 48 and token "is" resolved as reduce ("is" < "&&").
    Conflict between rule 48 and token ">" resolved as shift ("&&" < ">").
    Conflict between rule 48 and token "+" resolved as shift ("&&" < "+").
    Conflict between rule 48 and token "-" resolved as shift ("&&" < "-").
    Conflict between rule 48 and token "/" resolved as shift ("&&" < "/").
    Conflict between rule 48 and token "//" resolved as shift ("&&" < "//").
    Conflict between rule 48 and token "*" resolved as shift ("&&" < "*").
    Conflict between rule 48 and token "^^" resolved as shift ("&&" < "^^").
    Conflict between rule 48 and token "<=" resolved as shift ("&&" < "<=").
    Conflict between rule 48 and token ">=" resolved as shift ("&&" < ">=").
    Conflict between rule 48 and token "<=>" resolved as shift ("&&" < "<=>").
    Conflict between rule 48 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 48 and token "||" resolved as reduce ("||" < "&&").
    Conflict between rule 48 and token "&" resolved as shift ("&&" < "&").
    Conflict between rule 48 and token "|" resolved as shift ("&&" < "|").
    Conflict between rule 48 and token "^" resolved as shift ("&&" < "^").
    Conflict between rule 48 and token "~" resolved as shift ("&&" < "~").
    Conflict between rule 48 and token ">>" resolved as shift ("&&" < ">>").
    Conflict between rule 48 and token "<<" resolved as shift ("&&" < "<<").


State 296

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   49                   | rvalue_expression "||" rvalue_expression •  ["in", "is", "]", ",", "||", ")", ":", ";"]
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 49 (prvalue_expression)

    Conflict between rule 49 and token "is" resolved as reduce ("is" < "||").
    Conflict between rule 49 and token ">" resolved as shift ("||" < ">").
    Conflict between rule 49 and token "+" resolved as shift ("||" < "+").
    Conflict between rule 49 and token "-" resolved as shift ("||" < "-").
    Conflict between rule 49 and token "/" resolved as shift ("||" < "/").
    Conflict between rule 49 and token "//" resolved as shift ("||" < "//").
    Conflict between rule 49 and token "*" resolved as shift ("||" < "*").
    Conflict between rule 49 and token "^^" resolved as shift ("||" < "^^").
    Conflict between rule 49 and token "<=" resolved as shift ("||" < "<=").
    Conflict between rule 49 and token ">=" resolved as shift ("||" < ">=").
    Conflict between rule 49 and token "<=>" resolved as shift ("||" < "<=>").
    Conflict between rule 49 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 49 and token "||" resolved as reduce (%left "||").
    Conflict between rule 49 and token "&" resolved as shift ("||" < "&").
    Conflict between rule 49 and token "|" resolved as shift ("||" < "|").
    Conflict between rule 49 and token "^" resolved as shift ("||" < "^").
    Conflict between rule 49 and token "~" resolved as shift ("||" < "~").
    Conflict between rule 49 and token ">>" resolved as shift ("||" < ">>").
    Conflict between rule 49 and token "<<" resolved as shift ("||" < "<<").


State 297

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   50                   | rvalue_expression "&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "&", "|", "^", ")", ":", ";"]
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 50 (prvalue_expression)

    Conflict between rule 50 and token "is" resolved as reduce ("is" < "&").
    Conflict between rule 50 and token ">" resolved as shift ("&" < ">").
    Conflict between rule 50 and token "+" resolved as shift ("&" < "+").
    Conflict between rule 50 and token "-" resolved as shift ("&" < "-").
    Conflict between rule 50 and token "/" resolved as shift ("&" < "/").
    Conflict between rule 50 and token "//" resolved as shift ("&" < "//").
    Conflict between rule 50 and token "*" resolved as shift ("&" < "*").
    Conflict between rule 50 and token "^^" resolved as shift ("&" < "^^").
    Conflict between rule 50 and token "<=" resolved as shift ("&" < "<=").
    Conflict between rule 50 and token ">=" resolved as shift ("&" < ">=").
    Conflict between rule 50 and token "<=>" resolved as shift ("&" < "<=>").
    Conflict between rule 50 and token "&&" resolved as reduce ("&&" < "&").
    Conflict between rule 50 and token "||" resolved as reduce ("||" < "&").
    Conflict between rule 50 and token "&" resolved as reduce (%left "&").
    Conflict between rule 50 and token "|" resolved as reduce ("|" < "&").
    Conflict between rule 50 and token "^" resolved as reduce ("^" < "&").
    Conflict between rule 50 and token "~" resolved as shift ("&" < "~").
    Conflict between rule 50 and token ">>" resolved as shift ("&" < ">>").
    Conflict between rule 50 and token "<<" resolved as shift ("&" < "<<").


State 298

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   52                   | rvalue_expression "|" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", ")", ":", ";"]
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&"    shift, and go to state 216
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 52 (prvalue_expression)

    Conflict between rule 52 and token "is" resolved as reduce ("is" < "|").
    Conflict between rule 52 and token ">" resolved as shift ("|" < ">").
    Conflict between rule 52 and token "+" resolved as shift ("|" < "+").
    Conflict between rule 52 and token "-" resolved as shift ("|" < "-").
    Conflict between rule 52 and token "/" resolved as shift ("|" < "/").
    Conflict between rule 52 and token "//" resolved as shift ("|" < "//").
    Conflict between rule 52 and token "*" resolved as shift ("|" < "*").
    Conflict between rule 52 and token "^^" resolved as shift ("|" < "^^").
    Conflict between rule 52 and token "<=" resolved as shift ("|" < "<=").
    Conflict between rule 52 and token ">=" resolved as shift ("|" < ">=").
    Conflict between rule 52 and token "<=>" resolved as shift ("|" < "<=>").
    Conflict between rule 52 and token "&&" resolved as reduce ("&&" < "|").
    Conflict between rule 52 and token "||" resolved as reduce ("||" < "|").
    Conflict between rule 52 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 52 and token "|" resolved as reduce (%left "|").
    Conflict between rule 52 and token "^" resolved as shift ("|" < "^").
    Conflict between rule 52 and token "~" resolved as shift ("|" < "~").
    Conflict between rule 52 and token ">>" resolved as shift ("|" < ">>").
    Conflict between rule 52 and token "<<" resolved as shift ("|" < "<<").


State 299

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   51                   | rvalue_expression "^" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", "^", ")", ":", ";"]
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&"    shift, and go to state 216
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 51 (prvalue_expression)

    Conflict between rule 51 and token "is" resolved as reduce ("is" < "^").
    Conflict between rule 51 and token ">" resolved as shift ("^" < ">").
    Conflict between rule 51 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 51 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 51 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 51 and token "//" resolved as shift ("^" < "//").
    Conflict between rule 51 and token "*" resolved as shift ("^" < "*").
    Conflict between rule 51 and token "^^" resolved as shift ("^" < "^^").
    Conflict between rule 51 and token "<=" resolved as shift ("^" < "<=").
    Conflict between rule 51 and token ">=" resolved as shift ("^" < ">=").
    Conflict between rule 51 and token "<=>" resolved as shift ("^" < "<=>").
    Conflict between rule 51 and token "&&" resolved as reduce ("&&" < "^").
    Conflict between rule 51 and token "||" resolved as reduce ("||" < "^").
    Conflict between rule 51 and token "&" resolved as shift ("^" < "&").
    Conflict between rule 51 and token "|" resolved as reduce ("|" < "^").
    Conflict between rule 51 and token "^" resolved as reduce (%left "^").
    Conflict between rule 51 and token "~" resolved as shift ("^" < "~").
    Conflict between rule 51 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 51 and token "<<" resolved as shift ("^" < "<<").


State 300

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   53                   | rvalue_expression "~" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "~"  shift, and go to state 219

    $default  reduce using rule 53 (prvalue_expression)

    Conflict between rule 53 and token "is" resolved as reduce ("is" < "~").
    Conflict between rule 53 and token ">" resolved as reduce (">" < "~").
    Conflict between rule 53 and token "+" resolved as reduce ("+" < "~").
    Conflict between rule 53 and token "-" resolved as reduce ("-" < "~").
    Conflict between rule 53 and token "/" resolved as reduce ("/" < "~").
    Conflict between rule 53 and token "//" resolved as reduce ("//" < "~").
    Conflict between rule 53 and token "*" resolved as reduce ("*" < "~").
    Conflict between rule 53 and token "^^" resolved as reduce ("^^" < "~").
    Conflict between rule 53 and token "<=" resolved as reduce ("<=" < "~").
    Conflict between rule 53 and token ">=" resolved as reduce (">=" < "~").
    Conflict between rule 53 and token "<=>" resolved as reduce ("<=>" < "~").
    Conflict between rule 53 and token "&&" resolved as reduce ("&&" < "~").
    Conflict between rule 53 and token "||" resolved as reduce ("||" < "~").
    Conflict between rule 53 and token "&" resolved as reduce ("&" < "~").
    Conflict between rule 53 and token "|" resolved as reduce ("|" < "~").
    Conflict between rule 53 and token "^" resolved as reduce ("^" < "~").
    Conflict between rule 53 and token "~" resolved as shift (%right "~").
    Conflict between rule 53 and token ">>" resolved as reduce (">>" < "~").
    Conflict between rule 53 and token "<<" resolved as reduce ("<<" < "~").


State 301

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   54                   | rvalue_expression ">>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "+"   shift, and go to state 205
    "-"   shift, and go to state 206
    "/"   shift, and go to state 207
    "//"  shift, and go to state 208
    "*"   shift, and go to state 209
    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 54 (prvalue_expression)

    Conflict between rule 54 and token "is" resolved as reduce ("is" < ">>").
    Conflict between rule 54 and token ">" resolved as reduce (">" < ">>").
    Conflict between rule 54 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 54 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 54 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 54 and token "//" resolved as shift (">>" < "//").
    Conflict between rule 54 and token "*" resolved as shift (">>" < "*").
    Conflict between rule 54 and token "^^" resolved as shift (">>" < "^^").
    Conflict between rule 54 and token "<=" resolved as reduce ("<=" < ">>").
    Conflict between rule 54 and token ">=" resolved as reduce (">=" < ">>").
    Conflict between rule 54 and token "<=>" resolved as reduce ("<=>" < ">>").
    Conflict between rule 54 and token "&&" resolved as reduce ("&&" < ">>").
    Conflict between rule 54 and token "||" resolved as reduce ("||" < ">>").
    Conflict between rule 54 and token "&" resolved as reduce ("&" < ">>").
    Conflict between rule 54 and token "|" resolved as reduce ("|" < ">>").
    Conflict between rule 54 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 54 and token "~" resolved as shift (">>" < "~").
    Conflict between rule 54 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 54 and token "<<" resolved as reduce (%left "<<").


State 302

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   55                   | rvalue_expression "<<" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "+"   shift, and go to state 205
    "-"   shift, and go to state 206
    "/"   shift, and go to state 207
    "//"  shift, and go to state 208
    "*"   shift, and go to state 209
    "^^"  shift, and go to state 210
    "~"   shift, and go to state 219

    $default  reduce using rule 55 (prvalue_expression)

    Conflict between rule 55 and token "is" resolved as reduce ("is" < "<<").
    Conflict between rule 55 and token ">" resolved as reduce (">" < "<<").
    Conflict between rule 55 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 55 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 55 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 55 and token "//" resolved as shift ("<<" < "//").
    Conflict between rule 55 and token "*" resolved as shift ("<<" < "*").
    Conflict between rule 55 and token "^^" resolved as shift ("<<" < "^^").
    Conflict between rule 55 and token "<=" resolved as reduce ("<=" < "<<").
    Conflict between rule 55 and token ">=" resolved as reduce (">=" < "<<").
    Conflict between rule 55 and token "<=>" resolved as reduce ("<=>" < "<<").
    Conflict between rule 55 and token "&&" resolved as reduce ("&&" < "<<").
    Conflict between rule 55 and token "||" resolved as reduce ("||" < "<<").
    Conflict between rule 55 and token "&" resolved as reduce ("&" < "<<").
    Conflict between rule 55 and token "|" resolved as reduce ("|" < "<<").
    Conflict between rule 55 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 55 and token "~" resolved as shift ("<<" < "~").
    Conflict between rule 55 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 55 and token "<<" resolved as reduce (%left "<<").


State 303

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   38                   | xvalue_expression "+=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 38 (prvalue_expression)

    Conflict between rule 38 and token "is" resolved as shift (%right "is").
    Conflict between rule 38 and token ">" resolved as shift ("+=" < ">").
    Conflict between rule 38 and token "+" resolved as shift ("+=" < "+").
    Conflict between rule 38 and token "-" resolved as shift ("+=" < "-").
    Conflict between rule 38 and token "/" resolved as shift ("+=" < "/").
    Conflict between rule 38 and token "//" resolved as shift ("+=" < "//").
    Conflict between rule 38 and token "*" resolved as shift ("+=" < "*").
    Conflict between rule 38 and token "^^" resolved as shift ("+=" < "^^").
    Conflict between rule 38 and token "<=" resolved as shift ("+=" < "<=").
    Conflict between rule 38 and token ">=" resolved as shift ("+=" < ">=").
    Conflict between rule 38 and token "<=>" resolved as shift ("+=" < "<=>").
    Conflict between rule 38 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 38 and token "||" resolved as shift ("+=" < "||").
    Conflict between rule 38 and token "&" resolved as shift ("+=" < "&").
    Conflict between rule 38 and token "|" resolved as shift ("+=" < "|").
    Conflict between rule 38 and token "^" resolved as shift ("+=" < "^").
    Conflict between rule 38 and token "~" resolved as shift ("+=" < "~").
    Conflict between rule 38 and token ">>" resolved as shift ("+=" < ">>").
    Conflict between rule 38 and token "<<" resolved as shift ("+=" < "<<").


State 304

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   39                   | xvalue_expression "-=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 39 (prvalue_expression)

    Conflict between rule 39 and token "is" resolved as shift (%right "is").
    Conflict between rule 39 and token ">" resolved as shift ("-=" < ">").
    Conflict between rule 39 and token "+" resolved as shift ("-=" < "+").
    Conflict between rule 39 and token "-" resolved as shift ("-=" < "-").
    Conflict between rule 39 and token "/" resolved as shift ("-=" < "/").
    Conflict between rule 39 and token "//" resolved as shift ("-=" < "//").
    Conflict between rule 39 and token "*" resolved as shift ("-=" < "*").
    Conflict between rule 39 and token "^^" resolved as shift ("-=" < "^^").
    Conflict between rule 39 and token "<=" resolved as shift ("-=" < "<=").
    Conflict between rule 39 and token ">=" resolved as shift ("-=" < ">=").
    Conflict between rule 39 and token "<=>" resolved as shift ("-=" < "<=>").
    Conflict between rule 39 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 39 and token "||" resolved as shift ("-=" < "||").
    Conflict between rule 39 and token "&" resolved as shift ("-=" < "&").
    Conflict between rule 39 and token "|" resolved as shift ("-=" < "|").
    Conflict between rule 39 and token "^" resolved as shift ("-=" < "^").
    Conflict between rule 39 and token "~" resolved as shift ("-=" < "~").
    Conflict between rule 39 and token ">>" resolved as shift ("-=" < ">>").
    Conflict between rule 39 and token "<<" resolved as shift ("-=" < "<<").


State 305

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   40                   | xvalue_expression "*=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 40 (prvalue_expression)

    Conflict between rule 40 and token "is" resolved as shift (%right "is").
    Conflict between rule 40 and token ">" resolved as shift ("*=" < ">").
    Conflict between rule 40 and token "+" resolved as shift ("*=" < "+").
    Conflict between rule 40 and token "-" resolved as shift ("*=" < "-").
    Conflict between rule 40 and token "/" resolved as shift ("*=" < "/").
    Conflict between rule 40 and token "//" resolved as shift ("*=" < "//").
    Conflict between rule 40 and token "*" resolved as shift ("*=" < "*").
    Conflict between rule 40 and token "^^" resolved as shift ("*=" < "^^").
    Conflict between rule 40 and token "<=" resolved as shift ("*=" < "<=").
    Conflict between rule 40 and token ">=" resolved as shift ("*=" < ">=").
    Conflict between rule 40 and token "<=>" resolved as shift ("*=" < "<=>").
    Conflict between rule 40 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 40 and token "||" resolved as shift ("*=" < "||").
    Conflict between rule 40 and token "&" resolved as shift ("*=" < "&").
    Conflict between rule 40 and token "|" resolved as shift ("*=" < "|").
    Conflict between rule 40 and token "^" resolved as shift ("*=" < "^").
    Conflict between rule 40 and token "~" resolved as shift ("*=" < "~").
    Conflict between rule 40 and token ">>" resolved as shift ("*=" < ">>").
    Conflict between rule 40 and token "<<" resolved as shift ("*=" < "<<").


State 306

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   41                   | xvalue_expression "/=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 41 (prvalue_expression)

    Conflict between rule 41 and token "is" resolved as shift (%right "is").
    Conflict between rule 41 and token ">" resolved as shift ("/=" < ">").
    Conflict between rule 41 and token "+" resolved as shift ("/=" < "+").
    Conflict between rule 41 and token "-" resolved as shift ("/=" < "-").
    Conflict between rule 41 and token "/" resolved as shift ("/=" < "/").
    Conflict between rule 41 and token "//" resolved as shift ("/=" < "//").
    Conflict between rule 41 and token "*" resolved as shift ("/=" < "*").
    Conflict between rule 41 and token "^^" resolved as shift ("/=" < "^^").
    Conflict between rule 41 and token "<=" resolved as shift ("/=" < "<=").
    Conflict between rule 41 and token ">=" resolved as shift ("/=" < ">=").
    Conflict between rule 41 and token "<=>" resolved as shift ("/=" < "<=>").
    Conflict between rule 41 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 41 and token "||" resolved as shift ("/=" < "||").
    Conflict between rule 41 and token "&" resolved as shift ("/=" < "&").
    Conflict between rule 41 and token "|" resolved as shift ("/=" < "|").
    Conflict between rule 41 and token "^" resolved as shift ("/=" < "^").
    Conflict between rule 41 and token "~" resolved as shift ("/=" < "~").
    Conflict between rule 41 and token ">>" resolved as shift ("/=" < ">>").
    Conflict between rule 41 and token "<<" resolved as shift ("/=" < "<<").


State 307

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   42                   | xvalue_expression "//=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 42 (prvalue_expression)

    Conflict between rule 42 and token "is" resolved as shift (%right "is").
    Conflict between rule 42 and token ">" resolved as shift ("//=" < ">").
    Conflict between rule 42 and token "+" resolved as shift ("//=" < "+").
    Conflict between rule 42 and token "-" resolved as shift ("//=" < "-").
    Conflict between rule 42 and token "/" resolved as shift ("//=" < "/").
    Conflict between rule 42 and token "//" resolved as shift ("//=" < "//").
    Conflict between rule 42 and token "*" resolved as shift ("//=" < "*").
    Conflict between rule 42 and token "^^" resolved as shift ("//=" < "^^").
    Conflict between rule 42 and token "<=" resolved as shift ("//=" < "<=").
    Conflict between rule 42 and token ">=" resolved as shift ("//=" < ">=").
    Conflict between rule 42 and token "<=>" resolved as shift ("//=" < "<=>").
    Conflict between rule 42 and token "&&" resolved as shift ("//=" < "&&").
    Conflict between rule 42 and token "||" resolved as shift ("//=" < "||").
    Conflict between rule 42 and token "&" resolved as shift ("//=" < "&").
    Conflict between rule 42 and token "|" resolved as shift ("//=" < "|").
    Conflict between rule 42 and token "^" resolved as shift ("//=" < "^").
    Conflict between rule 42 and token "~" resolved as shift ("//=" < "~").
    Conflict between rule 42 and token ">>" resolved as shift ("//=" < ">>").
    Conflict between rule 42 and token "<<" resolved as shift ("//=" < "<<").


State 308

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   43                   | xvalue_expression "^^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 43 (prvalue_expression)

    Conflict between rule 43 and token "is" resolved as shift (%right "is").
    Conflict between rule 43 and token ">" resolved as shift ("^^=" < ">").
    Conflict between rule 43 and token "+" resolved as shift ("^^=" < "+").
    Conflict between rule 43 and token "-" resolved as shift ("^^=" < "-").
    Conflict between rule 43 and token "/" resolved as shift ("^^=" < "/").
    Conflict between rule 43 and token "//" resolved as shift ("^^=" < "//").
    Conflict between rule 43 and token "*" resolved as shift ("^^=" < "*").
    Conflict between rule 43 and token "^^" resolved as shift ("^^=" < "^^").
    Conflict between rule 43 and token "<=" resolved as shift ("^^=" < "<=").
    Conflict between rule 43 and token ">=" resolved as shift ("^^=" < ">=").
    Conflict between rule 43 and token "<=>" resolved as shift ("^^=" < "<=>").
    Conflict between rule 43 and token "&&" resolved as shift ("^^=" < "&&").
    Conflict between rule 43 and token "||" resolved as shift ("^^=" < "||").
    Conflict between rule 43 and token "&" resolved as shift ("^^=" < "&").
    Conflict between rule 43 and token "|" resolved as shift ("^^=" < "|").
    Conflict between rule 43 and token "^" resolved as shift ("^^=" < "^").
    Conflict between rule 43 and token "~" resolved as shift ("^^=" < "~").
    Conflict between rule 43 and token ">>" resolved as shift ("^^=" < ">>").
    Conflict between rule 43 and token "<<" resolved as shift ("^^=" < "<<").


State 309

   25 expression: xvalue_expression "=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 25 (expression)


State 310

   98 function_call: xvalue_expression "(" ")" •

    $default  reduce using rule 98 (function_call)


State 311

   97 function_call: xvalue_expression "(" function_argument_list • ")"
  179 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 256
    ")"  shift, and go to state 358


State 312

   76 xvalue_expression: xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   79                  | xvalue_expression • "." xvalue_expression
   79                  | xvalue_expression "." xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   80                  | xvalue_expression • "->" xvalue_expression
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    $default  reduce using rule 79 (xvalue_expression)

    Conflict between rule 79 and token "++" resolved as reduce ("++" < ".").
    Conflict between rule 79 and token "--" resolved as reduce ("--" < ".").
    Conflict between rule 79 and token "(" resolved as reduce (%left "(").
    Conflict between rule 79 and token "." resolved as reduce (%left ".").
    Conflict between rule 79 and token "->" resolved as reduce (%left "->").


State 313

   76 xvalue_expression: xvalue_expression • "++"
   77                  | xvalue_expression • "--"
   79                  | xvalue_expression • "." xvalue_expression
   80                  | xvalue_expression • "->" xvalue_expression
   80                  | xvalue_expression "->" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]
   97 function_call: xvalue_expression • "(" function_argument_list ")"
   98              | xvalue_expression • "(" ")"

    $default  reduce using rule 80 (xvalue_expression)

    Conflict between rule 80 and token "++" resolved as reduce ("++" < "->").
    Conflict between rule 80 and token "--" resolved as reduce ("--" < "->").
    Conflict between rule 80 and token "(" resolved as reduce (%left "(").
    Conflict between rule 80 and token "." resolved as reduce (%left ".").
    Conflict between rule 80 and token "->" resolved as reduce (%left "->").


State 314

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   56                   | xvalue_expression "&=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 56 (prvalue_expression)

    Conflict between rule 56 and token "is" resolved as shift (%right "is").
    Conflict between rule 56 and token ">" resolved as shift ("&=" < ">").
    Conflict between rule 56 and token "+" resolved as shift ("&=" < "+").
    Conflict between rule 56 and token "-" resolved as shift ("&=" < "-").
    Conflict between rule 56 and token "/" resolved as shift ("&=" < "/").
    Conflict between rule 56 and token "//" resolved as shift ("&=" < "//").
    Conflict between rule 56 and token "*" resolved as shift ("&=" < "*").
    Conflict between rule 56 and token "^^" resolved as shift ("&=" < "^^").
    Conflict between rule 56 and token "<=" resolved as shift ("&=" < "<=").
    Conflict between rule 56 and token ">=" resolved as shift ("&=" < ">=").
    Conflict between rule 56 and token "<=>" resolved as shift ("&=" < "<=>").
    Conflict between rule 56 and token "&&" resolved as shift ("&=" < "&&").
    Conflict between rule 56 and token "||" resolved as shift ("&=" < "||").
    Conflict between rule 56 and token "&" resolved as shift ("&=" < "&").
    Conflict between rule 56 and token "|" resolved as shift ("&=" < "|").
    Conflict between rule 56 and token "^" resolved as shift ("&=" < "^").
    Conflict between rule 56 and token "~" resolved as shift ("&=" < "~").
    Conflict between rule 56 and token ">>" resolved as shift ("&=" < ">>").
    Conflict between rule 56 and token "<<" resolved as shift ("&=" < "<<").


State 315

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   57                   | xvalue_expression "^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 57 (prvalue_expression)

    Conflict between rule 57 and token "is" resolved as shift (%right "is").
    Conflict between rule 57 and token ">" resolved as shift ("^=" < ">").
    Conflict between rule 57 and token "+" resolved as shift ("^=" < "+").
    Conflict between rule 57 and token "-" resolved as shift ("^=" < "-").
    Conflict between rule 57 and token "/" resolved as shift ("^=" < "/").
    Conflict between rule 57 and token "//" resolved as shift ("^=" < "//").
    Conflict between rule 57 and token "*" resolved as shift ("^=" < "*").
    Conflict between rule 57 and token "^^" resolved as shift ("^=" < "^^").
    Conflict between rule 57 and token "<=" resolved as shift ("^=" < "<=").
    Conflict between rule 57 and token ">=" resolved as shift ("^=" < ">=").
    Conflict between rule 57 and token "<=>" resolved as shift ("^=" < "<=>").
    Conflict between rule 57 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 57 and token "||" resolved as shift ("^=" < "||").
    Conflict between rule 57 and token "&" resolved as shift ("^=" < "&").
    Conflict between rule 57 and token "|" resolved as shift ("^=" < "|").
    Conflict between rule 57 and token "^" resolved as shift ("^=" < "^").
    Conflict between rule 57 and token "~" resolved as shift ("^=" < "~").
    Conflict between rule 57 and token ">>" resolved as shift ("^=" < ">>").
    Conflict between rule 57 and token "<<" resolved as shift ("^=" < "<<").


State 316

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   58                   | xvalue_expression "|=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 58 (prvalue_expression)

    Conflict between rule 58 and token "is" resolved as shift (%right "is").
    Conflict between rule 58 and token ">" resolved as shift ("|=" < ">").
    Conflict between rule 58 and token "+" resolved as shift ("|=" < "+").
    Conflict between rule 58 and token "-" resolved as shift ("|=" < "-").
    Conflict between rule 58 and token "/" resolved as shift ("|=" < "/").
    Conflict between rule 58 and token "//" resolved as shift ("|=" < "//").
    Conflict between rule 58 and token "*" resolved as shift ("|=" < "*").
    Conflict between rule 58 and token "^^" resolved as shift ("|=" < "^^").
    Conflict between rule 58 and token "<=" resolved as shift ("|=" < "<=").
    Conflict between rule 58 and token ">=" resolved as shift ("|=" < ">=").
    Conflict between rule 58 and token "<=>" resolved as shift ("|=" < "<=>").
    Conflict between rule 58 and token "&&" resolved as shift ("|=" < "&&").
    Conflict between rule 58 and token "||" resolved as shift ("|=" < "||").
    Conflict between rule 58 and token "&" resolved as shift ("|=" < "&").
    Conflict between rule 58 and token "|" resolved as shift ("|=" < "|").
    Conflict between rule 58 and token "^" resolved as shift ("|=" < "^").
    Conflict between rule 58 and token "~" resolved as shift ("|=" < "~").
    Conflict between rule 58 and token ">>" resolved as shift ("|=" < ">>").
    Conflict between rule 58 and token "<<" resolved as shift ("|=" < "<<").


State 317

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   59                   | xvalue_expression "~=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 59 (prvalue_expression)

    Conflict between rule 59 and token "is" resolved as shift (%right "is").
    Conflict between rule 59 and token ">" resolved as shift ("~=" < ">").
    Conflict between rule 59 and token "+" resolved as shift ("~=" < "+").
    Conflict between rule 59 and token "-" resolved as shift ("~=" < "-").
    Conflict between rule 59 and token "/" resolved as shift ("~=" < "/").
    Conflict between rule 59 and token "//" resolved as shift ("~=" < "//").
    Conflict between rule 59 and token "*" resolved as shift ("~=" < "*").
    Conflict between rule 59 and token "^^" resolved as shift ("~=" < "^^").
    Conflict between rule 59 and token "<=" resolved as shift ("~=" < "<=").
    Conflict between rule 59 and token ">=" resolved as shift ("~=" < ">=").
    Conflict between rule 59 and token "<=>" resolved as shift ("~=" < "<=>").
    Conflict between rule 59 and token "&&" resolved as shift ("~=" < "&&").
    Conflict between rule 59 and token "||" resolved as shift ("~=" < "||").
    Conflict between rule 59 and token "&" resolved as shift ("~=" < "&").
    Conflict between rule 59 and token "|" resolved as shift ("~=" < "|").
    Conflict between rule 59 and token "^" resolved as shift ("~=" < "^").
    Conflict between rule 59 and token "~" resolved as shift ("~=" < "~").
    Conflict between rule 59 and token ">>" resolved as shift ("~=" < ">>").
    Conflict between rule 59 and token "<<" resolved as shift ("~=" < "<<").


State 318

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   61                   | xvalue_expression "<<=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 61 (prvalue_expression)

    Conflict between rule 61 and token "is" resolved as shift (%right "is").
    Conflict between rule 61 and token ">" resolved as shift ("<<=" < ">").
    Conflict between rule 61 and token "+" resolved as shift ("<<=" < "+").
    Conflict between rule 61 and token "-" resolved as shift ("<<=" < "-").
    Conflict between rule 61 and token "/" resolved as shift ("<<=" < "/").
    Conflict between rule 61 and token "//" resolved as shift ("<<=" < "//").
    Conflict between rule 61 and token "*" resolved as shift ("<<=" < "*").
    Conflict between rule 61 and token "^^" resolved as shift ("<<=" < "^^").
    Conflict between rule 61 and token "<=" resolved as shift ("<<=" < "<=").
    Conflict between rule 61 and token ">=" resolved as shift ("<<=" < ">=").
    Conflict between rule 61 and token "<=>" resolved as shift ("<<=" < "<=>").
    Conflict between rule 61 and token "&&" resolved as shift ("<<=" < "&&").
    Conflict between rule 61 and token "||" resolved as shift ("<<=" < "||").
    Conflict between rule 61 and token "&" resolved as shift ("<<=" < "&").
    Conflict between rule 61 and token "|" resolved as shift ("<<=" < "|").
    Conflict between rule 61 and token "^" resolved as shift ("<<=" < "^").
    Conflict between rule 61 and token "~" resolved as shift ("<<=" < "~").
    Conflict between rule 61 and token ">>" resolved as shift ("<<=" < ">>").
    Conflict between rule 61 and token "<<" resolved as shift ("<<=" < "<<").


State 319

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   60                   | xvalue_expression ">>=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   62                   | rvalue_expression • "is" type

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 60 (prvalue_expression)

    Conflict between rule 60 and token "is" resolved as shift (%right "is").
    Conflict between rule 60 and token ">" resolved as shift (">>=" < ">").
    Conflict between rule 60 and token "+" resolved as shift (">>=" < "+").
    Conflict between rule 60 and token "-" resolved as shift (">>=" < "-").
    Conflict between rule 60 and token "/" resolved as shift (">>=" < "/").
    Conflict between rule 60 and token "//" resolved as shift (">>=" < "//").
    Conflict between rule 60 and token "*" resolved as shift (">>=" < "*").
    Conflict between rule 60 and token "^^" resolved as shift (">>=" < "^^").
    Conflict between rule 60 and token "<=" resolved as shift (">>=" < "<=").
    Conflict between rule 60 and token ">=" resolved as shift (">>=" < ">=").
    Conflict between rule 60 and token "<=>" resolved as shift (">>=" < "<=>").
    Conflict between rule 60 and token "&&" resolved as shift (">>=" < "&&").
    Conflict between rule 60 and token "||" resolved as shift (">>=" < "||").
    Conflict between rule 60 and token "&" resolved as shift (">>=" < "&").
    Conflict between rule 60 and token "|" resolved as shift (">>=" < "|").
    Conflict between rule 60 and token "^" resolved as shift (">>=" < "^").
    Conflict between rule 60 and token "~" resolved as shift (">>=" < "~").
    Conflict between rule 60 and token ">>" resolved as shift (">>=" < ">>").
    Conflict between rule 60 and token "<<" resolved as shift (">>=" < "<<").


State 320

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  132 else_if_statement: "else-if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 359
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 321

  111 block_statement: • "{" statements0 "}"
  135 else_statement: "else" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 360


State 322

  126 if_statement_sequence: if_statement else_if_statements0 else_statement0 •

    $default  reduce using rule 126 (if_statement_sequence)


State 323

  133 else_statement0: else_statement •

    $default  reduce using rule 133 (else_statement0)


State 324

  131 else_if_statements: else_if_statements else_if_statement •

    $default  reduce using rule 131 (else_if_statements)


State 325

  149 catch_block: "catch" "(" • variable_declaration ")" block_statement
  165 variable_declaration: • "let" variable_declaration_block_list

    "let"  shift, and go to state 105

    variable_declaration  go to state 361


State 326

  150 catch_block: "catch-all" block_statement •

    $default  reduce using rule 150 (catch_block)


State 327

  148 catch_blocks: catch_blocks catch_block •

    $default  reduce using rule 148 (catch_blocks)


State 328

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  182 function_argument: type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 362
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 329

  179 function_argument_list: function_argument_list "," function_argument •

    $default  reduce using rule 179 (function_argument_list)


State 330

  183 throwable_expression: "nothrowable" •  ["->"]
  184                     | "nothrowable" • "(" expression ")"

    "("  shift, and go to state 363

    $default  reduce using rule 183 (throwable_expression)


State 331

  173 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 364


State 332

  172 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  183 throwable_expression: • "nothrowable"
  184                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 330

    throwable_expression  go to state 365


State 333

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   21 type_list: type_list "," • type
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                go to state 366
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66


State 334

   19 type_template_paramaters: "!" "(" type_list ")" •

    $default  reduce using rule 19 (type_template_paramaters)


State 335

  194 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 367


State 336

   66 prvalue_expression: "castas" "!" "(" type • ")" "(" rvalue_expression ")"

    ")"  shift, and go to state 368


State 337

   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
  151 clean_up_statement: "cleanup" "(" IDENTIFIER "," • clean_up_arg ")" ";"
  152 clean_up_arg: • IDENTIFIER
  153             | • lambda_expression
  154             | • function
  155             | • anonymous_function
  171 function: • function_header block_statement
  172 function_header: • "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  173                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  189 anonymous_function: • anonymous_function_header block_statement
  190 anonymous_function_header: • "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  191                          | • "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 369
    "func"      shift, and go to state 370
    "("         shift, and go to state 371

    lambda_expression          go to state 372
    clean_up_arg               go to state 373
    function                   go to state 374
    function_header            go to state 6
    anonymous_function         go to state 375
    anonymous_function_header  go to state 376


State 338

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  120 do_loop_statement: "do" block_statement "while" "(" • expression ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 377
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 339

  111 block_statement: • "{" statements0 "}"
  121 for_loop_statement: "for" "(" for_loop_condition ")" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 378


State 340

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  123 for_loop_condition: variable_declaration "in" • expression

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 379
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 341

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   26 expression0: • expression
   27            | • %empty  [";"]
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  122 for_loop_condition: variable_declaration ";" • expression0 ";" expression0

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    $default  reduce using rule 27 (expression0)

    expression                 go to state 352
    expression0                go to state 380
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 342

  111 block_statement: • "{" statements0 "}"
  127 if_statement: "if" "(" expression ")" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 381


State 343

  168 variable_declaration_block: "let" type IDENTIFIER •  ["in", ",", ")", ";"]
  169                           | "let" type IDENTIFIER • "=" expression

    "="  shift, and go to state 382

    $default  reduce using rule 168 (variable_declaration_block)


State 344

  167 variable_declaration_block_list: variable_declaration_block_list "," variable_declaration_block •

    $default  reduce using rule 167 (variable_declaration_block_list)


State 345

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   92               | "new" "heap" type "(" • function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
   99 function_call_list: • function_call_arg
  100                   | • function_call_list "," function_call_arg ";"
  101 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 346
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133
    function_call_list         go to state 383
    function_call_arg          go to state 348


State 346

  101 function_call_arg: expression •

    $default  reduce using rule 101 (function_call_arg)


State 347

   91 new_expression: "new" type "(" function_call_list • ")"
  100 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 384
    ")"  shift, and go to state 385


State 348

   99 function_call_list: function_call_arg •

    $default  reduce using rule 99 (function_call_list)


State 349

  136 switch_statement: "switch" "(" expression ")" • case_blocks0 default_block0
  137 case_blocks0: • case_blocks
  138             | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  139 case_blocks: • case_block
  140            | • case_blocks case_block
  141 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 386

    $default  reduce using rule 138 (case_blocks0)

    case_blocks0  go to state 387
    case_blocks   go to state 388
    case_block    go to state 389


State 350

   65 prvalue_expression: "typeof" "(" rvalue_expression ")" •

    $default  reduce using rule 65 (prvalue_expression)


State 351

  111 block_statement: • "{" statements0 "}"
  119 while_loop_statement: "while" "(" expression ")" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 390


State 352

   26 expression0: expression •

    $default  reduce using rule 26 (expression0)


State 353

   96 array_index: expression0 ":" expression0 •

    $default  reduce using rule 96 (array_index)


State 354

   94 array_index_list: array_index_list "," array_index •

    $default  reduce using rule 94 (array_index_list)


State 355

   81 xvalue_expression: "(" rvalue_expression ")" •

    $default  reduce using rule 81 (xvalue_expression)


State 356

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   67                   | "(" rvalue_expression ")" "?" • rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 391
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 357

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   90 lambda_expression: "(" function_argument_list ")" "->" • return_types_list "=>" block_statement
  185 return_types_list: • return_type
  186                  | • return_types_list "," return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_types_list   go to state 394
    return_type         go to state 395


State 358

   97 function_call: xvalue_expression "(" function_argument_list ")" •

    $default  reduce using rule 97 (function_call)


State 359

  132 else_if_statement: "else-if" "(" expression • ")" block_statement

    ")"  shift, and go to state 396


State 360

  135 else_statement: "else" block_statement •

    $default  reduce using rule 135 (else_statement)


State 361

  149 catch_block: "catch" "(" variable_declaration • ")" block_statement

    ")"  shift, and go to state 397


State 362

  182 function_argument: type IDENTIFIER "=" expression •

    $default  reduce using rule 182 (function_argument)


State 363

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  184 throwable_expression: "nothrowable" "(" • expression ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 398
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 364

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  173 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  185 return_types_list: • return_type
  186                  | • return_types_list "," return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_types_list   go to state 399
    return_type         go to state 395


State 365

  172 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 400


State 366

   21 type_list: type_list "," type •

    $default  reduce using rule 21 (type_list)


State 367

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  185 return_types_list: • return_type
  186                  | • return_types_list "," return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"
  194 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_types_list   go to state 401
    return_type         go to state 395


State 368

   66 prvalue_expression: "castas" "!" "(" type ")" • "(" rvalue_expression ")"

    "("  shift, and go to state 402


State 369

  152 clean_up_arg: IDENTIFIER •

    $default  reduce using rule 152 (clean_up_arg)


State 370

  172 function_header: "func" • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  173                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  174 function_modifiers: • "virtual"
  175                   | • "compeval"
  176                   | • "static"
  177                   | • "static" "compeval"
  190 anonymous_function_header: "func" • "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  191                          | "func" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 13
    "compeval"  shift, and go to state 403
    "static"    shift, and go to state 15
    "virtual"   shift, and go to state 16
    "("         shift, and go to state 404

    function_modifiers  go to state 17


State 371

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
   90 lambda_expression: "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 201
    function_argument       go to state 162


State 372

  153 clean_up_arg: lambda_expression •

    $default  reduce using rule 153 (clean_up_arg)


State 373

  151 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg • ")" ";"

    ")"  shift, and go to state 405


State 374

  154 clean_up_arg: function •

    $default  reduce using rule 154 (clean_up_arg)


State 375

  155 clean_up_arg: anonymous_function •

    $default  reduce using rule 155 (clean_up_arg)


State 376

  111 block_statement: • "{" statements0 "}"
  189 anonymous_function: anonymous_function_header • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 406


State 377

  120 do_loop_statement: "do" block_statement "while" "(" expression • ")"

    ")"  shift, and go to state 407


State 378

  121 for_loop_statement: "for" "(" for_loop_condition ")" block_statement •

    $default  reduce using rule 121 (for_loop_statement)


State 379

  123 for_loop_condition: variable_declaration "in" expression •

    $default  reduce using rule 123 (for_loop_condition)


State 380

  122 for_loop_condition: variable_declaration ";" expression0 • ";" expression0

    ";"  shift, and go to state 408


State 381

  127 if_statement: "if" "(" expression ")" block_statement •

    $default  reduce using rule 127 (if_statement)


State 382

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  169 variable_declaration_block: "let" type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 409
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 383

   92 new_expression: "new" "heap" type "(" function_call_list • ")"
  100 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 384
    ")"  shift, and go to state 410


State 384

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  100 function_call_list: function_call_list "," • function_call_arg ";"
  101 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 346
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133
    function_call_arg          go to state 411


State 385

   91 new_expression: "new" type "(" function_call_list ")" •

    $default  reduce using rule 91 (new_expression)


State 386

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  141 case_block: "case" • expression ":" block_statement jump_statement

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 412
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 387

  136 switch_statement: "switch" "(" expression ")" case_blocks0 • default_block0
  142 default_block0: • default_block
  143               | • %empty  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  144 default_block: • "default" ":" block_statement jump_statement

    "default"  shift, and go to state 413

    $default  reduce using rule 143 (default_block0)

    default_block0  go to state 414
    default_block   go to state 415


State 388

  137 case_blocks0: case_blocks •  [IDENTIFIER, BOOL, NPTR, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  140 case_blocks: case_blocks • case_block
  141 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 386

    $default  reduce using rule 137 (case_blocks0)

    case_block  go to state 416


State 389

  139 case_blocks: case_block •

    $default  reduce using rule 139 (case_blocks)


State 390

  119 while_loop_statement: "while" "(" expression ")" block_statement •

    $default  reduce using rule 119 (while_loop_statement)


State 391

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   67                   | "(" rvalue_expression ")" "?" rvalue_expression • ":" rvalue_expression

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221
    ":"    shift, and go to state 417


State 392

  188 return_type: "typeof" • "(" expression ")"

    "("  shift, and go to state 418


State 393

  187 return_type: type •

    $default  reduce using rule 187 (return_type)


State 394

   90 lambda_expression: "(" function_argument_list ")" "->" return_types_list • "=>" block_statement
  186 return_types_list: return_types_list • "," return_type

    ","   shift, and go to state 419
    "=>"  shift, and go to state 420


State 395

  185 return_types_list: return_type •

    $default  reduce using rule 185 (return_types_list)


State 396

  111 block_statement: • "{" statements0 "}"
  132 else_if_statement: "else-if" "(" expression ")" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 421


State 397

  111 block_statement: • "{" statements0 "}"
  149 catch_block: "catch" "(" variable_declaration ")" • block_statement

    "{"  shift, and go to state 69

    block_statement  go to state 422


State 398

  184 throwable_expression: "nothrowable" "(" expression • ")"

    ")"  shift, and go to state 423


State 399

  173 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  186 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 419

    $default  reduce using rule 173 (function_header)


State 400

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  172 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  185 return_types_list: • return_type
  186                  | • return_types_list "," return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_types_list   go to state 424
    return_type         go to state 395


State 401

  186 return_types_list: return_types_list • "," return_type
  194 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["=", "{"]

    ","  shift, and go to state 419

    $default  reduce using rule 194 (operator_overload_header)


State 402

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   66                   | "castas" "!" "(" type ")" "(" • rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 425
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 403

  175 function_modifiers: "compeval" •  [IDENTIFIER]
  190 anonymous_function_header: "func" "compeval" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 426

    $default  reduce using rule 175 (function_modifiers)


State 404

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression
  191 anonymous_function_header: "func" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 427
    function_argument       go to state 162


State 405

  151 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" • ";"

    ";"  shift, and go to state 428


State 406

  189 anonymous_function: anonymous_function_header block_statement •

    $default  reduce using rule 189 (anonymous_function)


State 407

  120 do_loop_statement: "do" block_statement "while" "(" expression ")" •

    $default  reduce using rule 120 (do_loop_statement)


State 408

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   26 expression0: • expression
   27            | • %empty  [")"]
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  122 for_loop_condition: variable_declaration ";" expression0 ";" • expression0

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    $default  reduce using rule 27 (expression0)

    expression                 go to state 352
    expression0                go to state 429
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 409

  169 variable_declaration_block: "let" type IDENTIFIER "=" expression •

    $default  reduce using rule 169 (variable_declaration_block)


State 410

   92 new_expression: "new" "heap" type "(" function_call_list ")" •

    $default  reduce using rule 92 (new_expression)


State 411

  100 function_call_list: function_call_list "," function_call_arg • ";"

    ";"  shift, and go to state 430


State 412

  141 case_block: "case" expression • ":" block_statement jump_statement

    ":"  shift, and go to state 431


State 413

  144 default_block: "default" • ":" block_statement jump_statement

    ":"  shift, and go to state 432


State 414

  136 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0 •

    $default  reduce using rule 136 (switch_statement)


State 415

  142 default_block0: default_block •

    $default  reduce using rule 142 (default_block0)


State 416

  140 case_blocks: case_blocks case_block •

    $default  reduce using rule 140 (case_blocks)


State 417

   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   67                   | "(" rvalue_expression ")" "?" rvalue_expression ":" • rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    prvalue_expression  go to state 192
    rvalue_expression   go to state 433
    xvalue_expression   go to state 194
    literal             go to state 130
    lambda_expression   go to state 131
    new_expression      go to state 132
    function_call       go to state 133


State 418

   24 expression: • assignment_arg_expression
   25           | • xvalue_expression "=" rvalue_expression
   28 assignment_arg_expression: • xvalue_expression
   29                          | • prvalue_expression
   30 prvalue_expression: • literal
   31                   | • "super"
   32                   | • rvalue_expression "+" rvalue_expression
   33                   | • rvalue_expression "-" rvalue_expression
   34                   | • rvalue_expression "*" rvalue_expression
   35                   | • rvalue_expression "/" rvalue_expression
   36                   | • rvalue_expression "//" rvalue_expression
   37                   | • rvalue_expression "^^" rvalue_expression
   38                   | • xvalue_expression "+=" rvalue_expression
   39                   | • xvalue_expression "-=" rvalue_expression
   40                   | • xvalue_expression "*=" rvalue_expression
   41                   | • xvalue_expression "/=" rvalue_expression
   42                   | • xvalue_expression "//=" rvalue_expression
   43                   | • xvalue_expression "^^=" rvalue_expression
   44                   | • rvalue_expression ">" rvalue_expression
   45                   | • rvalue_expression ">=" rvalue_expression
   46                   | • rvalue_expression "<=" rvalue_expression
   47                   | • rvalue_expression "<=>" rvalue_expression
   48                   | • rvalue_expression "&&" rvalue_expression
   49                   | • rvalue_expression "||" rvalue_expression
   50                   | • rvalue_expression "&" rvalue_expression
   51                   | • rvalue_expression "^" rvalue_expression
   52                   | • rvalue_expression "|" rvalue_expression
   53                   | • rvalue_expression "~" rvalue_expression
   54                   | • rvalue_expression ">>" rvalue_expression
   55                   | • rvalue_expression "<<" rvalue_expression
   56                   | • xvalue_expression "&=" rvalue_expression
   57                   | • xvalue_expression "^=" rvalue_expression
   58                   | • xvalue_expression "|=" rvalue_expression
   59                   | • xvalue_expression "~=" rvalue_expression
   60                   | • xvalue_expression ">>=" rvalue_expression
   61                   | • xvalue_expression "<<=" rvalue_expression
   62                   | • rvalue_expression "is" type
   63                   | • "!" rvalue_expression
   64                   | • "-" rvalue_expression
   65                   | • "typeof" "(" rvalue_expression ")"
   66                   | • "castas" "!" "(" type ")" "(" rvalue_expression ")"
   67                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   68                   | • new_expression
   69                   | • lambda_expression
   70 rvalue_expression: • prvalue_expression
   71                  | • xvalue_expression
   72 xvalue_expression: • IDENTIFIER
   73                  | • "this"
   74                  | • "++" xvalue_expression
   75                  | • "--" xvalue_expression
   76                  | • xvalue_expression "++"
   77                  | • xvalue_expression "--"
   78                  | • "*" xvalue_expression
   79                  | • xvalue_expression "." xvalue_expression
   80                  | • xvalue_expression "->" xvalue_expression
   81                  | • "(" rvalue_expression ")"
   82                  | • "[" array_index_list "]"
   83                  | • function_call
   84 literal: • BOOL
   85        | • NPTR
   86        | • INT
   87        | • FLOAT
   88        | • STRING
   89        | • CHAR
   90 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   91 new_expression: • "new" type "(" function_call_list ")"
   92               | • "new" "heap" type "(" function_call_list ")"
   97 function_call: • xvalue_expression "(" function_argument_list ")"
   98              | • xvalue_expression "(" ")"
  188 return_type: "typeof" "(" • expression ")"

    IDENTIFIER  shift, and go to state 90
    BOOL        shift, and go to state 91
    NPTR        shift, and go to state 92
    INT         shift, and go to state 93
    FLOAT       shift, and go to state 94
    CHAR        shift, and go to state 95
    STRING      shift, and go to state 96
    "castas"    shift, and go to state 98
    "new"       shift, and go to state 106
    "super"     shift, and go to state 109
    "this"      shift, and go to state 111
    "typeof"    shift, and go to state 114
    "["         shift, and go to state 117
    "-"         shift, and go to state 118
    "*"         shift, and go to state 119
    "!"         shift, and go to state 120
    "++"        shift, and go to state 121
    "--"        shift, and go to state 122
    "("         shift, and go to state 123

    expression                 go to state 434
    assignment_arg_expression  go to state 126
    prvalue_expression         go to state 127
    rvalue_expression          go to state 128
    xvalue_expression          go to state 129
    literal                    go to state 130
    lambda_expression          go to state 131
    new_expression             go to state 132
    function_call              go to state 133


State 419

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  186 return_types_list: return_types_list "," • return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_type         go to state 435


State 420

   90 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" • block_statement
  111 block_statement: • "{" statements0 "}"

    "{"  shift, and go to state 69

    block_statement  go to state 436


State 421

  132 else_if_statement: "else-if" "(" expression ")" block_statement •

    $default  reduce using rule 132 (else_if_statement)


State 422

  149 catch_block: "catch" "(" variable_declaration ")" block_statement •

    $default  reduce using rule 149 (catch_block)


State 423

  184 throwable_expression: "nothrowable" "(" expression ")" •

    $default  reduce using rule 184 (throwable_expression)


State 424

  172 function_header: "func" function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  186 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 419

    $default  reduce using rule 172 (function_header)


State 425

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   66                   | "castas" "!" "(" type ")" "(" rvalue_expression • ")"

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221
    ")"    shift, and go to state 437


State 426

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  178 function_argument_list: • function_argument
  179                       | • function_argument_list "," function_argument
  180 function_argument: • type IDENTIFIER
  181                  | • type "..."
  182                  | • type IDENTIFIER "=" expression
  190 anonymous_function_header: "func" "compeval" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29

    type                    go to state 160
    type_root               go to state 63
    non_reference_type      go to state 64
    type_core               go to state 65
    reference_type          go to state 66
    function_argument_list  go to state 438
    function_argument       go to state 162


State 427

  179 function_argument_list: function_argument_list • "," function_argument
  191 anonymous_function_header: "func" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 256
    ")"  shift, and go to state 439


State 428

  151 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";" •

    $default  reduce using rule 151 (clean_up_statement)


State 429

  122 for_loop_condition: variable_declaration ";" expression0 ";" expression0 •

    $default  reduce using rule 122 (for_loop_condition)


State 430

  100 function_call_list: function_call_list "," function_call_arg ";" •

    $default  reduce using rule 100 (function_call_list)


State 431

  111 block_statement: • "{" statements0 "}"
  141 case_block: "case" expression ":" • block_statement jump_statement

    "{"  shift, and go to state 69

    block_statement  go to state 440


State 432

  111 block_statement: • "{" statements0 "}"
  144 default_block: "default" ":" • block_statement jump_statement

    "{"  shift, and go to state 69

    block_statement  go to state 441


State 433

   32 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression • "^^" rvalue_expression
   44                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression • "&&" rvalue_expression
   49                   | rvalue_expression • "||" rvalue_expression
   50                   | rvalue_expression • "&" rvalue_expression
   51                   | rvalue_expression • "^" rvalue_expression
   52                   | rvalue_expression • "|" rvalue_expression
   53                   | rvalue_expression • "~" rvalue_expression
   54                   | rvalue_expression • ">>" rvalue_expression
   55                   | rvalue_expression • "<<" rvalue_expression
   62                   | rvalue_expression • "is" type
   67                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]

    "is"   shift, and go to state 203
    ">"    shift, and go to state 204
    "+"    shift, and go to state 205
    "-"    shift, and go to state 206
    "/"    shift, and go to state 207
    "//"   shift, and go to state 208
    "*"    shift, and go to state 209
    "^^"   shift, and go to state 210
    "<="   shift, and go to state 211
    ">="   shift, and go to state 212
    "<=>"  shift, and go to state 213
    "&&"   shift, and go to state 214
    "||"   shift, and go to state 215
    "&"    shift, and go to state 216
    "|"    shift, and go to state 217
    "^"    shift, and go to state 218
    "~"    shift, and go to state 219
    ">>"   shift, and go to state 220
    "<<"   shift, and go to state 221

    $default  reduce using rule 67 (prvalue_expression)

    Conflict between rule 67 and token "is" resolved as shift (%right "is").
    Conflict between rule 67 and token ">" resolved as shift (TERN < ">").
    Conflict between rule 67 and token "+" resolved as shift (TERN < "+").
    Conflict between rule 67 and token "-" resolved as shift (TERN < "-").
    Conflict between rule 67 and token "/" resolved as shift (TERN < "/").
    Conflict between rule 67 and token "//" resolved as shift (TERN < "//").
    Conflict between rule 67 and token "*" resolved as shift (TERN < "*").
    Conflict between rule 67 and token "^^" resolved as shift (TERN < "^^").
    Conflict between rule 67 and token "<=" resolved as shift (TERN < "<=").
    Conflict between rule 67 and token ">=" resolved as shift (TERN < ">=").
    Conflict between rule 67 and token "<=>" resolved as shift (TERN < "<=>").
    Conflict between rule 67 and token "&&" resolved as shift (TERN < "&&").
    Conflict between rule 67 and token "||" resolved as shift (TERN < "||").
    Conflict between rule 67 and token "&" resolved as shift (TERN < "&").
    Conflict between rule 67 and token "|" resolved as shift (TERN < "|").
    Conflict between rule 67 and token "^" resolved as shift (TERN < "^").
    Conflict between rule 67 and token "~" resolved as shift (TERN < "~").
    Conflict between rule 67 and token ">>" resolved as shift (TERN < ">>").
    Conflict between rule 67 and token "<<" resolved as shift (TERN < "<<").


State 434

  188 return_type: "typeof" "(" expression • ")"

    ")"  shift, and go to state 442


State 435

  186 return_types_list: return_types_list "," return_type •

    $default  reduce using rule 186 (return_types_list)


State 436

   90 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement •

    $default  reduce using rule 90 (lambda_expression)


State 437

   66 prvalue_expression: "castas" "!" "(" type ")" "(" rvalue_expression ")" •

    $default  reduce using rule 66 (prvalue_expression)


State 438

  179 function_argument_list: function_argument_list • "," function_argument
  190 anonymous_function_header: "func" "compeval" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 256
    ")"  shift, and go to state 443


State 439

  183 throwable_expression: • "nothrowable"
  184                     | • "nothrowable" "(" expression ")"
  191 anonymous_function_header: "func" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 330

    throwable_expression  go to state 444


State 440

  141 case_block: "case" expression ":" block_statement • jump_statement
  156 jump_statement: • "return" ";"
  157               | • "break" ";"
  158               | • "continue" ";"
  159               | • "rethrow" ";"
  160               | • "throw" expression ";"
  161               | • "yield" ";"
  162               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 97
    "continue"  shift, and go to state 100
    "goto"      shift, and go to state 103
    "rethrow"   shift, and go to state 107
    "return"    shift, and go to state 108
    "throw"     shift, and go to state 112
    "yield"     shift, and go to state 116

    jump_statement  go to state 445


State 441

  144 default_block: "default" ":" block_statement • jump_statement
  156 jump_statement: • "return" ";"
  157               | • "break" ";"
  158               | • "continue" ";"
  159               | • "rethrow" ";"
  160               | • "throw" expression ";"
  161               | • "yield" ";"
  162               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 97
    "continue"  shift, and go to state 100
    "goto"      shift, and go to state 103
    "rethrow"   shift, and go to state 107
    "return"    shift, and go to state 108
    "throw"     shift, and go to state 112
    "yield"     shift, and go to state 116

    jump_statement  go to state 446


State 442

  188 return_type: "typeof" "(" expression ")" •

    $default  reduce using rule 188 (return_type)


State 443

  183 throwable_expression: • "nothrowable"
  184                     | • "nothrowable" "(" expression ")"
  190 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 330

    throwable_expression  go to state 447


State 444

  191 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 448


State 445

  141 case_block: "case" expression ":" block_statement jump_statement •

    $default  reduce using rule 141 (case_block)


State 446

  144 default_block: "default" ":" block_statement jump_statement •

    $default  reduce using rule 144 (default_block)


State 447

  190 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 449


State 448

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  185 return_types_list: • return_type
  186                  | • return_types_list "," return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"
  191 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_types_list   go to state 450
    return_type         go to state 395


State 449

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core ARRAYL INT ARRAYR
   10 type_core: • TYPENAME type_template_paramaters
   11          | • TYPENAME
   12          | • "bit"
   13          | • "bool"
   14          | • "short"
   15          | • "int"
   16          | • "long"
   17          | • "float"
   18          | • "char"
   22 reference_type: • "ref" non_reference_type
   23               | • "rref" non_reference_type
  185 return_types_list: • return_type
  186                  | • return_types_list "," return_type
  187 return_type: • type
  188            | • "typeof" "(" expression ")"
  190 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 18
    "bit"     shift, and go to state 19
    "bool"    shift, and go to state 20
    "char"    shift, and go to state 21
    "const"   shift, and go to state 22
    "float"   shift, and go to state 23
    "int"     shift, and go to state 24
    "long"    shift, and go to state 25
    "ref"     shift, and go to state 27
    "rref"    shift, and go to state 28
    "short"   shift, and go to state 29
    "typeof"  shift, and go to state 392

    type                go to state 393
    type_root           go to state 63
    non_reference_type  go to state 64
    type_core           go to state 65
    reference_type      go to state 66
    return_types_list   go to state 451
    return_type         go to state 395


State 450

  186 return_types_list: return_types_list • "," return_type
  191 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 419

    $default  reduce using rule 191 (anonymous_function_header)


State 451

  186 return_types_list: return_types_list • "," return_type
  190 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 419

    $default  reduce using rule 190 (anonymous_function_header)
