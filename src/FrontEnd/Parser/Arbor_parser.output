Nonterminals useless in grammar

    template_tyepdef


Terminals unused in grammar

    "initialize"


Rules useless in grammar

  327 template_tyepdef: %empty


Grammar

    0 $accept: start $end

    1 start: program_units
    2      | %empty

    3 type: "const" type_root
    4     | type_root

    5 type_root: non_reference_type
    6          | reference_type

    7 non_reference_type: type_core
    8                   | type_core POINTER_TYPE
    9                   | type_core "weak" POINTER_TYPE
   10                   | type_core ARRAYL xvalue_expression ARRAYR

   11 type_core: TYPENAME type_template_paramaters
   12          | TYPENAME
   13          | "bit"
   14          | "bool"
   15          | "short"
   16          | "int"
   17          | "long"
   18          | "float"
   19          | "char"

   20 type_template_paramaters: T_BEGIN type_list T_END

   21 type_list: type
   22          | type_list "," type

   23 reference_type: "ref" non_reference_type
   24               | "rref" non_reference_type

   25 expression: assignment_arg_expression
   26           | xvalue_expression "=" rvalue_expression

   27 expression0: expression
   28            | %empty

   29 assignment_arg_expression: xvalue_expression
   30                          | prvalue_expression

   31 prvalue_expression: literal
   32                   | "super"
   33                   | rvalue_expression "+" rvalue_expression
   34                   | rvalue_expression "-" rvalue_expression
   35                   | rvalue_expression "*" rvalue_expression
   36                   | rvalue_expression "/" rvalue_expression
   37                   | rvalue_expression "//" rvalue_expression
   38                   | rvalue_expression "^^" rvalue_expression
   39                   | xvalue_expression "+=" rvalue_expression
   40                   | xvalue_expression "-=" rvalue_expression
   41                   | xvalue_expression "*=" rvalue_expression
   42                   | xvalue_expression "/=" rvalue_expression
   43                   | xvalue_expression "//=" rvalue_expression
   44                   | xvalue_expression "^^=" rvalue_expression
   45                   | rvalue_expression ">" rvalue_expression
   46                   | rvalue_expression ">=" rvalue_expression
   47                   | rvalue_expression "<=" rvalue_expression
   48                   | rvalue_expression "<=>" rvalue_expression
   49                   | rvalue_expression "!=" rvalue_expression
   50                   | rvalue_expression "==" rvalue_expression
   51                   | rvalue_expression "&&" rvalue_expression
   52                   | rvalue_expression "||" rvalue_expression
   53                   | rvalue_expression "&" rvalue_expression
   54                   | rvalue_expression "^" rvalue_expression
   55                   | rvalue_expression "|" rvalue_expression
   56                   | rvalue_expression "~" rvalue_expression
   57                   | rvalue_expression ">>" rvalue_expression
   58                   | rvalue_expression "<<" rvalue_expression
   59                   | xvalue_expression "&=" rvalue_expression
   60                   | xvalue_expression "^=" rvalue_expression
   61                   | xvalue_expression "|=" rvalue_expression
   62                   | xvalue_expression "~=" rvalue_expression
   63                   | xvalue_expression ">>=" rvalue_expression
   64                   | xvalue_expression "<<=" rvalue_expression
   65                   | rvalue_expression "is" type
   66                   | "!" rvalue_expression
   67                   | "-" rvalue_expression
   68                   | "typeof" "(" rvalue_expression ")"
   69                   | "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | new_expression
   72                   | lambda_expression

   73 rvalue_expression: prvalue_expression
   74                  | xvalue_expression

   75 xvalue_expression: IDENTIFIER
   76                  | "this"
   77                  | "++" xvalue_expression
   78                  | "--" xvalue_expression
   79                  | xvalue_expression "++"
   80                  | xvalue_expression "--"
   81                  | "*" xvalue_expression
   82                  | xvalue_expression "." xvalue_expression
   83                  | xvalue_expression "->" xvalue_expression
   84                  | "(" rvalue_expression ")"
   85                  | "[" array_index_list "]"
   86                  | function_call

   87 literal: BOOL
   88        | NPTR
   89        | INT
   90        | FLOAT
   91        | STRING
   92        | CHAR

   93 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement

   94 new_expression: "new" type "(" function_call_list ")"
   95               | "new" "heap" type "(" function_call_list ")"

   96 array_index_list: array_index
   97                 | array_index_list "," array_index

   98 array_index: expression
   99            | expression0 ":" expression0

  100 function_call: xvalue_expression "(" function_argument_list ")"
  101              | xvalue_expression "(" ")"

  102 function_call_list: function_call_arg
  103                   | function_call_list "," function_call_arg ";"

  104 function_call_arg: expression

  105 statement: block_statement
  106          | loop_statement
  107          | conditional_statement
  108          | exception_statement
  109          | clean_up_statement
  110          | jump_statement
  111          | expression_statement
  112          | variable_declaration_statement
  113          | no_op_statement

  114 block_statement: "{" statements0 "}"

  115 statements0: statements
  116            | %empty

  117 statements: statement
  118           | statements statement

  119 loop_statement: while_loop_statement
  120               | do_loop_statement
  121               | for_loop_statement

  122 while_loop_statement: "while" "(" expression ")" block_statement

  123 do_loop_statement: "do" block_statement "while" "(" expression ")"

  124 for_loop_statement: "for" "(" for_loop_condition ")" block_statement

  125 for_loop_condition: variable_declaration ";" expression0 ";" expression0
  126                   | variable_declaration "in" expression

  127 conditional_statement: if_statement_sequence
  128                      | switch_statement

  129 if_statement_sequence: if_statement else_if_statements0 else_statement0

  130 if_statement: "if" "(" expression ")" block_statement

  131 else_if_statements0: else_if_statements
  132                    | %empty

  133 else_if_statements: else_if_statement
  134                   | else_if_statements else_if_statement

  135 else_if_statement: "else-if" "(" expression ")" block_statement

  136 else_statement0: else_statement
  137                | %empty

  138 else_statement: "else" block_statement

  139 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0

  140 case_blocks0: case_blocks
  141             | %empty

  142 case_blocks: case_block
  143            | case_blocks case_block

  144 case_block: "case" expression ":" block_statement jump_statement

  145 default_block0: default_block
  146               | %empty

  147 default_block: "default" ":" block_statement jump_statement

  148 exception_statement: try_block catch_blocks

  149 try_block: "try" block_statement

  150 catch_blocks: catch_block
  151             | catch_blocks catch_block

  152 catch_block: "catch" "(" variable_declaration ")" block_statement
  153            | "catch-all" block_statement

  154 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"

  155 clean_up_arg: IDENTIFIER
  156             | lambda_expression
  157             | function
  158             | anonymous_function

  159 jump_statement: "return" ";"
  160               | "break" ";"
  161               | "continue" ";"
  162               | "rethrow" ";"
  163               | "throw" expression ";"
  164               | "yield" ";"
  165               | "goto" IDENTIFIER ";"

  166 expression_statement: expression ";"

  167 variable_declaration_statement: variable_declaration ";"

  168 variable_declaration: "let" access_modifier0 variable_declaration_block_list

  169 variable_declaration_block_list: variable_declaration_block
  170                                | variable_declaration_block_list "," variable_declaration_block

  171 variable_declaration_block: "let" type IDENTIFIER
  172                           | "let" type IDENTIFIER "=" expression

  173 access_modifier0: access_modifier
  174                 | %empty

  175 access_modifier: "public"
  176                | "private"
  177                | "protected"

  178 no_op_statement: ";"

  179 function: template_header function_header block_statement
  180         | function_header block_statement

  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

  183 function_modifiers: "virtual"
  184                   | "compeval"
  185                   | "static"
  186                   | "static" "compeval"
  187                   | "virtual const"
  188                   | "compeval const"
  189                   | %empty

  190 function_argument_list: function_argument
  191                       | function_argument_list "," function_argument

  192 function_argument: type IDENTIFIER
  193                  | type "..."
  194                  | type IDENTIFIER "=" expression

  195 throwable_expression: "nothrowable"
  196                     | "nothrowable" "(" expression ")"

  197 return_types_list: return_type
  198                  | return_types_list "," return_type

  199 return_type: type
  200            | "typeof" "(" expression ")"

  201 anonymous_function: template_header anonymous_function_header block_statement
  202                   | anonymous_function_header block_statement

  203 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  204                          | "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

  205 operator_overload: operator_overload_header block_statement
  206                  | operator_overload_header "=" function_options ";"

  207 operator_overload_header: template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list

  209 operator: "+"
  210         | "-"
  211         | "*"
  212         | "/"
  213         | "//"
  214         | "^^"
  215         | "%"
  216         | "+="
  217         | "-="
  218         | "*="
  219         | "/="
  220         | "//="
  221         | "^^="
  222         | "%="
  223         | ">"
  224         | ">="
  225         | "<"
  226         | "<="
  227         | "<=>"
  228         | "=="
  229         | "!="
  230         | "^"
  231         | "&"
  232         | "~"
  233         | "<<"
  234         | ">>"
  235         | "="
  236         | "++"
  237         | "--"
  238         | "[" "]"
  239         | "(" ")"
  240         | "->"
  241         | "new"
  242         | type

  243 function_options: "delete"
  244                 | "default"

  245 callable: function
  246         | operator_overload

  247 enum: "enum" "{" enum_members_list "}"

  248 enum_members_list: enum_member
  249                  | enum_members_list "," enum_member

  250 enum_member: IDENTIFIER
  251            | IDENTIFIER "=" INT

  252 class: class_header "{" class_statements "}"
  253      | class_header "{" "}"

  254 class_header: template_header "class" IDENTIFIER
  255             | template_header "class" IDENTIFIER inheritance

  256 inheritance: "inherits" class_names_list

  257 class_names_list: class_name
  258                 | class_names_list "," class_name

  259 class_name: IDENTIFIER
  260           | IDENTIFIER type_template_paramaters

  261 class_statements: class_statement
  262                 | class_statements class_statement

  263 class_statement: variable_declaration_statement
  264                | callable
  265                | constructor
  266                | destructor
  267                | property
  268                | class

  269 property: template_header "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270         | "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

  271 property_blocks: get_block
  272                | set_block
  273                | get_block set_block
  274                | set_block get_block

  275 get_block: "get" "(" ")" "=>" IDENTIFIER ";"
  276          | "get" "(" ")" block_statement

  277 set_block: "set" "(" ")" "=>" IDENTIFIER ";"
  278          | "set" "(" ")" block_statement

  279 constructor: constructor_header initializer_list block_statement
  280            | constructor_header initializer_list ";"
  281            | constructor_header block_statement
  282            | constructor_header "=" function_options ";"

  283 constructor_header: template_header "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  284                   | "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

  285 initializer_list: "=>" "initailize" "(" initializer_blocks_list ")"

  286 initializer_blocks_list: initializer_block
  287                        | initializer_blocks_list "," initializer_block

  288 initializer_block: IDENTIFIER ":" rvalue_expression

  289 compeval0: "compeval"
  290          | %empty

  291 destructor: destructor_header block_statement
  292           | destructor_header "=" function_options ";"

  293 destructor_header: "~" IDENTIFIER "(" ")"

  294 template_header: template_declaration_list "=>"

  295 template_declaration_list: template_declaration_type
  296                          | template_declaration_list "," template_declaration_type

  297 template_declaration_type: "type" IDENTIFIER
  298                          | type IDENTIFIER
  299                          | type

  300 module: "module" module_name ";"
  301       | "module" module_name ":" IDENTIFIER ";"

  302 module_name: IDENTIFIER
  303            | module_name "." IDENTIFIER
  304            | module_name "-" IDENTIFIER

  305 import: "import" module_name ";"
  306       | "import" ":" IDENTIFIER ";"

  307 type_definition: access_modifier0 "define" type "as" IDENTIFIER ";"

  308 namespace: "namespace" module_name "{" namespace_units "}"
  309          | "namespace" module_name "{" "}"

  310 namespace_units: namespace_unit
  311                | namespace_units namespace_unit

  312 namespace_unit: class
  313               | enum
  314               | callable
  315               | type_definition
  316               | variable_declaration_statement

  317 program_units: program_unit
  318              | program_units program_unit

  319 program_unit: module
  320             | import
  321             | type_definition
  322             | callable
  323             | variable_declaration_statement
  324             | class
  325             | enum
  326             | namespace


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <std::string> (258) 75 154 155 165 171 172 181 182 192 194 250 251 254 255 259 260 269 270 275 277 283 284 288 293 297 298 301 302 303 304 306 307
    TYPENAME <std::string> (259) 11 12
    NPTR (260) 88
    BOOL <bool> (261) 87
    INT <int> (262) 89 251
    FLOAT <double> (263) 90
    CHAR <std::string> (264) 92
    STRING <std::string> (265) 91
    "as" (266) 307
    "break" (267) 160
    "bit" (268) 13
    "bool" (269) 14
    "case" (270) 144
    "castas" (271) 69
    "catch" (272) 152
    "catch-all" (273) 153
    "char" (274) 19
    "class" (275) 254 255
    "cleanup" (276) 154
    "const" (277) 3
    "continue" (278) 161
    "compeval" (279) 184 186 203 289
    "ctor" (280) 283 284
    "default" (281) 147 244
    "define" (282) 307
    "delete" (283) 243
    "do" (284) 123
    "else" (285) 138
    "else-if" (286) 135
    "enum" (287) 247
    "float" (288) 18
    "for" (289) 124
    "func" (290) 181 182 203 204
    "get" (291) 275 276
    "goto" (292) 165
    "heap" (293) 95
    "if" (294) 130
    "import" (295) 305 306
    "in" (296) 126
    "inherits" (297) 256
    "initialize" (298)
    "int" (299) 16
    "is" (300) 65
    "let" (301) 168 171 172 269 270
    "long" (302) 17
    "module" (303) 300 301
    "new" (304) 94 95 241
    "nothrowable" (305) 195 196
    "operator" (306) 207 208
    "private" (307) 176
    "property" (308) 269 270
    "protected" (309) 177
    "public" (310) 175
    "ref" (311) 23
    "rref" (312) 24
    "rethrow" (313) 162
    "return" (314) 159
    "set" (315) 277 278
    "short" (316) 15
    "static" (317) 185 186
    "super" (318) 32
    "switch" (319) 139
    "this" (320) 76
    "throw" (321) 163
    "try" (322) 149
    "typeof" (323) 68 200
    "virtual" (324) 183
    "weak" (325) 9
    "while" (326) 122 123
    "yield" (327) 164
    "[" (328) 85 238
    "]" (329) 85 238
    "<" (330) 69 225
    ">" (331) 45 69 223
    "," (332) 22 97 103 154 170 191 198 249 258 287 296
    "+" (333) 33 209
    "-" (334) 34 67 210 304
    "/" (335) 36 212
    "//" (336) 37 213
    "*" (337) 35 81 211
    "^^" (338) 38 214
    "%" (339) 215
    "+=" (340) 39 216
    "-=" (341) 40 217
    "*=" (342) 41 218
    "/=" (343) 42 219
    "//=" (344) 43 220
    "^^=" (345) 44 221
    "%=" (346) 222
    "<=" (347) 47 226
    ">=" (348) 46 224
    "==" (349) 50 228
    "!=" (350) 49 229
    "<=>" (351) 48 227
    "&&" (352) 51
    "||" (353) 52
    "&" (354) 53 231
    "|" (355) 55
    "!" (356) 66
    "^" (357) 54 230
    "~" (358) 56 232 293
    ">>" (359) 57 234
    "<<" (360) 58 233
    "=" (361) 26 172 194 206 235 251 282 292
    "++" (362) 77 79 236
    "--" (363) 78 80 237
    "(" (364) 68 69 70 84 93 94 95 100 101 122 123 124 130 135 139 152 154 181 182 196 200 203 204 207 208 239 275 276 277 278 283 284 285 293
    ")" (365) 68 69 70 84 93 94 95 100 101 122 123 124 130 135 139 152 154 181 182 196 200 203 204 207 208 239 275 276 277 278 283 284 285 293
    "?" (366) 70
    ":" (367) 70 99 144 147 288 301 306
    "." (368) 82 303
    "->" (369) 83 93 181 182 203 204 207 208 240
    "{" (370) 114 247 252 253 269 270 308 309
    "}" (371) 114 247 252 253 269 270 308 309
    "=>" (372) 93 275 277 285 294
    ";" (373) 103 125 154 159 160 161 162 163 164 165 166 167 178 206 269 270 275 277 280 282 292 300 301 305 306 307
    "..." (374) 193
    "&=" (375) 59
    "^=" (376) 60
    "|=" (377) 61
    "~=" (378) 62
    "<<=" (379) 64
    ">>=" (380) 63
    POINTER_TYPE (381) 8 9
    ARRAYL (382) 10
    ARRAYR (383) 10
    T_BEGIN (384) 20
    T_END (385) 20
    UMINUS (386)
    POSTINC (387)
    POSTDEC (388)
    TERN (389)
    DEREF (390)
    "virtual const" (391) 187
    "compeval const" (392) 188
    "initailize" (393) 285
    "type" (394) 297
    "namespace" (395) 308 309


Nonterminals, with rules where they appear

    $accept (141)
        on left: 0
    start (142)
        on left: 1 2
        on right: 0
    type (143)
        on left: 3 4
        on right: 21 22 65 69 94 95 171 172 192 193 194 199 242 269 270 298 299 307
    type_root (144)
        on left: 5 6
        on right: 3 4
    non_reference_type (145)
        on left: 7 8 9 10
        on right: 5 23 24
    type_core (146)
        on left: 11 12 13 14 15 16 17 18 19
        on right: 7 8 9 10
    type_template_paramaters (147)
        on left: 20
        on right: 11 260
    type_list (148)
        on left: 21 22
        on right: 20 22
    reference_type (149)
        on left: 23 24
        on right: 6
    expression (150)
        on left: 25 26
        on right: 27 98 104 122 123 126 130 135 139 144 163 166 172 194 196 200
    expression0 (151)
        on left: 27 28
        on right: 99 125
    assignment_arg_expression (152)
        on left: 29 30
        on right: 25
    prvalue_expression (153)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
        on right: 30 73
    rvalue_expression (154)
        on left: 73 74
        on right: 26 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 84 288
    xvalue_expression (155)
        on left: 75 76 77 78 79 80 81 82 83 84 85 86
        on right: 10 26 29 39 40 41 42 43 44 59 60 61 62 63 64 74 77 78 79 80 81 82 83 100 101
    literal <prvalue_expression_node*> (156)
        on left: 87 88 89 90 91 92
        on right: 31
    lambda_expression (157)
        on left: 93
        on right: 72 156
    new_expression (158)
        on left: 94 95
        on right: 71
    array_index_list (159)
        on left: 96 97
        on right: 85 97
    array_index (160)
        on left: 98 99
        on right: 96 97
    function_call (161)
        on left: 100 101
        on right: 86
    function_call_list (162)
        on left: 102 103
        on right: 94 95 103
    function_call_arg (163)
        on left: 104
        on right: 102 103
    statement (164)
        on left: 105 106 107 108 109 110 111 112 113
        on right: 117 118
    block_statement (165)
        on left: 114
        on right: 93 105 122 123 124 130 135 138 144 147 149 152 153 179 180 201 202 205 276 278 279 281 291
    statements0 (166)
        on left: 115 116
        on right: 114
    statements (167)
        on left: 117 118
        on right: 115 118
    loop_statement (168)
        on left: 119 120 121
        on right: 106
    while_loop_statement (169)
        on left: 122
        on right: 119
    do_loop_statement (170)
        on left: 123
        on right: 120
    for_loop_statement (171)
        on left: 124
        on right: 121
    for_loop_condition (172)
        on left: 125 126
        on right: 124
    conditional_statement (173)
        on left: 127 128
        on right: 107
    if_statement_sequence (174)
        on left: 129
        on right: 127
    if_statement (175)
        on left: 130
        on right: 129
    else_if_statements0 (176)
        on left: 131 132
        on right: 129
    else_if_statements (177)
        on left: 133 134
        on right: 131 134
    else_if_statement (178)
        on left: 135
        on right: 133 134
    else_statement0 (179)
        on left: 136 137
        on right: 129
    else_statement (180)
        on left: 138
        on right: 136
    switch_statement (181)
        on left: 139
        on right: 128
    case_blocks0 (182)
        on left: 140 141
        on right: 139
    case_blocks (183)
        on left: 142 143
        on right: 140 143
    case_block (184)
        on left: 144
        on right: 142 143
    default_block0 (185)
        on left: 145 146
        on right: 139
    default_block (186)
        on left: 147
        on right: 145
    exception_statement (187)
        on left: 148
        on right: 108
    try_block (188)
        on left: 149
        on right: 148
    catch_blocks (189)
        on left: 150 151
        on right: 148 151
    catch_block (190)
        on left: 152 153
        on right: 150 151
    clean_up_statement (191)
        on left: 154
        on right: 109
    clean_up_arg (192)
        on left: 155 156 157 158
        on right: 154
    jump_statement (193)
        on left: 159 160 161 162 163 164 165
        on right: 110 144 147
    expression_statement (194)
        on left: 166
        on right: 111
    variable_declaration_statement (195)
        on left: 167
        on right: 112 263 316 323
    variable_declaration (196)
        on left: 168
        on right: 125 126 152 167
    variable_declaration_block_list (197)
        on left: 169 170
        on right: 168 170
    variable_declaration_block (198)
        on left: 171 172
        on right: 169 170
    access_modifier0 (199)
        on left: 173 174
        on right: 168 307
    access_modifier (200)
        on left: 175 176 177
        on right: 173 181 269 270 283 284
    no_op_statement (201)
        on left: 178
        on right: 113
    function (202)
        on left: 179 180
        on right: 157 245
    function_header (203)
        on left: 181 182
        on right: 179 180
    function_modifiers (204)
        on left: 183 184 185 186 187 188 189
        on right: 181
    function_argument_list (205)
        on left: 190 191
        on right: 93 100 181 182 191 203 204 207 208 283 284
    function_argument (206)
        on left: 192 193 194
        on right: 190 191
    throwable_expression (207)
        on left: 195 196
        on right: 181 182 203 204 207 208 283 284
    return_types_list (208)
        on left: 197 198
        on right: 93 181 182 198 203 204 207 208
    return_type (209)
        on left: 199 200
        on right: 197 198
    anonymous_function (210)
        on left: 201 202
        on right: 158
    anonymous_function_header (211)
        on left: 203 204
        on right: 201 202
    operator_overload (212)
        on left: 205 206
        on right: 246
    operator_overload_header (213)
        on left: 207 208
        on right: 205 206
    operator (214)
        on left: 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
        on right: 207 208
    function_options (215)
        on left: 243 244
        on right: 206 282 292
    callable (216)
        on left: 245 246
        on right: 264 314 322
    enum (217)
        on left: 247
        on right: 313 325
    enum_members_list (218)
        on left: 248 249
        on right: 247 249
    enum_member (219)
        on left: 250 251
        on right: 248 249
    class (220)
        on left: 252 253
        on right: 268 312 324
    class_header (221)
        on left: 254 255
        on right: 252 253
    inheritance (222)
        on left: 256
        on right: 255
    class_names_list (223)
        on left: 257 258
        on right: 256 258
    class_name (224)
        on left: 259 260
        on right: 257 258
    class_statements (225)
        on left: 261 262
        on right: 252 262
    class_statement (226)
        on left: 263 264 265 266 267 268
        on right: 261 262
    property (227)
        on left: 269 270
        on right: 267
    property_blocks (228)
        on left: 271 272 273 274
        on right: 269 270
    get_block (229)
        on left: 275 276
        on right: 271 273 274
    set_block (230)
        on left: 277 278
        on right: 272 273 274
    constructor (231)
        on left: 279 280 281 282
        on right: 265
    constructor_header (232)
        on left: 283 284
        on right: 279 280 281 282
    initializer_list (233)
        on left: 285
        on right: 279 280
    initializer_blocks_list (234)
        on left: 286 287
        on right: 285 287
    initializer_block (235)
        on left: 288
        on right: 286 287
    compeval0 (236)
        on left: 289 290
        on right: 283 284
    destructor (237)
        on left: 291 292
        on right: 266
    destructor_header (238)
        on left: 293
        on right: 291 292
    template_header (239)
        on left: 294
        on right: 179 201 254 255 269 283
    template_declaration_list (240)
        on left: 295 296
        on right: 294 296
    template_declaration_type (241)
        on left: 297 298 299
        on right: 207 295 296
    module (242)
        on left: 300 301
        on right: 319
    module_name (243)
        on left: 302 303 304
        on right: 300 301 303 304 305 308 309
    import (244)
        on left: 305 306
        on right: 320
    type_definition (245)
        on left: 307
        on right: 315 321
    namespace (246)
        on left: 308 309
        on right: 326
    namespace_units (247)
        on left: 310 311
        on right: 308 311
    namespace_unit (248)
        on left: 312 313 314 315 316
        on right: 310 311
    program_units (249)
        on left: 317 318
        on right: 1 318
    program_unit (250)
        on left: 319 320 321 322 323 324 325 326
        on right: 317 318


State 0

    0 $accept: • start $end
    1 start: • program_units
    2      | • %empty  [$end]
    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  173 access_modifier0: • access_modifier
  174                 | • %empty  ["define"]
  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  205 operator_overload: • operator_overload_header block_statement
  206                  | • operator_overload_header "=" function_options ";"
  207 operator_overload_header: • template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  245 callable: • function
  246         | • operator_overload
  247 enum: • "enum" "{" enum_members_list "}"
  252 class: • class_header "{" class_statements "}"
  253      | • class_header "{" "}"
  254 class_header: • template_header "class" IDENTIFIER
  255             | • template_header "class" IDENTIFIER inheritance
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type
  300 module: • "module" module_name ";"
  301       | • "module" module_name ":" IDENTIFIER ";"
  305 import: • "import" module_name ";"
  306       | • "import" ":" IDENTIFIER ";"
  307 type_definition: • access_modifier0 "define" type "as" IDENTIFIER ";"
  308 namespace: • "namespace" module_name "{" namespace_units "}"
  309          | • "namespace" module_name "{" "}"
  317 program_units: • program_unit
  318              | • program_units program_unit
  319 program_unit: • module
  320             | • import
  321             | • type_definition
  322             | • callable
  323             | • variable_declaration_statement
  324             | • class
  325             | • enum
  326             | • namespace

    TYPENAME     shift, and go to state 1
    "bit"        shift, and go to state 2
    "bool"       shift, and go to state 3
    "char"       shift, and go to state 4
    "const"      shift, and go to state 5
    "enum"       shift, and go to state 6
    "float"      shift, and go to state 7
    "func"       shift, and go to state 8
    "import"     shift, and go to state 9
    "int"        shift, and go to state 10
    "let"        shift, and go to state 11
    "long"       shift, and go to state 12
    "module"     shift, and go to state 13
    "operator"   shift, and go to state 14
    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17
    "ref"        shift, and go to state 18
    "rref"       shift, and go to state 19
    "short"      shift, and go to state 20
    "type"       shift, and go to state 21
    "namespace"  shift, and go to state 22

    "define"  reduce using rule 174 (access_modifier0)
    $default  reduce using rule 2 (start)

    start                           go to state 23
    type                            go to state 24
    type_root                       go to state 25
    non_reference_type              go to state 26
    type_core                       go to state 27
    reference_type                  go to state 28
    variable_declaration_statement  go to state 29
    variable_declaration            go to state 30
    access_modifier0                go to state 31
    access_modifier                 go to state 32
    function                        go to state 33
    function_header                 go to state 34
    operator_overload               go to state 35
    operator_overload_header        go to state 36
    callable                        go to state 37
    enum                            go to state 38
    class                           go to state 39
    class_header                    go to state 40
    template_header                 go to state 41
    template_declaration_list       go to state 42
    template_declaration_type       go to state 43
    module                          go to state 44
    import                          go to state 45
    type_definition                 go to state 46
    namespace                       go to state 47
    program_units                   go to state 48
    program_unit                    go to state 49


State 1

   11 type_core: TYPENAME • type_template_paramaters
   12          | TYPENAME •  [IDENTIFIER, "as", "in", "is", "operator", "weak", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", POINTER_TYPE, ARRAYL, T_END]
   20 type_template_paramaters: • T_BEGIN type_list T_END

    T_BEGIN  shift, and go to state 50

    $default  reduce using rule 12 (type_core)

    type_template_paramaters  go to state 51


State 2

   13 type_core: "bit" •

    $default  reduce using rule 13 (type_core)


State 3

   14 type_core: "bool" •

    $default  reduce using rule 14 (type_core)


State 4

   19 type_core: "char" •

    $default  reduce using rule 19 (type_core)


State 5

    3 type: "const" • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type_root           go to state 52
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 6

  247 enum: "enum" • "{" enum_members_list "}"

    "{"  shift, and go to state 53


State 7

   18 type_core: "float" •

    $default  reduce using rule 18 (type_core)


State 8

  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  181 function_header: "func" • access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER   shift, and go to state 54
    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17

    access_modifier  go to state 55


State 9

  302 module_name: • IDENTIFIER
  303            | • module_name "." IDENTIFIER
  304            | • module_name "-" IDENTIFIER
  305 import: "import" • module_name ";"
  306       | "import" • ":" IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 56
    ":"         shift, and go to state 57

    module_name  go to state 58


State 10

   16 type_core: "int" •

    $default  reduce using rule 16 (type_core)


State 11

  168 variable_declaration: "let" • access_modifier0 variable_declaration_block_list
  173 access_modifier0: • access_modifier
  174                 | • %empty  ["let"]
  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"

    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17

    $default  reduce using rule 174 (access_modifier0)

    access_modifier0  go to state 59
    access_modifier   go to state 32


State 12

   17 type_core: "long" •

    $default  reduce using rule 17 (type_core)


State 13

  300 module: "module" • module_name ";"
  301       | "module" • module_name ":" IDENTIFIER ";"
  302 module_name: • IDENTIFIER
  303            | • module_name "." IDENTIFIER
  304            | • module_name "-" IDENTIFIER

    IDENTIFIER  shift, and go to state 56

    module_name  go to state 60


State 14

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  208 operator_overload_header: "operator" • operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  209 operator: • "+"
  210         | • "-"
  211         | • "*"
  212         | • "/"
  213         | • "//"
  214         | • "^^"
  215         | • "%"
  216         | • "+="
  217         | • "-="
  218         | • "*="
  219         | • "/="
  220         | • "//="
  221         | • "^^="
  222         | • "%="
  223         | • ">"
  224         | • ">="
  225         | • "<"
  226         | • "<="
  227         | • "<=>"
  228         | • "=="
  229         | • "!="
  230         | • "^"
  231         | • "&"
  232         | • "~"
  233         | • "<<"
  234         | • ">>"
  235         | • "="
  236         | • "++"
  237         | • "--"
  238         | • "[" "]"
  239         | • "(" ")"
  240         | • "->"
  241         | • "new"
  242         | • type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "new"     shift, and go to state 61
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "["       shift, and go to state 62
    "<"       shift, and go to state 63
    ">"       shift, and go to state 64
    "+"       shift, and go to state 65
    "-"       shift, and go to state 66
    "/"       shift, and go to state 67
    "//"      shift, and go to state 68
    "*"       shift, and go to state 69
    "^^"      shift, and go to state 70
    "%"       shift, and go to state 71
    "+="      shift, and go to state 72
    "-="      shift, and go to state 73
    "*="      shift, and go to state 74
    "/="      shift, and go to state 75
    "//="     shift, and go to state 76
    "^^="     shift, and go to state 77
    "%="      shift, and go to state 78
    "<="      shift, and go to state 79
    ">="      shift, and go to state 80
    "=="      shift, and go to state 81
    "!="      shift, and go to state 82
    "<=>"     shift, and go to state 83
    "&"       shift, and go to state 84
    "^"       shift, and go to state 85
    "~"       shift, and go to state 86
    ">>"      shift, and go to state 87
    "<<"      shift, and go to state 88
    "="       shift, and go to state 89
    "++"      shift, and go to state 90
    "--"      shift, and go to state 91
    "("       shift, and go to state 92
    "->"      shift, and go to state 93

    type                go to state 94
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    operator            go to state 95


State 15

  176 access_modifier: "private" •

    $default  reduce using rule 176 (access_modifier)


State 16

  177 access_modifier: "protected" •

    $default  reduce using rule 177 (access_modifier)


State 17

  175 access_modifier: "public" •

    $default  reduce using rule 175 (access_modifier)


State 18

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: "ref" • non_reference_type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "short"   shift, and go to state 20

    non_reference_type  go to state 96
    type_core           go to state 27


State 19

    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   24 reference_type: "rref" • non_reference_type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "short"   shift, and go to state 20

    non_reference_type  go to state 97
    type_core           go to state 27


State 20

   15 type_core: "short" •

    $default  reduce using rule 15 (type_core)


State 21

  297 template_declaration_type: "type" • IDENTIFIER

    IDENTIFIER  shift, and go to state 98


State 22

  302 module_name: • IDENTIFIER
  303            | • module_name "." IDENTIFIER
  304            | • module_name "-" IDENTIFIER
  308 namespace: "namespace" • module_name "{" namespace_units "}"
  309          | "namespace" • module_name "{" "}"

    IDENTIFIER  shift, and go to state 56

    module_name  go to state 99


State 23

    0 $accept: start • $end

    $end  shift, and go to state 100


State 24

  298 template_declaration_type: type • IDENTIFIER
  299                          | type •  ["operator", ",", "=>"]

    IDENTIFIER  shift, and go to state 101

    $default  reduce using rule 299 (template_declaration_type)


State 25

    4 type: type_root •

    $default  reduce using rule 4 (type)


State 26

    5 type_root: non_reference_type •

    $default  reduce using rule 5 (type_root)


State 27

    7 non_reference_type: type_core •  [IDENTIFIER, "as", "in", "is", "operator", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "(", ")", ":", "{", "=>", ";", "...", T_END]
    8                   | type_core • POINTER_TYPE
    9                   | type_core • "weak" POINTER_TYPE
   10                   | type_core • ARRAYL xvalue_expression ARRAYR

    "weak"        shift, and go to state 102
    POINTER_TYPE  shift, and go to state 103
    ARRAYL        shift, and go to state 104

    $default  reduce using rule 7 (non_reference_type)


State 28

    6 type_root: reference_type •

    $default  reduce using rule 6 (type_root)


State 29

  323 program_unit: variable_declaration_statement •

    $default  reduce using rule 323 (program_unit)


State 30

  167 variable_declaration_statement: variable_declaration • ";"

    ";"  shift, and go to state 105


State 31

  307 type_definition: access_modifier0 • "define" type "as" IDENTIFIER ";"

    "define"  shift, and go to state 106


State 32

  173 access_modifier0: access_modifier •

    $default  reduce using rule 173 (access_modifier0)


State 33

  245 callable: function •

    $default  reduce using rule 245 (callable)


State 34

  114 block_statement: • "{" statements0 "}"
  180 function: function_header • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 108


State 35

  246 callable: operator_overload •

    $default  reduce using rule 246 (callable)


State 36

  114 block_statement: • "{" statements0 "}"
  205 operator_overload: operator_overload_header • block_statement
  206                  | operator_overload_header • "=" function_options ";"

    "="  shift, and go to state 109
    "{"  shift, and go to state 107

    block_statement  go to state 110


State 37

  322 program_unit: callable •

    $default  reduce using rule 322 (program_unit)


State 38

  325 program_unit: enum •

    $default  reduce using rule 325 (program_unit)


State 39

  324 program_unit: class •

    $default  reduce using rule 324 (program_unit)


State 40

  252 class: class_header • "{" class_statements "}"
  253      | class_header • "{" "}"

    "{"  shift, and go to state 111


State 41

  179 function: template_header • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  254 class_header: template_header • "class" IDENTIFIER
  255             | template_header • "class" IDENTIFIER inheritance

    "class"  shift, and go to state 112
    "func"   shift, and go to state 8

    function_header  go to state 113


State 42

  294 template_header: template_declaration_list • "=>"
  296 template_declaration_list: template_declaration_list • "," template_declaration_type

    ","   shift, and go to state 114
    "=>"  shift, and go to state 115


State 43

  207 operator_overload_header: template_declaration_type • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  295 template_declaration_list: template_declaration_type •  [",", "=>"]

    "operator"  shift, and go to state 116

    $default  reduce using rule 295 (template_declaration_list)


State 44

  319 program_unit: module •

    $default  reduce using rule 319 (program_unit)


State 45

  320 program_unit: import •

    $default  reduce using rule 320 (program_unit)


State 46

  321 program_unit: type_definition •

    $default  reduce using rule 321 (program_unit)


State 47

  326 program_unit: namespace •

    $default  reduce using rule 326 (program_unit)


State 48

    1 start: program_units •  [$end]
    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  173 access_modifier0: • access_modifier
  174                 | • %empty  ["define"]
  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  205 operator_overload: • operator_overload_header block_statement
  206                  | • operator_overload_header "=" function_options ";"
  207 operator_overload_header: • template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  245 callable: • function
  246         | • operator_overload
  247 enum: • "enum" "{" enum_members_list "}"
  252 class: • class_header "{" class_statements "}"
  253      | • class_header "{" "}"
  254 class_header: • template_header "class" IDENTIFIER
  255             | • template_header "class" IDENTIFIER inheritance
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type
  300 module: • "module" module_name ";"
  301       | • "module" module_name ":" IDENTIFIER ";"
  305 import: • "import" module_name ";"
  306       | • "import" ":" IDENTIFIER ";"
  307 type_definition: • access_modifier0 "define" type "as" IDENTIFIER ";"
  308 namespace: • "namespace" module_name "{" namespace_units "}"
  309          | • "namespace" module_name "{" "}"
  318 program_units: program_units • program_unit
  319 program_unit: • module
  320             | • import
  321             | • type_definition
  322             | • callable
  323             | • variable_declaration_statement
  324             | • class
  325             | • enum
  326             | • namespace

    TYPENAME     shift, and go to state 1
    "bit"        shift, and go to state 2
    "bool"       shift, and go to state 3
    "char"       shift, and go to state 4
    "const"      shift, and go to state 5
    "enum"       shift, and go to state 6
    "float"      shift, and go to state 7
    "func"       shift, and go to state 8
    "import"     shift, and go to state 9
    "int"        shift, and go to state 10
    "let"        shift, and go to state 11
    "long"       shift, and go to state 12
    "module"     shift, and go to state 13
    "operator"   shift, and go to state 14
    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17
    "ref"        shift, and go to state 18
    "rref"       shift, and go to state 19
    "short"      shift, and go to state 20
    "type"       shift, and go to state 21
    "namespace"  shift, and go to state 22

    "define"  reduce using rule 174 (access_modifier0)
    $default  reduce using rule 1 (start)

    type                            go to state 24
    type_root                       go to state 25
    non_reference_type              go to state 26
    type_core                       go to state 27
    reference_type                  go to state 28
    variable_declaration_statement  go to state 29
    variable_declaration            go to state 30
    access_modifier0                go to state 31
    access_modifier                 go to state 32
    function                        go to state 33
    function_header                 go to state 34
    operator_overload               go to state 35
    operator_overload_header        go to state 36
    callable                        go to state 37
    enum                            go to state 38
    class                           go to state 39
    class_header                    go to state 40
    template_header                 go to state 41
    template_declaration_list       go to state 42
    template_declaration_type       go to state 43
    module                          go to state 44
    import                          go to state 45
    type_definition                 go to state 46
    namespace                       go to state 47
    program_unit                    go to state 117


State 49

  317 program_units: program_unit •

    $default  reduce using rule 317 (program_units)


State 50

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   20 type_template_paramaters: T_BEGIN • type_list T_END
   21 type_list: • type
   22          | • type_list "," type
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 118
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    type_list           go to state 119
    reference_type      go to state 28


State 51

   11 type_core: TYPENAME type_template_paramaters •

    $default  reduce using rule 11 (type_core)


State 52

    3 type: "const" type_root •

    $default  reduce using rule 3 (type)


State 53

  247 enum: "enum" "{" • enum_members_list "}"
  248 enum_members_list: • enum_member
  249                  | • enum_members_list "," enum_member
  250 enum_member: • IDENTIFIER
  251            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 120

    enum_members_list  go to state 121
    enum_member        go to state 122


State 54

  182 function_header: "func" IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 123


State 55

  181 function_header: "func" access_modifier • function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  183 function_modifiers: • "virtual"
  184                   | • "compeval"
  185                   | • "static"
  186                   | • "static" "compeval"
  187                   | • "virtual const"
  188                   | • "compeval const"
  189                   | • %empty  [IDENTIFIER]

    "compeval"        shift, and go to state 124
    "static"          shift, and go to state 125
    "virtual"         shift, and go to state 126
    "virtual const"   shift, and go to state 127
    "compeval const"  shift, and go to state 128

    $default  reduce using rule 189 (function_modifiers)

    function_modifiers  go to state 129


State 56

  302 module_name: IDENTIFIER •

    $default  reduce using rule 302 (module_name)


State 57

  306 import: "import" ":" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 130


State 58

  303 module_name: module_name • "." IDENTIFIER
  304            | module_name • "-" IDENTIFIER
  305 import: "import" module_name • ";"

    "-"  shift, and go to state 131
    "."  shift, and go to state 132
    ";"  shift, and go to state 133


State 59

  168 variable_declaration: "let" access_modifier0 • variable_declaration_block_list
  169 variable_declaration_block_list: • variable_declaration_block
  170                                | • variable_declaration_block_list "," variable_declaration_block
  171 variable_declaration_block: • "let" type IDENTIFIER
  172                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 134

    variable_declaration_block_list  go to state 135
    variable_declaration_block       go to state 136


State 60

  300 module: "module" module_name • ";"
  301       | "module" module_name • ":" IDENTIFIER ";"
  303 module_name: module_name • "." IDENTIFIER
  304            | module_name • "-" IDENTIFIER

    "-"  shift, and go to state 131
    ":"  shift, and go to state 137
    "."  shift, and go to state 132
    ";"  shift, and go to state 138


State 61

  241 operator: "new" •

    $default  reduce using rule 241 (operator)


State 62

  238 operator: "[" • "]"

    "]"  shift, and go to state 139


State 63

  225 operator: "<" •

    $default  reduce using rule 225 (operator)


State 64

  223 operator: ">" •

    $default  reduce using rule 223 (operator)


State 65

  209 operator: "+" •

    $default  reduce using rule 209 (operator)


State 66

  210 operator: "-" •

    $default  reduce using rule 210 (operator)


State 67

  212 operator: "/" •

    $default  reduce using rule 212 (operator)


State 68

  213 operator: "//" •

    $default  reduce using rule 213 (operator)


State 69

  211 operator: "*" •

    $default  reduce using rule 211 (operator)


State 70

  214 operator: "^^" •

    $default  reduce using rule 214 (operator)


State 71

  215 operator: "%" •

    $default  reduce using rule 215 (operator)


State 72

  216 operator: "+=" •

    $default  reduce using rule 216 (operator)


State 73

  217 operator: "-=" •

    $default  reduce using rule 217 (operator)


State 74

  218 operator: "*=" •

    $default  reduce using rule 218 (operator)


State 75

  219 operator: "/=" •

    $default  reduce using rule 219 (operator)


State 76

  220 operator: "//=" •

    $default  reduce using rule 220 (operator)


State 77

  221 operator: "^^=" •

    $default  reduce using rule 221 (operator)


State 78

  222 operator: "%=" •

    $default  reduce using rule 222 (operator)


State 79

  226 operator: "<=" •

    $default  reduce using rule 226 (operator)


State 80

  224 operator: ">=" •

    $default  reduce using rule 224 (operator)


State 81

  228 operator: "==" •

    $default  reduce using rule 228 (operator)


State 82

  229 operator: "!=" •

    $default  reduce using rule 229 (operator)


State 83

  227 operator: "<=>" •

    $default  reduce using rule 227 (operator)


State 84

  231 operator: "&" •

    $default  reduce using rule 231 (operator)


State 85

  230 operator: "^" •

    $default  reduce using rule 230 (operator)


State 86

  232 operator: "~" •

    $default  reduce using rule 232 (operator)


State 87

  234 operator: ">>" •

    $default  reduce using rule 234 (operator)


State 88

  233 operator: "<<" •

    $default  reduce using rule 233 (operator)


State 89

  235 operator: "=" •

    $default  reduce using rule 235 (operator)


State 90

  236 operator: "++" •

    $default  reduce using rule 236 (operator)


State 91

  237 operator: "--" •

    $default  reduce using rule 237 (operator)


State 92

  239 operator: "(" • ")"

    ")"  shift, and go to state 140


State 93

  240 operator: "->" •

    $default  reduce using rule 240 (operator)


State 94

  242 operator: type •

    $default  reduce using rule 242 (operator)


State 95

  208 operator_overload_header: "operator" operator • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 141


State 96

   23 reference_type: "ref" non_reference_type •

    $default  reduce using rule 23 (reference_type)


State 97

   24 reference_type: "rref" non_reference_type •

    $default  reduce using rule 24 (reference_type)


State 98

  297 template_declaration_type: "type" IDENTIFIER •

    $default  reduce using rule 297 (template_declaration_type)


State 99

  303 module_name: module_name • "." IDENTIFIER
  304            | module_name • "-" IDENTIFIER
  308 namespace: "namespace" module_name • "{" namespace_units "}"
  309          | "namespace" module_name • "{" "}"

    "-"  shift, and go to state 131
    "."  shift, and go to state 132
    "{"  shift, and go to state 142


State 100

    0 $accept: start $end •

    $default  accept


State 101

  298 template_declaration_type: type IDENTIFIER •

    $default  reduce using rule 298 (template_declaration_type)


State 102

    9 non_reference_type: type_core "weak" • POINTER_TYPE

    POINTER_TYPE  shift, and go to state 143


State 103

    8 non_reference_type: type_core POINTER_TYPE •

    $default  reduce using rule 8 (non_reference_type)


State 104

   10 non_reference_type: type_core ARRAYL • xvalue_expression ARRAYR
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    "this"      shift, and go to state 145
    "["         shift, and go to state 146
    "*"         shift, and go to state 147
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 150

    xvalue_expression  go to state 151
    function_call      go to state 152


State 105

  167 variable_declaration_statement: variable_declaration ";" •

    $default  reduce using rule 167 (variable_declaration_statement)


State 106

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  307 type_definition: access_modifier0 "define" • type "as" IDENTIFIER ";"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 153
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 107

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  105 statement: • block_statement
  106          | • loop_statement
  107          | • conditional_statement
  108          | • exception_statement
  109          | • clean_up_statement
  110          | • jump_statement
  111          | • expression_statement
  112          | • variable_declaration_statement
  113          | • no_op_statement
  114 block_statement: • "{" statements0 "}"
  114                | "{" • statements0 "}"
  115 statements0: • statements
  116            | • %empty  ["}"]
  117 statements: • statement
  118           | • statements statement
  119 loop_statement: • while_loop_statement
  120               | • do_loop_statement
  121               | • for_loop_statement
  122 while_loop_statement: • "while" "(" expression ")" block_statement
  123 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  124 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  127 conditional_statement: • if_statement_sequence
  128                      | • switch_statement
  129 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  130 if_statement: • "if" "(" expression ")" block_statement
  139 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  148 exception_statement: • try_block catch_blocks
  149 try_block: • "try" block_statement
  154 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  159 jump_statement: • "return" ";"
  160               | • "break" ";"
  161               | • "continue" ";"
  162               | • "rethrow" ";"
  163               | • "throw" expression ";"
  164               | • "yield" ";"
  165               | • "goto" IDENTIFIER ";"
  166 expression_statement: • expression ";"
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  178 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "break"     shift, and go to state 160
    "castas"    shift, and go to state 161
    "cleanup"   shift, and go to state 162
    "continue"  shift, and go to state 163
    "do"        shift, and go to state 164
    "for"       shift, and go to state 165
    "goto"      shift, and go to state 166
    "if"        shift, and go to state 167
    "let"       shift, and go to state 11
    "new"       shift, and go to state 168
    "rethrow"   shift, and go to state 169
    "return"    shift, and go to state 170
    "super"     shift, and go to state 171
    "switch"    shift, and go to state 172
    "this"      shift, and go to state 145
    "throw"     shift, and go to state 173
    "try"       shift, and go to state 174
    "typeof"    shift, and go to state 175
    "while"     shift, and go to state 176
    "yield"     shift, and go to state 177
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180
    "{"         shift, and go to state 107
    ";"         shift, and go to state 181

    $default  reduce using rule 116 (statements0)

    expression                      go to state 182
    assignment_arg_expression       go to state 183
    prvalue_expression              go to state 184
    rvalue_expression               go to state 185
    xvalue_expression               go to state 186
    literal                         go to state 187
    lambda_expression               go to state 188
    new_expression                  go to state 189
    function_call                   go to state 152
    statement                       go to state 190
    block_statement                 go to state 191
    statements0                     go to state 192
    statements                      go to state 193
    loop_statement                  go to state 194
    while_loop_statement            go to state 195
    do_loop_statement               go to state 196
    for_loop_statement              go to state 197
    conditional_statement           go to state 198
    if_statement_sequence           go to state 199
    if_statement                    go to state 200
    switch_statement                go to state 201
    exception_statement             go to state 202
    try_block                       go to state 203
    clean_up_statement              go to state 204
    jump_statement                  go to state 205
    expression_statement            go to state 206
    variable_declaration_statement  go to state 207
    variable_declaration            go to state 30
    no_op_statement                 go to state 208


State 108

  180 function: function_header block_statement •

    $default  reduce using rule 180 (function)


State 109

  206 operator_overload: operator_overload_header "=" • function_options ";"
  243 function_options: • "delete"
  244                 | • "default"

    "default"  shift, and go to state 209
    "delete"   shift, and go to state 210

    function_options  go to state 211


State 110

  205 operator_overload: operator_overload_header block_statement •

    $default  reduce using rule 205 (operator_overload)


State 111

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  205 operator_overload: • operator_overload_header block_statement
  206                  | • operator_overload_header "=" function_options ";"
  207 operator_overload_header: • template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  245 callable: • function
  246         | • operator_overload
  252 class: • class_header "{" class_statements "}"
  252      | class_header "{" • class_statements "}"
  253      | • class_header "{" "}"
  253      | class_header "{" • "}"
  254 class_header: • template_header "class" IDENTIFIER
  255             | • template_header "class" IDENTIFIER inheritance
  261 class_statements: • class_statement
  262                 | • class_statements class_statement
  263 class_statement: • variable_declaration_statement
  264                | • callable
  265                | • constructor
  266                | • destructor
  267                | • property
  268                | • class
  269 property: • template_header "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270         | • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  279 constructor: • constructor_header initializer_list block_statement
  280            | • constructor_header initializer_list ";"
  281            | • constructor_header block_statement
  282            | • constructor_header "=" function_options ";"
  283 constructor_header: • template_header "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  284                   | • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  291 destructor: • destructor_header block_statement
  292           | • destructor_header "=" function_options ";"
  293 destructor_header: • "~" IDENTIFIER "(" ")"
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type

    TYPENAME    shift, and go to state 1
    "bit"       shift, and go to state 2
    "bool"      shift, and go to state 3
    "char"      shift, and go to state 4
    "const"     shift, and go to state 5
    "ctor"      shift, and go to state 212
    "float"     shift, and go to state 7
    "func"      shift, and go to state 8
    "int"       shift, and go to state 10
    "let"       shift, and go to state 213
    "long"      shift, and go to state 12
    "operator"  shift, and go to state 14
    "ref"       shift, and go to state 18
    "rref"      shift, and go to state 19
    "short"     shift, and go to state 20
    "~"         shift, and go to state 214
    "}"         shift, and go to state 215
    "type"      shift, and go to state 21

    type                            go to state 24
    type_root                       go to state 25
    non_reference_type              go to state 26
    type_core                       go to state 27
    reference_type                  go to state 28
    variable_declaration_statement  go to state 216
    variable_declaration            go to state 30
    function                        go to state 33
    function_header                 go to state 34
    operator_overload               go to state 35
    operator_overload_header        go to state 36
    callable                        go to state 217
    class                           go to state 218
    class_header                    go to state 40
    class_statements                go to state 219
    class_statement                 go to state 220
    property                        go to state 221
    constructor                     go to state 222
    constructor_header              go to state 223
    destructor                      go to state 224
    destructor_header               go to state 225
    template_header                 go to state 226
    template_declaration_list       go to state 42
    template_declaration_type       go to state 43


State 112

  254 class_header: template_header "class" • IDENTIFIER
  255             | template_header "class" • IDENTIFIER inheritance

    IDENTIFIER  shift, and go to state 227


State 113

  114 block_statement: • "{" statements0 "}"
  179 function: template_header function_header • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 228


State 114

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  296 template_declaration_list: template_declaration_list "," • template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "type"    shift, and go to state 21

    type                       go to state 24
    type_root                  go to state 25
    non_reference_type         go to state 26
    type_core                  go to state 27
    reference_type             go to state 28
    template_declaration_type  go to state 229


State 115

  294 template_header: template_declaration_list "=>" •

    $default  reduce using rule 294 (template_header)


State 116

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  207 operator_overload_header: template_declaration_type "operator" • operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  209 operator: • "+"
  210         | • "-"
  211         | • "*"
  212         | • "/"
  213         | • "//"
  214         | • "^^"
  215         | • "%"
  216         | • "+="
  217         | • "-="
  218         | • "*="
  219         | • "/="
  220         | • "//="
  221         | • "^^="
  222         | • "%="
  223         | • ">"
  224         | • ">="
  225         | • "<"
  226         | • "<="
  227         | • "<=>"
  228         | • "=="
  229         | • "!="
  230         | • "^"
  231         | • "&"
  232         | • "~"
  233         | • "<<"
  234         | • ">>"
  235         | • "="
  236         | • "++"
  237         | • "--"
  238         | • "[" "]"
  239         | • "(" ")"
  240         | • "->"
  241         | • "new"
  242         | • type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "new"     shift, and go to state 61
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "["       shift, and go to state 62
    "<"       shift, and go to state 63
    ">"       shift, and go to state 64
    "+"       shift, and go to state 65
    "-"       shift, and go to state 66
    "/"       shift, and go to state 67
    "//"      shift, and go to state 68
    "*"       shift, and go to state 69
    "^^"      shift, and go to state 70
    "%"       shift, and go to state 71
    "+="      shift, and go to state 72
    "-="      shift, and go to state 73
    "*="      shift, and go to state 74
    "/="      shift, and go to state 75
    "//="     shift, and go to state 76
    "^^="     shift, and go to state 77
    "%="      shift, and go to state 78
    "<="      shift, and go to state 79
    ">="      shift, and go to state 80
    "=="      shift, and go to state 81
    "!="      shift, and go to state 82
    "<=>"     shift, and go to state 83
    "&"       shift, and go to state 84
    "^"       shift, and go to state 85
    "~"       shift, and go to state 86
    ">>"      shift, and go to state 87
    "<<"      shift, and go to state 88
    "="       shift, and go to state 89
    "++"      shift, and go to state 90
    "--"      shift, and go to state 91
    "("       shift, and go to state 92
    "->"      shift, and go to state 93

    type                go to state 94
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    operator            go to state 230


State 117

  318 program_units: program_units program_unit •

    $default  reduce using rule 318 (program_units)


State 118

   21 type_list: type •

    $default  reduce using rule 21 (type_list)


State 119

   20 type_template_paramaters: T_BEGIN type_list • T_END
   22 type_list: type_list • "," type

    ","    shift, and go to state 231
    T_END  shift, and go to state 232


State 120

  250 enum_member: IDENTIFIER •  [",", "}"]
  251            | IDENTIFIER • "=" INT

    "="  shift, and go to state 233

    $default  reduce using rule 250 (enum_member)


State 121

  247 enum: "enum" "{" enum_members_list • "}"
  249 enum_members_list: enum_members_list • "," enum_member

    ","  shift, and go to state 234
    "}"  shift, and go to state 235


State 122

  248 enum_members_list: enum_member •

    $default  reduce using rule 248 (enum_members_list)


State 123

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  182 function_header: "func" IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 237
    function_argument       go to state 238


State 124

  184 function_modifiers: "compeval" •

    $default  reduce using rule 184 (function_modifiers)


State 125

  185 function_modifiers: "static" •  [IDENTIFIER]
  186                   | "static" • "compeval"

    "compeval"  shift, and go to state 239

    $default  reduce using rule 185 (function_modifiers)


State 126

  183 function_modifiers: "virtual" •

    $default  reduce using rule 183 (function_modifiers)


State 127

  187 function_modifiers: "virtual const" •

    $default  reduce using rule 187 (function_modifiers)


State 128

  188 function_modifiers: "compeval const" •

    $default  reduce using rule 188 (function_modifiers)


State 129

  181 function_header: "func" access_modifier function_modifiers • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER  shift, and go to state 240


State 130

  306 import: "import" ":" IDENTIFIER • ";"

    ";"  shift, and go to state 241


State 131

  304 module_name: module_name "-" • IDENTIFIER

    IDENTIFIER  shift, and go to state 242


State 132

  303 module_name: module_name "." • IDENTIFIER

    IDENTIFIER  shift, and go to state 243


State 133

  305 import: "import" module_name ";" •

    $default  reduce using rule 305 (import)


State 134

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  171 variable_declaration_block: "let" • type IDENTIFIER
  172                           | "let" • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 244
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 135

  168 variable_declaration: "let" access_modifier0 variable_declaration_block_list •  ["in", ")", ";"]
  170 variable_declaration_block_list: variable_declaration_block_list • "," variable_declaration_block

    ","  shift, and go to state 245

    $default  reduce using rule 168 (variable_declaration)


State 136

  169 variable_declaration_block_list: variable_declaration_block •

    $default  reduce using rule 169 (variable_declaration_block_list)


State 137

  301 module: "module" module_name ":" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 246


State 138

  300 module: "module" module_name ";" •

    $default  reduce using rule 300 (module)


State 139

  238 operator: "[" "]" •

    $default  reduce using rule 238 (operator)


State 140

  239 operator: "(" ")" •

    $default  reduce using rule 239 (operator)


State 141

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression
  208 operator_overload_header: "operator" operator "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 247
    function_argument       go to state 238


State 142

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  173 access_modifier0: • access_modifier
  174                 | • %empty  ["define"]
  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  205 operator_overload: • operator_overload_header block_statement
  206                  | • operator_overload_header "=" function_options ";"
  207 operator_overload_header: • template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  245 callable: • function
  246         | • operator_overload
  247 enum: • "enum" "{" enum_members_list "}"
  252 class: • class_header "{" class_statements "}"
  253      | • class_header "{" "}"
  254 class_header: • template_header "class" IDENTIFIER
  255             | • template_header "class" IDENTIFIER inheritance
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type
  307 type_definition: • access_modifier0 "define" type "as" IDENTIFIER ";"
  308 namespace: "namespace" module_name "{" • namespace_units "}"
  309          | "namespace" module_name "{" • "}"
  310 namespace_units: • namespace_unit
  311                | • namespace_units namespace_unit
  312 namespace_unit: • class
  313               | • enum
  314               | • callable
  315               | • type_definition
  316               | • variable_declaration_statement

    TYPENAME     shift, and go to state 1
    "bit"        shift, and go to state 2
    "bool"       shift, and go to state 3
    "char"       shift, and go to state 4
    "const"      shift, and go to state 5
    "enum"       shift, and go to state 6
    "float"      shift, and go to state 7
    "func"       shift, and go to state 8
    "int"        shift, and go to state 10
    "let"        shift, and go to state 11
    "long"       shift, and go to state 12
    "operator"   shift, and go to state 14
    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17
    "ref"        shift, and go to state 18
    "rref"       shift, and go to state 19
    "short"      shift, and go to state 20
    "}"          shift, and go to state 248
    "type"       shift, and go to state 21

    $default  reduce using rule 174 (access_modifier0)

    type                            go to state 24
    type_root                       go to state 25
    non_reference_type              go to state 26
    type_core                       go to state 27
    reference_type                  go to state 28
    variable_declaration_statement  go to state 249
    variable_declaration            go to state 30
    access_modifier0                go to state 31
    access_modifier                 go to state 32
    function                        go to state 33
    function_header                 go to state 34
    operator_overload               go to state 35
    operator_overload_header        go to state 36
    callable                        go to state 250
    enum                            go to state 251
    class                           go to state 252
    class_header                    go to state 40
    template_header                 go to state 41
    template_declaration_list       go to state 42
    template_declaration_type       go to state 43
    type_definition                 go to state 253
    namespace_units                 go to state 254
    namespace_unit                  go to state 255


State 143

    9 non_reference_type: type_core "weak" POINTER_TYPE •

    $default  reduce using rule 9 (non_reference_type)


State 144

   75 xvalue_expression: IDENTIFIER •

    $default  reduce using rule 75 (xvalue_expression)


State 145

   76 xvalue_expression: "this" •

    $default  reduce using rule 76 (xvalue_expression)


State 146

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [":"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   85                  | "[" • array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
   96 array_index_list: • array_index
   97                 | • array_index_list "," array_index
   98 array_index: • expression
   99            | • expression0 ":" expression0
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    $default  reduce using rule 28 (expression0)

    expression                 go to state 256
    expression0                go to state 257
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    array_index_list           go to state 258
    array_index                go to state 259
    function_call              go to state 152


State 147

   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   81                  | "*" • xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    "this"      shift, and go to state 145
    "["         shift, and go to state 146
    "*"         shift, and go to state 147
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 150

    xvalue_expression  go to state 260
    function_call      go to state 152


State 148

   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   77                  | "++" • xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    "this"      shift, and go to state 145
    "["         shift, and go to state 146
    "*"         shift, and go to state 147
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 150

    xvalue_expression  go to state 261
    function_call      go to state 152


State 149

   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   78                  | "--" • xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    "this"      shift, and go to state 145
    "["         shift, and go to state 146
    "*"         shift, and go to state 147
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 150

    xvalue_expression  go to state 262
    function_call      go to state 152


State 150

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   84                  | "(" • rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 264
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 151

   10 non_reference_type: type_core ARRAYL xvalue_expression • ARRAYR
   79 xvalue_expression: xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    "++"    shift, and go to state 266
    "--"    shift, and go to state 267
    "("     shift, and go to state 268
    "."     shift, and go to state 269
    "->"    shift, and go to state 270
    ARRAYR  shift, and go to state 271


State 152

   86 xvalue_expression: function_call •

    $default  reduce using rule 86 (xvalue_expression)


State 153

  307 type_definition: access_modifier0 "define" type • "as" IDENTIFIER ";"

    "as"  shift, and go to state 272


State 154

   88 literal: NPTR •

    $default  reduce using rule 88 (literal)


State 155

   87 literal: BOOL •

    $default  reduce using rule 87 (literal)


State 156

   89 literal: INT •

    $default  reduce using rule 89 (literal)


State 157

   90 literal: FLOAT •

    $default  reduce using rule 90 (literal)


State 158

   92 literal: CHAR •

    $default  reduce using rule 92 (literal)


State 159

   91 literal: STRING •

    $default  reduce using rule 91 (literal)


State 160

  160 jump_statement: "break" • ";"

    ";"  shift, and go to state 273


State 161

   69 prvalue_expression: "castas" • "<" type ">" "(" rvalue_expression ")"

    "<"  shift, and go to state 274


State 162

  154 clean_up_statement: "cleanup" • "(" IDENTIFIER "," clean_up_arg ")" ";"

    "("  shift, and go to state 275


State 163

  161 jump_statement: "continue" • ";"

    ";"  shift, and go to state 276


State 164

  114 block_statement: • "{" statements0 "}"
  123 do_loop_statement: "do" • block_statement "while" "(" expression ")"

    "{"  shift, and go to state 107

    block_statement  go to state 277


State 165

  124 for_loop_statement: "for" • "(" for_loop_condition ")" block_statement

    "("  shift, and go to state 278


State 166

  165 jump_statement: "goto" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 279


State 167

  130 if_statement: "if" • "(" expression ")" block_statement

    "("  shift, and go to state 280


State 168

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   94 new_expression: "new" • type "(" function_call_list ")"
   95               | "new" • "heap" type "(" function_call_list ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "heap"    shift, and go to state 281
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 282
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 169

  162 jump_statement: "rethrow" • ";"

    ";"  shift, and go to state 283


State 170

  159 jump_statement: "return" • ";"

    ";"  shift, and go to state 284


State 171

   32 prvalue_expression: "super" •

    $default  reduce using rule 32 (prvalue_expression)


State 172

  139 switch_statement: "switch" • "(" expression ")" case_blocks0 default_block0

    "("  shift, and go to state 285


State 173

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  163 jump_statement: "throw" • expression ";"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 286
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 174

  114 block_statement: • "{" statements0 "}"
  149 try_block: "try" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 287


State 175

   68 prvalue_expression: "typeof" • "(" rvalue_expression ")"

    "("  shift, and go to state 288


State 176

  122 while_loop_statement: "while" • "(" expression ")" block_statement

    "("  shift, and go to state 289


State 177

  164 jump_statement: "yield" • ";"

    ";"  shift, and go to state 290


State 178

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   67                   | "-" • rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 291
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 179

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   66                   | "!" • rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 292
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 180

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   70                   | "(" • rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   84                  | "(" • rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   93                  | "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 144
    TYPENAME    shift, and go to state 1
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "bit"       shift, and go to state 2
    "bool"      shift, and go to state 3
    "castas"    shift, and go to state 161
    "char"      shift, and go to state 4
    "const"     shift, and go to state 5
    "float"     shift, and go to state 7
    "int"       shift, and go to state 10
    "long"      shift, and go to state 12
    "new"       shift, and go to state 168
    "ref"       shift, and go to state 18
    "rref"      shift, and go to state 19
    "short"     shift, and go to state 20
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    prvalue_expression      go to state 263
    rvalue_expression       go to state 293
    xvalue_expression       go to state 265
    literal                 go to state 187
    lambda_expression       go to state 188
    new_expression          go to state 189
    function_call           go to state 152
    function_argument_list  go to state 294
    function_argument       go to state 238


State 181

  178 no_op_statement: ";" •

    $default  reduce using rule 178 (no_op_statement)


State 182

  166 expression_statement: expression • ";"

    ";"  shift, and go to state 295


State 183

   25 expression: assignment_arg_expression •

    $default  reduce using rule 25 (expression)


State 184

   30 assignment_arg_expression: prvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   73 rvalue_expression: prvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]

    "in"      reduce using rule 30 (assignment_arg_expression)
    "]"       reduce using rule 30 (assignment_arg_expression)
    ","       reduce using rule 30 (assignment_arg_expression)
    ")"       reduce using rule 30 (assignment_arg_expression)
    ":"       reduce using rule 30 (assignment_arg_expression)
    ";"       reduce using rule 30 (assignment_arg_expression)
    $default  reduce using rule 73 (rvalue_expression)


State 185

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316


State 186

   26 expression: xvalue_expression • "=" rvalue_expression
   29 assignment_arg_expression: xvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   39 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   40                   | xvalue_expression • "-=" rvalue_expression
   41                   | xvalue_expression • "*=" rvalue_expression
   42                   | xvalue_expression • "/=" rvalue_expression
   43                   | xvalue_expression • "//=" rvalue_expression
   44                   | xvalue_expression • "^^=" rvalue_expression
   59                   | xvalue_expression • "&=" rvalue_expression
   60                   | xvalue_expression • "^=" rvalue_expression
   61                   | xvalue_expression • "|=" rvalue_expression
   62                   | xvalue_expression • "~=" rvalue_expression
   63                   | xvalue_expression • ">>=" rvalue_expression
   64                   | xvalue_expression • "<<=" rvalue_expression
   74 rvalue_expression: xvalue_expression •  ["is", ">", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<"]
   79 xvalue_expression: xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 317
    "-="   shift, and go to state 318
    "*="   shift, and go to state 319
    "/="   shift, and go to state 320
    "//="  shift, and go to state 321
    "^^="  shift, and go to state 322
    "="    shift, and go to state 323
    "++"   shift, and go to state 266
    "--"   shift, and go to state 267
    "("    shift, and go to state 268
    "."    shift, and go to state 269
    "->"   shift, and go to state 270
    "&="   shift, and go to state 324
    "^="   shift, and go to state 325
    "|="   shift, and go to state 326
    "~="   shift, and go to state 327
    "<<="  shift, and go to state 328
    ">>="  shift, and go to state 329

    "in"      reduce using rule 29 (assignment_arg_expression)
    "]"       reduce using rule 29 (assignment_arg_expression)
    ","       reduce using rule 29 (assignment_arg_expression)
    ")"       reduce using rule 29 (assignment_arg_expression)
    ":"       reduce using rule 29 (assignment_arg_expression)
    ";"       reduce using rule 29 (assignment_arg_expression)
    $default  reduce using rule 74 (rvalue_expression)


State 187

   31 prvalue_expression: literal •

    $default  reduce using rule 31 (prvalue_expression)


State 188

   72 prvalue_expression: lambda_expression •

    $default  reduce using rule 72 (prvalue_expression)


State 189

   71 prvalue_expression: new_expression •

    $default  reduce using rule 71 (prvalue_expression)


State 190

  117 statements: statement •

    $default  reduce using rule 117 (statements)


State 191

  105 statement: block_statement •

    $default  reduce using rule 105 (statement)


State 192

  114 block_statement: "{" statements0 • "}"

    "}"  shift, and go to state 330


State 193

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  105 statement: • block_statement
  106          | • loop_statement
  107          | • conditional_statement
  108          | • exception_statement
  109          | • clean_up_statement
  110          | • jump_statement
  111          | • expression_statement
  112          | • variable_declaration_statement
  113          | • no_op_statement
  114 block_statement: • "{" statements0 "}"
  115 statements0: statements •  ["}"]
  118 statements: statements • statement
  119 loop_statement: • while_loop_statement
  120               | • do_loop_statement
  121               | • for_loop_statement
  122 while_loop_statement: • "while" "(" expression ")" block_statement
  123 do_loop_statement: • "do" block_statement "while" "(" expression ")"
  124 for_loop_statement: • "for" "(" for_loop_condition ")" block_statement
  127 conditional_statement: • if_statement_sequence
  128                      | • switch_statement
  129 if_statement_sequence: • if_statement else_if_statements0 else_statement0
  130 if_statement: • "if" "(" expression ")" block_statement
  139 switch_statement: • "switch" "(" expression ")" case_blocks0 default_block0
  148 exception_statement: • try_block catch_blocks
  149 try_block: • "try" block_statement
  154 clean_up_statement: • "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";"
  159 jump_statement: • "return" ";"
  160               | • "break" ";"
  161               | • "continue" ";"
  162               | • "rethrow" ";"
  163               | • "throw" expression ";"
  164               | • "yield" ";"
  165               | • "goto" IDENTIFIER ";"
  166 expression_statement: • expression ";"
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  178 no_op_statement: • ";"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "break"     shift, and go to state 160
    "castas"    shift, and go to state 161
    "cleanup"   shift, and go to state 162
    "continue"  shift, and go to state 163
    "do"        shift, and go to state 164
    "for"       shift, and go to state 165
    "goto"      shift, and go to state 166
    "if"        shift, and go to state 167
    "let"       shift, and go to state 11
    "new"       shift, and go to state 168
    "rethrow"   shift, and go to state 169
    "return"    shift, and go to state 170
    "super"     shift, and go to state 171
    "switch"    shift, and go to state 172
    "this"      shift, and go to state 145
    "throw"     shift, and go to state 173
    "try"       shift, and go to state 174
    "typeof"    shift, and go to state 175
    "while"     shift, and go to state 176
    "yield"     shift, and go to state 177
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180
    "{"         shift, and go to state 107
    ";"         shift, and go to state 181

    $default  reduce using rule 115 (statements0)

    expression                      go to state 182
    assignment_arg_expression       go to state 183
    prvalue_expression              go to state 184
    rvalue_expression               go to state 185
    xvalue_expression               go to state 186
    literal                         go to state 187
    lambda_expression               go to state 188
    new_expression                  go to state 189
    function_call                   go to state 152
    statement                       go to state 331
    block_statement                 go to state 191
    loop_statement                  go to state 194
    while_loop_statement            go to state 195
    do_loop_statement               go to state 196
    for_loop_statement              go to state 197
    conditional_statement           go to state 198
    if_statement_sequence           go to state 199
    if_statement                    go to state 200
    switch_statement                go to state 201
    exception_statement             go to state 202
    try_block                       go to state 203
    clean_up_statement              go to state 204
    jump_statement                  go to state 205
    expression_statement            go to state 206
    variable_declaration_statement  go to state 207
    variable_declaration            go to state 30
    no_op_statement                 go to state 208


State 194

  106 statement: loop_statement •

    $default  reduce using rule 106 (statement)


State 195

  119 loop_statement: while_loop_statement •

    $default  reduce using rule 119 (loop_statement)


State 196

  120 loop_statement: do_loop_statement •

    $default  reduce using rule 120 (loop_statement)


State 197

  121 loop_statement: for_loop_statement •

    $default  reduce using rule 121 (loop_statement)


State 198

  107 statement: conditional_statement •

    $default  reduce using rule 107 (statement)


State 199

  127 conditional_statement: if_statement_sequence •

    $default  reduce using rule 127 (conditional_statement)


State 200

  129 if_statement_sequence: if_statement • else_if_statements0 else_statement0
  131 else_if_statements0: • else_if_statements
  132                    | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  133 else_if_statements: • else_if_statement
  134                   | • else_if_statements else_if_statement
  135 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 332

    $default  reduce using rule 132 (else_if_statements0)

    else_if_statements0  go to state 333
    else_if_statements   go to state 334
    else_if_statement    go to state 335


State 201

  128 conditional_statement: switch_statement •

    $default  reduce using rule 128 (conditional_statement)


State 202

  108 statement: exception_statement •

    $default  reduce using rule 108 (statement)


State 203

  148 exception_statement: try_block • catch_blocks
  150 catch_blocks: • catch_block
  151             | • catch_blocks catch_block
  152 catch_block: • "catch" "(" variable_declaration ")" block_statement
  153            | • "catch-all" block_statement

    "catch"      shift, and go to state 336
    "catch-all"  shift, and go to state 337

    catch_blocks  go to state 338
    catch_block   go to state 339


State 204

  109 statement: clean_up_statement •

    $default  reduce using rule 109 (statement)


State 205

  110 statement: jump_statement •

    $default  reduce using rule 110 (statement)


State 206

  111 statement: expression_statement •

    $default  reduce using rule 111 (statement)


State 207

  112 statement: variable_declaration_statement •

    $default  reduce using rule 112 (statement)


State 208

  113 statement: no_op_statement •

    $default  reduce using rule 113 (statement)


State 209

  244 function_options: "default" •

    $default  reduce using rule 244 (function_options)


State 210

  243 function_options: "delete" •

    $default  reduce using rule 243 (function_options)


State 211

  206 operator_overload: operator_overload_header "=" function_options • ";"

    ";"  shift, and go to state 340


State 212

  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  284 constructor_header: "ctor" • access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17

    access_modifier  go to state 341


State 213

  168 variable_declaration: "let" • access_modifier0 variable_declaration_block_list
  173 access_modifier0: • access_modifier
  174                 | • %empty  ["let"]
  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  270 property: "let" • access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17

    $default  reduce using rule 174 (access_modifier0)

    access_modifier0  go to state 59
    access_modifier   go to state 342


State 214

  293 destructor_header: "~" • IDENTIFIER "(" ")"

    IDENTIFIER  shift, and go to state 343


State 215

  253 class: class_header "{" "}" •

    $default  reduce using rule 253 (class)


State 216

  263 class_statement: variable_declaration_statement •

    $default  reduce using rule 263 (class_statement)


State 217

  264 class_statement: callable •

    $default  reduce using rule 264 (class_statement)


State 218

  268 class_statement: class •

    $default  reduce using rule 268 (class_statement)


State 219

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  205 operator_overload: • operator_overload_header block_statement
  206                  | • operator_overload_header "=" function_options ";"
  207 operator_overload_header: • template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  245 callable: • function
  246         | • operator_overload
  252 class: • class_header "{" class_statements "}"
  252      | class_header "{" class_statements • "}"
  253      | • class_header "{" "}"
  254 class_header: • template_header "class" IDENTIFIER
  255             | • template_header "class" IDENTIFIER inheritance
  262 class_statements: class_statements • class_statement
  263 class_statement: • variable_declaration_statement
  264                | • callable
  265                | • constructor
  266                | • destructor
  267                | • property
  268                | • class
  269 property: • template_header "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  270         | • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  279 constructor: • constructor_header initializer_list block_statement
  280            | • constructor_header initializer_list ";"
  281            | • constructor_header block_statement
  282            | • constructor_header "=" function_options ";"
  283 constructor_header: • template_header "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  284                   | • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  291 destructor: • destructor_header block_statement
  292           | • destructor_header "=" function_options ";"
  293 destructor_header: • "~" IDENTIFIER "(" ")"
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type

    TYPENAME    shift, and go to state 1
    "bit"       shift, and go to state 2
    "bool"      shift, and go to state 3
    "char"      shift, and go to state 4
    "const"     shift, and go to state 5
    "ctor"      shift, and go to state 212
    "float"     shift, and go to state 7
    "func"      shift, and go to state 8
    "int"       shift, and go to state 10
    "let"       shift, and go to state 213
    "long"      shift, and go to state 12
    "operator"  shift, and go to state 14
    "ref"       shift, and go to state 18
    "rref"      shift, and go to state 19
    "short"     shift, and go to state 20
    "~"         shift, and go to state 214
    "}"         shift, and go to state 344
    "type"      shift, and go to state 21

    type                            go to state 24
    type_root                       go to state 25
    non_reference_type              go to state 26
    type_core                       go to state 27
    reference_type                  go to state 28
    variable_declaration_statement  go to state 216
    variable_declaration            go to state 30
    function                        go to state 33
    function_header                 go to state 34
    operator_overload               go to state 35
    operator_overload_header        go to state 36
    callable                        go to state 217
    class                           go to state 218
    class_header                    go to state 40
    class_statement                 go to state 345
    property                        go to state 221
    constructor                     go to state 222
    constructor_header              go to state 223
    destructor                      go to state 224
    destructor_header               go to state 225
    template_header                 go to state 226
    template_declaration_list       go to state 42
    template_declaration_type       go to state 43


State 220

  261 class_statements: class_statement •

    $default  reduce using rule 261 (class_statements)


State 221

  267 class_statement: property •

    $default  reduce using rule 267 (class_statement)


State 222

  265 class_statement: constructor •

    $default  reduce using rule 265 (class_statement)


State 223

  114 block_statement: • "{" statements0 "}"
  279 constructor: constructor_header • initializer_list block_statement
  280            | constructor_header • initializer_list ";"
  281            | constructor_header • block_statement
  282            | constructor_header • "=" function_options ";"
  285 initializer_list: • "=>" "initailize" "(" initializer_blocks_list ")"

    "="   shift, and go to state 346
    "{"   shift, and go to state 107
    "=>"  shift, and go to state 347

    block_statement   go to state 348
    initializer_list  go to state 349


State 224

  266 class_statement: destructor •

    $default  reduce using rule 266 (class_statement)


State 225

  114 block_statement: • "{" statements0 "}"
  291 destructor: destructor_header • block_statement
  292           | destructor_header • "=" function_options ";"

    "="  shift, and go to state 350
    "{"  shift, and go to state 107

    block_statement  go to state 351


State 226

  179 function: template_header • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  254 class_header: template_header • "class" IDENTIFIER
  255             | template_header • "class" IDENTIFIER inheritance
  269 property: template_header • "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"
  283 constructor_header: template_header • "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

    "class"  shift, and go to state 112
    "ctor"   shift, and go to state 352
    "func"   shift, and go to state 8
    "let"    shift, and go to state 353

    function_header  go to state 113


State 227

  254 class_header: template_header "class" IDENTIFIER •  ["{"]
  255             | template_header "class" IDENTIFIER • inheritance
  256 inheritance: • "inherits" class_names_list

    "inherits"  shift, and go to state 354

    $default  reduce using rule 254 (class_header)

    inheritance  go to state 355


State 228

  179 function: template_header function_header block_statement •

    $default  reduce using rule 179 (function)


State 229

  296 template_declaration_list: template_declaration_list "," template_declaration_type •

    $default  reduce using rule 296 (template_declaration_list)


State 230

  207 operator_overload_header: template_declaration_type "operator" operator • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 356


State 231

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   22 type_list: type_list "," • type
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 357
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 232

   20 type_template_paramaters: T_BEGIN type_list T_END •

    $default  reduce using rule 20 (type_template_paramaters)


State 233

  251 enum_member: IDENTIFIER "=" • INT

    INT  shift, and go to state 358


State 234

  249 enum_members_list: enum_members_list "," • enum_member
  250 enum_member: • IDENTIFIER
  251            | • IDENTIFIER "=" INT

    IDENTIFIER  shift, and go to state 120

    enum_member  go to state 359


State 235

  247 enum: "enum" "{" enum_members_list "}" •

    $default  reduce using rule 247 (enum)


State 236

  192 function_argument: type • IDENTIFIER
  193                  | type • "..."
  194                  | type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 360
    "..."       shift, and go to state 361


State 237

  182 function_header: "func" IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  191 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 362
    ")"  shift, and go to state 363


State 238

  190 function_argument_list: function_argument •

    $default  reduce using rule 190 (function_argument_list)


State 239

  186 function_modifiers: "static" "compeval" •

    $default  reduce using rule 186 (function_modifiers)


State 240

  181 function_header: "func" access_modifier function_modifiers IDENTIFIER • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 364


State 241

  306 import: "import" ":" IDENTIFIER ";" •

    $default  reduce using rule 306 (import)


State 242

  304 module_name: module_name "-" IDENTIFIER •

    $default  reduce using rule 304 (module_name)


State 243

  303 module_name: module_name "." IDENTIFIER •

    $default  reduce using rule 303 (module_name)


State 244

  171 variable_declaration_block: "let" type • IDENTIFIER
  172                           | "let" type • IDENTIFIER "=" expression

    IDENTIFIER  shift, and go to state 365


State 245

  170 variable_declaration_block_list: variable_declaration_block_list "," • variable_declaration_block
  171 variable_declaration_block: • "let" type IDENTIFIER
  172                           | • "let" type IDENTIFIER "=" expression

    "let"  shift, and go to state 134

    variable_declaration_block  go to state 366


State 246

  301 module: "module" module_name ":" IDENTIFIER • ";"

    ";"  shift, and go to state 367


State 247

  191 function_argument_list: function_argument_list • "," function_argument
  208 operator_overload_header: "operator" operator "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 362
    ")"  shift, and go to state 368


State 248

  309 namespace: "namespace" module_name "{" "}" •

    $default  reduce using rule 309 (namespace)


State 249

  316 namespace_unit: variable_declaration_statement •

    $default  reduce using rule 316 (namespace_unit)


State 250

  314 namespace_unit: callable •

    $default  reduce using rule 314 (namespace_unit)


State 251

  313 namespace_unit: enum •

    $default  reduce using rule 313 (namespace_unit)


State 252

  312 namespace_unit: class •

    $default  reduce using rule 312 (namespace_unit)


State 253

  315 namespace_unit: type_definition •

    $default  reduce using rule 315 (namespace_unit)


State 254

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  167 variable_declaration_statement: • variable_declaration ";"
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list
  173 access_modifier0: • access_modifier
  174                 | • %empty  ["define"]
  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  205 operator_overload: • operator_overload_header block_statement
  206                  | • operator_overload_header "=" function_options ";"
  207 operator_overload_header: • template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  208                         | • "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list
  245 callable: • function
  246         | • operator_overload
  247 enum: • "enum" "{" enum_members_list "}"
  252 class: • class_header "{" class_statements "}"
  253      | • class_header "{" "}"
  254 class_header: • template_header "class" IDENTIFIER
  255             | • template_header "class" IDENTIFIER inheritance
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type
  307 type_definition: • access_modifier0 "define" type "as" IDENTIFIER ";"
  308 namespace: "namespace" module_name "{" namespace_units • "}"
  311 namespace_units: namespace_units • namespace_unit
  312 namespace_unit: • class
  313               | • enum
  314               | • callable
  315               | • type_definition
  316               | • variable_declaration_statement

    TYPENAME     shift, and go to state 1
    "bit"        shift, and go to state 2
    "bool"       shift, and go to state 3
    "char"       shift, and go to state 4
    "const"      shift, and go to state 5
    "enum"       shift, and go to state 6
    "float"      shift, and go to state 7
    "func"       shift, and go to state 8
    "int"        shift, and go to state 10
    "let"        shift, and go to state 11
    "long"       shift, and go to state 12
    "operator"   shift, and go to state 14
    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17
    "ref"        shift, and go to state 18
    "rref"       shift, and go to state 19
    "short"      shift, and go to state 20
    "}"          shift, and go to state 369
    "type"       shift, and go to state 21

    $default  reduce using rule 174 (access_modifier0)

    type                            go to state 24
    type_root                       go to state 25
    non_reference_type              go to state 26
    type_core                       go to state 27
    reference_type                  go to state 28
    variable_declaration_statement  go to state 249
    variable_declaration            go to state 30
    access_modifier0                go to state 31
    access_modifier                 go to state 32
    function                        go to state 33
    function_header                 go to state 34
    operator_overload               go to state 35
    operator_overload_header        go to state 36
    callable                        go to state 250
    enum                            go to state 251
    class                           go to state 252
    class_header                    go to state 40
    template_header                 go to state 41
    template_declaration_list       go to state 42
    template_declaration_type       go to state 43
    type_definition                 go to state 253
    namespace_unit                  go to state 370


State 255

  310 namespace_units: namespace_unit •

    $default  reduce using rule 310 (namespace_units)


State 256

   27 expression0: expression •  [":"]
   98 array_index: expression •  ["]", ","]

    ":"       reduce using rule 27 (expression0)
    $default  reduce using rule 98 (array_index)


State 257

   99 array_index: expression0 • ":" expression0

    ":"  shift, and go to state 371


State 258

   85 xvalue_expression: "[" array_index_list • "]"
   97 array_index_list: array_index_list • "," array_index

    "]"  shift, and go to state 372
    ","  shift, and go to state 373


State 259

   96 array_index_list: array_index •

    $default  reduce using rule 96 (array_index_list)


State 260

   79 xvalue_expression: xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   81                  | "*" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 266
    "--"  shift, and go to state 267
    "("   shift, and go to state 268
    "."   shift, and go to state 269
    "->"  shift, and go to state 270

    $default  reduce using rule 81 (xvalue_expression)

    Conflict between rule 81 and token "++" resolved as shift (%right "++").
    Conflict between rule 81 and token "--" resolved as shift (%right "--").
    Conflict between rule 81 and token "(" resolved as shift (DEREF < "(").
    Conflict between rule 81 and token "." resolved as shift (DEREF < ".").
    Conflict between rule 81 and token "->" resolved as shift (DEREF < "->").


State 261

   77 xvalue_expression: "++" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   79                  | xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 266
    "--"  shift, and go to state 267
    "("   shift, and go to state 268
    "."   shift, and go to state 269
    "->"  shift, and go to state 270

    $default  reduce using rule 77 (xvalue_expression)

    Conflict between rule 77 and token "++" resolved as shift (%right "++").
    Conflict between rule 77 and token "--" resolved as shift (%right "--").
    Conflict between rule 77 and token "(" resolved as shift ("++" < "(").
    Conflict between rule 77 and token "." resolved as shift ("++" < ".").
    Conflict between rule 77 and token "->" resolved as shift ("++" < "->").


State 262

   78 xvalue_expression: "--" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", ")", ":", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   79                  | xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    "++"  shift, and go to state 266
    "--"  shift, and go to state 267
    "("   shift, and go to state 268
    "."   shift, and go to state 269
    "->"  shift, and go to state 270

    $default  reduce using rule 78 (xvalue_expression)

    Conflict between rule 78 and token "++" resolved as shift (%right "++").
    Conflict between rule 78 and token "--" resolved as shift (%right "--").
    Conflict between rule 78 and token "(" resolved as shift ("--" < "(").
    Conflict between rule 78 and token "." resolved as shift ("--" < ".").
    Conflict between rule 78 and token "->" resolved as shift ("--" < "->").


State 263

   73 rvalue_expression: prvalue_expression •

    $default  reduce using rule 73 (rvalue_expression)


State 264

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   84 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316
    ")"    shift, and go to state 374


State 265

   39 prvalue_expression: xvalue_expression • "+=" rvalue_expression
   40                   | xvalue_expression • "-=" rvalue_expression
   41                   | xvalue_expression • "*=" rvalue_expression
   42                   | xvalue_expression • "/=" rvalue_expression
   43                   | xvalue_expression • "//=" rvalue_expression
   44                   | xvalue_expression • "^^=" rvalue_expression
   59                   | xvalue_expression • "&=" rvalue_expression
   60                   | xvalue_expression • "^=" rvalue_expression
   61                   | xvalue_expression • "|=" rvalue_expression
   62                   | xvalue_expression • "~=" rvalue_expression
   63                   | xvalue_expression • ">>=" rvalue_expression
   64                   | xvalue_expression • "<<=" rvalue_expression
   74 rvalue_expression: xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", ")", ":", ";"]
   79 xvalue_expression: xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    "+="   shift, and go to state 317
    "-="   shift, and go to state 318
    "*="   shift, and go to state 319
    "/="   shift, and go to state 320
    "//="  shift, and go to state 321
    "^^="  shift, and go to state 322
    "++"   shift, and go to state 266
    "--"   shift, and go to state 267
    "("    shift, and go to state 268
    "."    shift, and go to state 269
    "->"   shift, and go to state 270
    "&="   shift, and go to state 324
    "^="   shift, and go to state 325
    "|="   shift, and go to state 326
    "~="   shift, and go to state 327
    "<<="  shift, and go to state 328
    ">>="  shift, and go to state 329

    $default  reduce using rule 74 (rvalue_expression)


State 266

   79 xvalue_expression: xvalue_expression "++" •

    $default  reduce using rule 79 (xvalue_expression)


State 267

   80 xvalue_expression: xvalue_expression "--" •

    $default  reduce using rule 80 (xvalue_expression)


State 268

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  100 function_call: xvalue_expression "(" • function_argument_list ")"
  101              | xvalue_expression "(" • ")"
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    ")"       shift, and go to state 375

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 376
    function_argument       go to state 238


State 269

   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   82                  | xvalue_expression "." • xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    "this"      shift, and go to state 145
    "["         shift, and go to state 146
    "*"         shift, and go to state 147
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 150

    xvalue_expression  go to state 377
    function_call      go to state 152


State 270

   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   83                  | xvalue_expression "->" • xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    "this"      shift, and go to state 145
    "["         shift, and go to state 146
    "*"         shift, and go to state 147
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 150

    xvalue_expression  go to state 378
    function_call      go to state 152


State 271

   10 non_reference_type: type_core ARRAYL xvalue_expression ARRAYR •

    $default  reduce using rule 10 (non_reference_type)


State 272

  307 type_definition: access_modifier0 "define" type "as" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 379


State 273

  160 jump_statement: "break" ";" •

    $default  reduce using rule 160 (jump_statement)


State 274

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   69 prvalue_expression: "castas" "<" • type ">" "(" rvalue_expression ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 380
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 275

  154 clean_up_statement: "cleanup" "(" • IDENTIFIER "," clean_up_arg ")" ";"

    IDENTIFIER  shift, and go to state 381


State 276

  161 jump_statement: "continue" ";" •

    $default  reduce using rule 161 (jump_statement)


State 277

  123 do_loop_statement: "do" block_statement • "while" "(" expression ")"

    "while"  shift, and go to state 382


State 278

  124 for_loop_statement: "for" "(" • for_loop_condition ")" block_statement
  125 for_loop_condition: • variable_declaration ";" expression0 ";" expression0
  126                   | • variable_declaration "in" expression
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list

    "let"  shift, and go to state 11

    for_loop_condition    go to state 383
    variable_declaration  go to state 384


State 279

  165 jump_statement: "goto" IDENTIFIER • ";"

    ";"  shift, and go to state 385


State 280

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  130 if_statement: "if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 386
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 281

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   95 new_expression: "new" "heap" • type "(" function_call_list ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 387
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 282

   94 new_expression: "new" type • "(" function_call_list ")"

    "("  shift, and go to state 388


State 283

  162 jump_statement: "rethrow" ";" •

    $default  reduce using rule 162 (jump_statement)


State 284

  159 jump_statement: "return" ";" •

    $default  reduce using rule 159 (jump_statement)


State 285

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  139 switch_statement: "switch" "(" • expression ")" case_blocks0 default_block0

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 389
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 286

  163 jump_statement: "throw" expression • ";"

    ";"  shift, and go to state 390


State 287

  149 try_block: "try" block_statement •

    $default  reduce using rule 149 (try_block)


State 288

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   68                   | "typeof" "(" • rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 391
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 289

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  122 while_loop_statement: "while" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 392
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 290

  164 jump_statement: "yield" ";" •

    $default  reduce using rule 164 (jump_statement)


State 291

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   67                   | "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 314

    $default  reduce using rule 67 (prvalue_expression)

    Conflict between rule 67 and token "is" resolved as reduce ("is" < UMINUS).
    Conflict between rule 67 and token ">" resolved as reduce (">" < UMINUS).
    Conflict between rule 67 and token "+" resolved as reduce ("+" < UMINUS).
    Conflict between rule 67 and token "-" resolved as reduce ("-" < UMINUS).
    Conflict between rule 67 and token "/" resolved as reduce ("/" < UMINUS).
    Conflict between rule 67 and token "//" resolved as reduce ("//" < UMINUS).
    Conflict between rule 67 and token "*" resolved as reduce ("*" < UMINUS).
    Conflict between rule 67 and token "^^" resolved as reduce ("^^" < UMINUS).
    Conflict between rule 67 and token "<=" resolved as reduce ("<=" < UMINUS).
    Conflict between rule 67 and token ">=" resolved as reduce (">=" < UMINUS).
    Conflict between rule 67 and token "==" resolved as reduce ("==" < UMINUS).
    Conflict between rule 67 and token "!=" resolved as reduce ("!=" < UMINUS).
    Conflict between rule 67 and token "<=>" resolved as reduce ("<=>" < UMINUS).
    Conflict between rule 67 and token "&&" resolved as reduce ("&&" < UMINUS).
    Conflict between rule 67 and token "||" resolved as reduce ("||" < UMINUS).
    Conflict between rule 67 and token "&" resolved as reduce ("&" < UMINUS).
    Conflict between rule 67 and token "|" resolved as reduce ("|" < UMINUS).
    Conflict between rule 67 and token "^" resolved as reduce ("^" < UMINUS).
    Conflict between rule 67 and token "~" resolved as shift (%right "~").
    Conflict between rule 67 and token ">>" resolved as reduce (">>" < UMINUS).
    Conflict between rule 67 and token "<<" resolved as reduce ("<<" < UMINUS).


State 292

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   66                   | "!" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]

    "~"  shift, and go to state 314

    $default  reduce using rule 66 (prvalue_expression)

    Conflict between rule 66 and token "is" resolved as reduce ("is" < "!").
    Conflict between rule 66 and token ">" resolved as reduce (">" < "!").
    Conflict between rule 66 and token "+" resolved as reduce ("+" < "!").
    Conflict between rule 66 and token "-" resolved as reduce ("-" < "!").
    Conflict between rule 66 and token "/" resolved as reduce ("/" < "!").
    Conflict between rule 66 and token "//" resolved as reduce ("//" < "!").
    Conflict between rule 66 and token "*" resolved as reduce ("*" < "!").
    Conflict between rule 66 and token "^^" resolved as reduce ("^^" < "!").
    Conflict between rule 66 and token "<=" resolved as reduce ("<=" < "!").
    Conflict between rule 66 and token ">=" resolved as reduce (">=" < "!").
    Conflict between rule 66 and token "==" resolved as reduce ("==" < "!").
    Conflict between rule 66 and token "!=" resolved as reduce ("!=" < "!").
    Conflict between rule 66 and token "<=>" resolved as reduce ("<=>" < "!").
    Conflict between rule 66 and token "&&" resolved as reduce ("&&" < "!").
    Conflict between rule 66 and token "||" resolved as reduce ("||" < "!").
    Conflict between rule 66 and token "&" resolved as reduce ("&" < "!").
    Conflict between rule 66 and token "|" resolved as reduce ("|" < "!").
    Conflict between rule 66 and token "^" resolved as reduce ("^" < "!").
    Conflict between rule 66 and token "~" resolved as shift (%right "~").
    Conflict between rule 66 and token ">>" resolved as reduce (">>" < "!").
    Conflict between rule 66 and token "<<" resolved as reduce ("<<" < "!").


State 293

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   70                   | "(" rvalue_expression • ")" "?" rvalue_expression ":" rvalue_expression
   84 xvalue_expression: "(" rvalue_expression • ")"

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316
    ")"    shift, and go to state 393


State 294

   93 lambda_expression: "(" function_argument_list • ")" "->" return_types_list "=>" block_statement
  191 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 362
    ")"  shift, and go to state 394


State 295

  166 expression_statement: expression ";" •

    $default  reduce using rule 166 (expression_statement)


State 296

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   65 prvalue_expression: rvalue_expression "is" • type

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 395
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 297

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   45                   | rvalue_expression ">" • rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 396
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 298

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   33                   | rvalue_expression "+" • rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 397
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 299

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   34                   | rvalue_expression "-" • rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 398
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 300

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   36                   | rvalue_expression "/" • rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 399
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 301

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   37                   | rvalue_expression "//" • rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 400
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 302

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   35                   | rvalue_expression "*" • rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 401
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 303

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   38                   | rvalue_expression "^^" • rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 402
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 304

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   47                   | rvalue_expression "<=" • rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 403
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 305

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   46                   | rvalue_expression ">=" • rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 404
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 306

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   50                   | rvalue_expression "==" • rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 405
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 307

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   49                   | rvalue_expression "!=" • rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 406
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 308

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   48                   | rvalue_expression "<=>" • rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 407
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 309

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   51                   | rvalue_expression "&&" • rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 408
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 310

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   52                   | rvalue_expression "||" • rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 409
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 311

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   53                   | rvalue_expression "&" • rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 410
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 312

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   55                   | rvalue_expression "|" • rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 411
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 313

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   54                   | rvalue_expression "^" • rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 412
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 314

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   56                   | rvalue_expression "~" • rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 413
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 315

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   57                   | rvalue_expression ">>" • rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 414
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 316

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   58                   | rvalue_expression "<<" • rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 415
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 317

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   39                   | xvalue_expression "+=" • rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 416
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 318

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   40                   | xvalue_expression "-=" • rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 417
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 319

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   41                   | xvalue_expression "*=" • rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 418
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 320

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   42                   | xvalue_expression "/=" • rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 419
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 321

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   43                   | xvalue_expression "//=" • rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 420
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 322

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   44                   | xvalue_expression "^^=" • rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 421
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 323

   26 expression: xvalue_expression "=" • rvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 422
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 324

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   59                   | xvalue_expression "&=" • rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 423
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 325

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   60                   | xvalue_expression "^=" • rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 424
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 326

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   61                   | xvalue_expression "|=" • rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 425
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 327

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   62                   | xvalue_expression "~=" • rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 426
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 328

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   64                   | xvalue_expression "<<=" • rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 427
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 329

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   63                   | xvalue_expression ">>=" • rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 428
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 330

  114 block_statement: "{" statements0 "}" •

    $default  reduce using rule 114 (block_statement)


State 331

  118 statements: statements statement •

    $default  reduce using rule 118 (statements)


State 332

  135 else_if_statement: "else-if" • "(" expression ")" block_statement

    "("  shift, and go to state 429


State 333

  129 if_statement_sequence: if_statement else_if_statements0 • else_statement0
  136 else_statement0: • else_statement
  137                | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  138 else_statement: • "else" block_statement

    "else"  shift, and go to state 430

    $default  reduce using rule 137 (else_statement0)

    else_statement0  go to state 431
    else_statement   go to state 432


State 334

  131 else_if_statements0: else_if_statements •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "else", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  134 else_if_statements: else_if_statements • else_if_statement
  135 else_if_statement: • "else-if" "(" expression ")" block_statement

    "else-if"  shift, and go to state 332

    $default  reduce using rule 131 (else_if_statements0)

    else_if_statement  go to state 433


State 335

  133 else_if_statements: else_if_statement •

    $default  reduce using rule 133 (else_if_statements)


State 336

  152 catch_block: "catch" • "(" variable_declaration ")" block_statement

    "("  shift, and go to state 434


State 337

  114 block_statement: • "{" statements0 "}"
  153 catch_block: "catch-all" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 435


State 338

  148 exception_statement: try_block catch_blocks •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  151 catch_blocks: catch_blocks • catch_block
  152 catch_block: • "catch" "(" variable_declaration ")" block_statement
  153            | • "catch-all" block_statement

    "catch"      shift, and go to state 336
    "catch-all"  shift, and go to state 337

    $default  reduce using rule 148 (exception_statement)

    catch_block  go to state 436


State 339

  150 catch_blocks: catch_block •

    $default  reduce using rule 150 (catch_blocks)


State 340

  206 operator_overload: operator_overload_header "=" function_options ";" •

    $default  reduce using rule 206 (operator_overload)


State 341

  284 constructor_header: "ctor" access_modifier • compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  289 compeval0: • "compeval"
  290          | • %empty  [IDENTIFIER]

    "compeval"  shift, and go to state 437

    $default  reduce using rule 290 (compeval0)

    compeval0  go to state 438


State 342

  173 access_modifier0: access_modifier •  ["let"]
  270 property: "let" access_modifier • "property" type IDENTIFIER "{" property_blocks "}" ";"

    "property"  shift, and go to state 439

    $default  reduce using rule 173 (access_modifier0)


State 343

  293 destructor_header: "~" IDENTIFIER • "(" ")"

    "("  shift, and go to state 440


State 344

  252 class: class_header "{" class_statements "}" •

    $default  reduce using rule 252 (class)


State 345

  262 class_statements: class_statements class_statement •

    $default  reduce using rule 262 (class_statements)


State 346

  243 function_options: • "delete"
  244                 | • "default"
  282 constructor: constructor_header "=" • function_options ";"

    "default"  shift, and go to state 209
    "delete"   shift, and go to state 210

    function_options  go to state 441


State 347

  285 initializer_list: "=>" • "initailize" "(" initializer_blocks_list ")"

    "initailize"  shift, and go to state 442


State 348

  281 constructor: constructor_header block_statement •

    $default  reduce using rule 281 (constructor)


State 349

  114 block_statement: • "{" statements0 "}"
  279 constructor: constructor_header initializer_list • block_statement
  280            | constructor_header initializer_list • ";"

    "{"  shift, and go to state 107
    ";"  shift, and go to state 443

    block_statement  go to state 444


State 350

  243 function_options: • "delete"
  244                 | • "default"
  292 destructor: destructor_header "=" • function_options ";"

    "default"  shift, and go to state 209
    "delete"   shift, and go to state 210

    function_options  go to state 445


State 351

  291 destructor: destructor_header block_statement •

    $default  reduce using rule 291 (destructor)


State 352

  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  283 constructor_header: template_header "ctor" • access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression

    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17

    access_modifier  go to state 446


State 353

  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  269 property: template_header "let" • access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";"

    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17

    access_modifier  go to state 447


State 354

  256 inheritance: "inherits" • class_names_list
  257 class_names_list: • class_name
  258                 | • class_names_list "," class_name
  259 class_name: • IDENTIFIER
  260           | • IDENTIFIER type_template_paramaters

    IDENTIFIER  shift, and go to state 448

    class_names_list  go to state 449
    class_name        go to state 450


State 355

  255 class_header: template_header "class" IDENTIFIER inheritance •

    $default  reduce using rule 255 (class_header)


State 356

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression
  207 operator_overload_header: template_declaration_type "operator" operator "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 451
    function_argument       go to state 238


State 357

   22 type_list: type_list "," type •

    $default  reduce using rule 22 (type_list)


State 358

  251 enum_member: IDENTIFIER "=" INT •

    $default  reduce using rule 251 (enum_member)


State 359

  249 enum_members_list: enum_members_list "," enum_member •

    $default  reduce using rule 249 (enum_members_list)


State 360

  192 function_argument: type IDENTIFIER •  [",", ")"]
  194                  | type IDENTIFIER • "=" expression

    "="  shift, and go to state 452

    $default  reduce using rule 192 (function_argument)


State 361

  193 function_argument: type "..." •

    $default  reduce using rule 193 (function_argument)


State 362

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  191 function_argument_list: function_argument_list "," • function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 236
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    function_argument   go to state 453


State 363

  182 function_header: "func" IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 455


State 364

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" • function_argument_list ")" throwable_expression "->" return_types_list
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 456
    function_argument       go to state 238


State 365

  171 variable_declaration_block: "let" type IDENTIFIER •  ["in", ",", ")", ";"]
  172                           | "let" type IDENTIFIER • "=" expression

    "="  shift, and go to state 457

    $default  reduce using rule 171 (variable_declaration_block)


State 366

  170 variable_declaration_block_list: variable_declaration_block_list "," variable_declaration_block •

    $default  reduce using rule 170 (variable_declaration_block_list)


State 367

  301 module: "module" module_name ":" IDENTIFIER ";" •

    $default  reduce using rule 301 (module)


State 368

  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"
  208 operator_overload_header: "operator" operator "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 458


State 369

  308 namespace: "namespace" module_name "{" namespace_units "}" •

    $default  reduce using rule 308 (namespace)


State 370

  311 namespace_units: namespace_units namespace_unit •

    $default  reduce using rule 311 (namespace_units)


State 371

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  ["]", ","]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
   99 array_index: expression0 ":" • expression0
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    $default  reduce using rule 28 (expression0)

    expression                 go to state 459
    expression0                go to state 460
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 372

   85 xvalue_expression: "[" array_index_list "]" •

    $default  reduce using rule 85 (xvalue_expression)


State 373

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [":"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
   97 array_index_list: array_index_list "," • array_index
   98 array_index: • expression
   99            | • expression0 ":" expression0
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    $default  reduce using rule 28 (expression0)

    expression                 go to state 256
    expression0                go to state 257
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    array_index                go to state 461
    function_call              go to state 152


State 374

   84 xvalue_expression: "(" rvalue_expression ")" •

    $default  reduce using rule 84 (xvalue_expression)


State 375

  101 function_call: xvalue_expression "(" ")" •

    $default  reduce using rule 101 (function_call)


State 376

  100 function_call: xvalue_expression "(" function_argument_list • ")"
  191 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 362
    ")"  shift, and go to state 462


State 377

   79 xvalue_expression: xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   82                  | xvalue_expression "." xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
   83                  | xvalue_expression • "->" xvalue_expression
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    $default  reduce using rule 82 (xvalue_expression)

    Conflict between rule 82 and token "++" resolved as reduce ("++" < ".").
    Conflict between rule 82 and token "--" resolved as reduce ("--" < ".").
    Conflict between rule 82 and token "(" resolved as reduce (%left "(").
    Conflict between rule 82 and token "." resolved as reduce (%left ".").
    Conflict between rule 82 and token "->" resolved as reduce (%left "->").


State 378

   79 xvalue_expression: xvalue_expression • "++"
   80                  | xvalue_expression • "--"
   82                  | xvalue_expression • "." xvalue_expression
   83                  | xvalue_expression • "->" xvalue_expression
   83                  | xvalue_expression "->" xvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>=", ARRAYR]
  100 function_call: xvalue_expression • "(" function_argument_list ")"
  101              | xvalue_expression • "(" ")"

    $default  reduce using rule 83 (xvalue_expression)

    Conflict between rule 83 and token "++" resolved as reduce ("++" < "->").
    Conflict between rule 83 and token "--" resolved as reduce ("--" < "->").
    Conflict between rule 83 and token "(" resolved as reduce (%left "(").
    Conflict between rule 83 and token "." resolved as reduce (%left ".").
    Conflict between rule 83 and token "->" resolved as reduce (%left "->").


State 379

  307 type_definition: access_modifier0 "define" type "as" IDENTIFIER • ";"

    ";"  shift, and go to state 463


State 380

   69 prvalue_expression: "castas" "<" type • ">" "(" rvalue_expression ")"

    ">"  shift, and go to state 464


State 381

  154 clean_up_statement: "cleanup" "(" IDENTIFIER • "," clean_up_arg ")" ";"

    ","  shift, and go to state 465


State 382

  123 do_loop_statement: "do" block_statement "while" • "(" expression ")"

    "("  shift, and go to state 466


State 383

  124 for_loop_statement: "for" "(" for_loop_condition • ")" block_statement

    ")"  shift, and go to state 467


State 384

  125 for_loop_condition: variable_declaration • ";" expression0 ";" expression0
  126                   | variable_declaration • "in" expression

    "in"  shift, and go to state 468
    ";"   shift, and go to state 469


State 385

  165 jump_statement: "goto" IDENTIFIER ";" •

    $default  reduce using rule 165 (jump_statement)


State 386

  130 if_statement: "if" "(" expression • ")" block_statement

    ")"  shift, and go to state 470


State 387

   95 new_expression: "new" "heap" type • "(" function_call_list ")"

    "("  shift, and go to state 471


State 388

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   94               | "new" type "(" • function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  102 function_call_list: • function_call_arg
  103                   | • function_call_list "," function_call_arg ";"
  104 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 472
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152
    function_call_list         go to state 473
    function_call_arg          go to state 474


State 389

  139 switch_statement: "switch" "(" expression • ")" case_blocks0 default_block0

    ")"  shift, and go to state 475


State 390

  163 jump_statement: "throw" expression ";" •

    $default  reduce using rule 163 (jump_statement)


State 391

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   68                   | "typeof" "(" rvalue_expression • ")"

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316
    ")"    shift, and go to state 476


State 392

  122 while_loop_statement: "while" "(" expression • ")" block_statement

    ")"  shift, and go to state 477


State 393

   70 prvalue_expression: "(" rvalue_expression ")" • "?" rvalue_expression ":" rvalue_expression
   84 xvalue_expression: "(" rvalue_expression ")" •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "+=", "-=", "*=", "/=", "//=", "^^=", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", "~", ">>", "<<", "=", "++", "--", "(", ")", ":", ".", "->", ";", "&=", "^=", "|=", "~=", "<<=", ">>="]

    "?"  shift, and go to state 478

    $default  reduce using rule 84 (xvalue_expression)


State 394

   93 lambda_expression: "(" function_argument_list ")" • "->" return_types_list "=>" block_statement

    "->"  shift, and go to state 479


State 395

   65 prvalue_expression: rvalue_expression "is" type •

    $default  reduce using rule 65 (prvalue_expression)


State 396

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   45                   | rvalue_expression ">" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "==", "!=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<=>"  shift, and go to state 308
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 45 (prvalue_expression)

    Conflict between rule 45 and token "is" resolved as reduce ("is" < ">").
    Conflict between rule 45 and token ">" resolved as reduce (%left ">").
    Conflict between rule 45 and token "+" resolved as shift (">" < "+").
    Conflict between rule 45 and token "-" resolved as shift (">" < "-").
    Conflict between rule 45 and token "/" resolved as shift (">" < "/").
    Conflict between rule 45 and token "//" resolved as shift (">" < "//").
    Conflict between rule 45 and token "*" resolved as shift (">" < "*").
    Conflict between rule 45 and token "^^" resolved as shift (">" < "^^").
    Conflict between rule 45 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 45 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 45 and token "==" resolved as reduce ("==" < ">").
    Conflict between rule 45 and token "!=" resolved as reduce ("!=" < ">").
    Conflict between rule 45 and token "<=>" resolved as shift (">" < "<=>").
    Conflict between rule 45 and token "&&" resolved as reduce ("&&" < ">").
    Conflict between rule 45 and token "||" resolved as reduce ("||" < ">").
    Conflict between rule 45 and token "&" resolved as reduce ("&" < ">").
    Conflict between rule 45 and token "|" resolved as reduce ("|" < ">").
    Conflict between rule 45 and token "^" resolved as reduce ("^" < ">").
    Conflict between rule 45 and token "~" resolved as shift (">" < "~").
    Conflict between rule 45 and token ">>" resolved as shift (">" < ">>").
    Conflict between rule 45 and token "<<" resolved as shift (">" < "<<").


State 397

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   33                   | rvalue_expression "+" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "/"   shift, and go to state 300
    "//"  shift, and go to state 301
    "*"   shift, and go to state 302
    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 33 (prvalue_expression)

    Conflict between rule 33 and token "is" resolved as reduce ("is" < "+").
    Conflict between rule 33 and token ">" resolved as reduce (">" < "+").
    Conflict between rule 33 and token "+" resolved as reduce (%left "+").
    Conflict between rule 33 and token "-" resolved as reduce (%left "-").
    Conflict between rule 33 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 33 and token "//" resolved as shift ("+" < "//").
    Conflict between rule 33 and token "*" resolved as shift ("+" < "*").
    Conflict between rule 33 and token "^^" resolved as shift ("+" < "^^").
    Conflict between rule 33 and token "<=" resolved as reduce ("<=" < "+").
    Conflict between rule 33 and token ">=" resolved as reduce (">=" < "+").
    Conflict between rule 33 and token "==" resolved as reduce ("==" < "+").
    Conflict between rule 33 and token "!=" resolved as reduce ("!=" < "+").
    Conflict between rule 33 and token "<=>" resolved as reduce ("<=>" < "+").
    Conflict between rule 33 and token "&&" resolved as reduce ("&&" < "+").
    Conflict between rule 33 and token "||" resolved as reduce ("||" < "+").
    Conflict between rule 33 and token "&" resolved as reduce ("&" < "+").
    Conflict between rule 33 and token "|" resolved as reduce ("|" < "+").
    Conflict between rule 33 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 33 and token "~" resolved as shift ("+" < "~").
    Conflict between rule 33 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 33 and token "<<" resolved as reduce ("<<" < "+").


State 398

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   34                   | rvalue_expression "-" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "/"   shift, and go to state 300
    "//"  shift, and go to state 301
    "*"   shift, and go to state 302
    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 34 (prvalue_expression)

    Conflict between rule 34 and token "is" resolved as reduce ("is" < "-").
    Conflict between rule 34 and token ">" resolved as reduce (">" < "-").
    Conflict between rule 34 and token "+" resolved as reduce (%left "+").
    Conflict between rule 34 and token "-" resolved as reduce (%left "-").
    Conflict between rule 34 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 34 and token "//" resolved as shift ("-" < "//").
    Conflict between rule 34 and token "*" resolved as shift ("-" < "*").
    Conflict between rule 34 and token "^^" resolved as shift ("-" < "^^").
    Conflict between rule 34 and token "<=" resolved as reduce ("<=" < "-").
    Conflict between rule 34 and token ">=" resolved as reduce (">=" < "-").
    Conflict between rule 34 and token "==" resolved as reduce ("==" < "-").
    Conflict between rule 34 and token "!=" resolved as reduce ("!=" < "-").
    Conflict between rule 34 and token "<=>" resolved as reduce ("<=>" < "-").
    Conflict between rule 34 and token "&&" resolved as reduce ("&&" < "-").
    Conflict between rule 34 and token "||" resolved as reduce ("||" < "-").
    Conflict between rule 34 and token "&" resolved as reduce ("&" < "-").
    Conflict between rule 34 and token "|" resolved as reduce ("|" < "-").
    Conflict between rule 34 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 34 and token "~" resolved as shift ("-" < "~").
    Conflict between rule 34 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 34 and token "<<" resolved as reduce ("<<" < "-").


State 399

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   36                   | rvalue_expression "/" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 36 (prvalue_expression)

    Conflict between rule 36 and token "is" resolved as reduce ("is" < "/").
    Conflict between rule 36 and token ">" resolved as reduce (">" < "/").
    Conflict between rule 36 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 36 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 36 and token "/" resolved as reduce (%left "/").
    Conflict between rule 36 and token "//" resolved as reduce (%left "//").
    Conflict between rule 36 and token "*" resolved as reduce (%left "*").
    Conflict between rule 36 and token "^^" resolved as shift ("/" < "^^").
    Conflict between rule 36 and token "<=" resolved as reduce ("<=" < "/").
    Conflict between rule 36 and token ">=" resolved as reduce (">=" < "/").
    Conflict between rule 36 and token "==" resolved as reduce ("==" < "/").
    Conflict between rule 36 and token "!=" resolved as reduce ("!=" < "/").
    Conflict between rule 36 and token "<=>" resolved as reduce ("<=>" < "/").
    Conflict between rule 36 and token "&&" resolved as reduce ("&&" < "/").
    Conflict between rule 36 and token "||" resolved as reduce ("||" < "/").
    Conflict between rule 36 and token "&" resolved as reduce ("&" < "/").
    Conflict between rule 36 and token "|" resolved as reduce ("|" < "/").
    Conflict between rule 36 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 36 and token "~" resolved as shift ("/" < "~").
    Conflict between rule 36 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 36 and token "<<" resolved as reduce ("<<" < "/").


State 400

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   37                   | rvalue_expression "//" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 37 (prvalue_expression)

    Conflict between rule 37 and token "is" resolved as reduce ("is" < "//").
    Conflict between rule 37 and token ">" resolved as reduce (">" < "//").
    Conflict between rule 37 and token "+" resolved as reduce ("+" < "//").
    Conflict between rule 37 and token "-" resolved as reduce ("-" < "//").
    Conflict between rule 37 and token "/" resolved as reduce (%left "/").
    Conflict between rule 37 and token "//" resolved as reduce (%left "//").
    Conflict between rule 37 and token "*" resolved as reduce (%left "*").
    Conflict between rule 37 and token "^^" resolved as shift ("//" < "^^").
    Conflict between rule 37 and token "<=" resolved as reduce ("<=" < "//").
    Conflict between rule 37 and token ">=" resolved as reduce (">=" < "//").
    Conflict between rule 37 and token "==" resolved as reduce ("==" < "//").
    Conflict between rule 37 and token "!=" resolved as reduce ("!=" < "//").
    Conflict between rule 37 and token "<=>" resolved as reduce ("<=>" < "//").
    Conflict between rule 37 and token "&&" resolved as reduce ("&&" < "//").
    Conflict between rule 37 and token "||" resolved as reduce ("||" < "//").
    Conflict between rule 37 and token "&" resolved as reduce ("&" < "//").
    Conflict between rule 37 and token "|" resolved as reduce ("|" < "//").
    Conflict between rule 37 and token "^" resolved as reduce ("^" < "//").
    Conflict between rule 37 and token "~" resolved as shift ("//" < "~").
    Conflict between rule 37 and token ">>" resolved as reduce (">>" < "//").
    Conflict between rule 37 and token "<<" resolved as reduce ("<<" < "//").


State 401

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   35                   | rvalue_expression "*" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 35 (prvalue_expression)

    Conflict between rule 35 and token "is" resolved as reduce ("is" < "*").
    Conflict between rule 35 and token ">" resolved as reduce (">" < "*").
    Conflict between rule 35 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 35 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 35 and token "/" resolved as reduce (%left "/").
    Conflict between rule 35 and token "//" resolved as reduce (%left "//").
    Conflict between rule 35 and token "*" resolved as reduce (%left "*").
    Conflict between rule 35 and token "^^" resolved as shift ("*" < "^^").
    Conflict between rule 35 and token "<=" resolved as reduce ("<=" < "*").
    Conflict between rule 35 and token ">=" resolved as reduce (">=" < "*").
    Conflict between rule 35 and token "==" resolved as reduce ("==" < "*").
    Conflict between rule 35 and token "!=" resolved as reduce ("!=" < "*").
    Conflict between rule 35 and token "<=>" resolved as reduce ("<=>" < "*").
    Conflict between rule 35 and token "&&" resolved as reduce ("&&" < "*").
    Conflict between rule 35 and token "||" resolved as reduce ("||" < "*").
    Conflict between rule 35 and token "&" resolved as reduce ("&" < "*").
    Conflict between rule 35 and token "|" resolved as reduce ("|" < "*").
    Conflict between rule 35 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 35 and token "~" resolved as shift ("*" < "~").
    Conflict between rule 35 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 35 and token "<<" resolved as reduce ("<<" < "*").


State 402

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   38                   | rvalue_expression "^^" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 38 (prvalue_expression)

    Conflict between rule 38 and token "is" resolved as reduce ("is" < "^^").
    Conflict between rule 38 and token ">" resolved as reduce (">" < "^^").
    Conflict between rule 38 and token "+" resolved as reduce ("+" < "^^").
    Conflict between rule 38 and token "-" resolved as reduce ("-" < "^^").
    Conflict between rule 38 and token "/" resolved as reduce ("/" < "^^").
    Conflict between rule 38 and token "//" resolved as reduce ("//" < "^^").
    Conflict between rule 38 and token "*" resolved as reduce ("*" < "^^").
    Conflict between rule 38 and token "^^" resolved as shift (%right "^^").
    Conflict between rule 38 and token "<=" resolved as reduce ("<=" < "^^").
    Conflict between rule 38 and token ">=" resolved as reduce (">=" < "^^").
    Conflict between rule 38 and token "==" resolved as reduce ("==" < "^^").
    Conflict between rule 38 and token "!=" resolved as reduce ("!=" < "^^").
    Conflict between rule 38 and token "<=>" resolved as reduce ("<=>" < "^^").
    Conflict between rule 38 and token "&&" resolved as reduce ("&&" < "^^").
    Conflict between rule 38 and token "||" resolved as reduce ("||" < "^^").
    Conflict between rule 38 and token "&" resolved as reduce ("&" < "^^").
    Conflict between rule 38 and token "|" resolved as reduce ("|" < "^^").
    Conflict between rule 38 and token "^" resolved as reduce ("^" < "^^").
    Conflict between rule 38 and token "~" resolved as shift ("^^" < "~").
    Conflict between rule 38 and token ">>" resolved as reduce (">>" < "^^").
    Conflict between rule 38 and token "<<" resolved as reduce ("<<" < "^^").


State 403

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   47                   | rvalue_expression "<=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "==", "!=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<=>"  shift, and go to state 308
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 47 (prvalue_expression)

    Conflict between rule 47 and token "is" resolved as reduce ("is" < "<=").
    Conflict between rule 47 and token ">" resolved as reduce (%left ">").
    Conflict between rule 47 and token "+" resolved as shift ("<=" < "+").
    Conflict between rule 47 and token "-" resolved as shift ("<=" < "-").
    Conflict between rule 47 and token "/" resolved as shift ("<=" < "/").
    Conflict between rule 47 and token "//" resolved as shift ("<=" < "//").
    Conflict between rule 47 and token "*" resolved as shift ("<=" < "*").
    Conflict between rule 47 and token "^^" resolved as shift ("<=" < "^^").
    Conflict between rule 47 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 47 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 47 and token "==" resolved as reduce ("==" < "<=").
    Conflict between rule 47 and token "!=" resolved as reduce ("!=" < "<=").
    Conflict between rule 47 and token "<=>" resolved as shift ("<=" < "<=>").
    Conflict between rule 47 and token "&&" resolved as reduce ("&&" < "<=").
    Conflict between rule 47 and token "||" resolved as reduce ("||" < "<=").
    Conflict between rule 47 and token "&" resolved as reduce ("&" < "<=").
    Conflict between rule 47 and token "|" resolved as reduce ("|" < "<=").
    Conflict between rule 47 and token "^" resolved as reduce ("^" < "<=").
    Conflict between rule 47 and token "~" resolved as shift ("<=" < "~").
    Conflict between rule 47 and token ">>" resolved as shift ("<=" < ">>").
    Conflict between rule 47 and token "<<" resolved as shift ("<=" < "<<").


State 404

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   46                   | rvalue_expression ">=" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "==", "!=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<=>"  shift, and go to state 308
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 46 (prvalue_expression)

    Conflict between rule 46 and token "is" resolved as reduce ("is" < ">=").
    Conflict between rule 46 and token ">" resolved as reduce (%left ">").
    Conflict between rule 46 and token "+" resolved as shift (">=" < "+").
    Conflict between rule 46 and token "-" resolved as shift (">=" < "-").
    Conflict between rule 46 and token "/" resolved as shift (">=" < "/").
    Conflict between rule 46 and token "//" resolved as shift (">=" < "//").
    Conflict between rule 46 and token "*" resolved as shift (">=" < "*").
    Conflict between rule 46 and token "^^" resolved as shift (">=" < "^^").
    Conflict between rule 46 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 46 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 46 and token "==" resolved as reduce ("==" < ">=").
    Conflict between rule 46 and token "!=" resolved as reduce ("!=" < ">=").
    Conflict between rule 46 and token "<=>" resolved as shift (">=" < "<=>").
    Conflict between rule 46 and token "&&" resolved as reduce ("&&" < ">=").
    Conflict between rule 46 and token "||" resolved as reduce ("||" < ">=").
    Conflict between rule 46 and token "&" resolved as reduce ("&" < ">=").
    Conflict between rule 46 and token "|" resolved as reduce ("|" < ">=").
    Conflict between rule 46 and token "^" resolved as reduce ("^" < ">=").
    Conflict between rule 46 and token "~" resolved as shift (">=" < "~").
    Conflict between rule 46 and token ">>" resolved as shift (">=" < ">>").
    Conflict between rule 46 and token "<<" resolved as shift (">=" < "<<").


State 405

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   50                   | rvalue_expression "==" rvalue_expression •  ["in", "is", "]", ",", "==", "!=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "<=>"  shift, and go to state 308
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 50 (prvalue_expression)

    Conflict between rule 50 and token "is" resolved as reduce ("is" < "==").
    Conflict between rule 50 and token ">" resolved as shift ("==" < ">").
    Conflict between rule 50 and token "+" resolved as shift ("==" < "+").
    Conflict between rule 50 and token "-" resolved as shift ("==" < "-").
    Conflict between rule 50 and token "/" resolved as shift ("==" < "/").
    Conflict between rule 50 and token "//" resolved as shift ("==" < "//").
    Conflict between rule 50 and token "*" resolved as shift ("==" < "*").
    Conflict between rule 50 and token "^^" resolved as shift ("==" < "^^").
    Conflict between rule 50 and token "<=" resolved as shift ("==" < "<=").
    Conflict between rule 50 and token ">=" resolved as shift ("==" < ">=").
    Conflict between rule 50 and token "==" resolved as reduce (%left "==").
    Conflict between rule 50 and token "!=" resolved as reduce (%left "!=").
    Conflict between rule 50 and token "<=>" resolved as shift ("==" < "<=>").
    Conflict between rule 50 and token "&&" resolved as reduce ("&&" < "==").
    Conflict between rule 50 and token "||" resolved as reduce ("||" < "==").
    Conflict between rule 50 and token "&" resolved as reduce ("&" < "==").
    Conflict between rule 50 and token "|" resolved as reduce ("|" < "==").
    Conflict between rule 50 and token "^" resolved as reduce ("^" < "==").
    Conflict between rule 50 and token "~" resolved as shift ("==" < "~").
    Conflict between rule 50 and token ">>" resolved as shift ("==" < ">>").
    Conflict between rule 50 and token "<<" resolved as shift ("==" < "<<").


State 406

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   49                   | rvalue_expression "!=" rvalue_expression •  ["in", "is", "]", ",", "==", "!=", "&&", "||", "&", "|", "^", ")", ":", ";"]
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "<=>"  shift, and go to state 308
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 49 (prvalue_expression)

    Conflict between rule 49 and token "is" resolved as reduce ("is" < "!=").
    Conflict between rule 49 and token ">" resolved as shift ("!=" < ">").
    Conflict between rule 49 and token "+" resolved as shift ("!=" < "+").
    Conflict between rule 49 and token "-" resolved as shift ("!=" < "-").
    Conflict between rule 49 and token "/" resolved as shift ("!=" < "/").
    Conflict between rule 49 and token "//" resolved as shift ("!=" < "//").
    Conflict between rule 49 and token "*" resolved as shift ("!=" < "*").
    Conflict between rule 49 and token "^^" resolved as shift ("!=" < "^^").
    Conflict between rule 49 and token "<=" resolved as shift ("!=" < "<=").
    Conflict between rule 49 and token ">=" resolved as shift ("!=" < ">=").
    Conflict between rule 49 and token "==" resolved as reduce (%left "==").
    Conflict between rule 49 and token "!=" resolved as reduce (%left "!=").
    Conflict between rule 49 and token "<=>" resolved as shift ("!=" < "<=>").
    Conflict between rule 49 and token "&&" resolved as reduce ("&&" < "!=").
    Conflict between rule 49 and token "||" resolved as reduce ("||" < "!=").
    Conflict between rule 49 and token "&" resolved as reduce ("&" < "!=").
    Conflict between rule 49 and token "|" resolved as reduce ("|" < "!=").
    Conflict between rule 49 and token "^" resolved as reduce ("^" < "!=").
    Conflict between rule 49 and token "~" resolved as shift ("!=" < "~").
    Conflict between rule 49 and token ">>" resolved as shift ("!=" < ">>").
    Conflict between rule 49 and token "<<" resolved as shift ("!=" < "<<").


State 407

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   48                   | rvalue_expression "<=>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ")", ":", ";"]
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "+"   shift, and go to state 298
    "-"   shift, and go to state 299
    "/"   shift, and go to state 300
    "//"  shift, and go to state 301
    "*"   shift, and go to state 302
    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314
    ">>"  shift, and go to state 315
    "<<"  shift, and go to state 316

    $default  reduce using rule 48 (prvalue_expression)

    Conflict between rule 48 and token "is" resolved as reduce ("is" < "<=>").
    Conflict between rule 48 and token ">" resolved as reduce (">" < "<=>").
    Conflict between rule 48 and token "+" resolved as shift ("<=>" < "+").
    Conflict between rule 48 and token "-" resolved as shift ("<=>" < "-").
    Conflict between rule 48 and token "/" resolved as shift ("<=>" < "/").
    Conflict between rule 48 and token "//" resolved as shift ("<=>" < "//").
    Conflict between rule 48 and token "*" resolved as shift ("<=>" < "*").
    Conflict between rule 48 and token "^^" resolved as shift ("<=>" < "^^").
    Conflict between rule 48 and token "<=" resolved as reduce ("<=" < "<=>").
    Conflict between rule 48 and token ">=" resolved as reduce (">=" < "<=>").
    Conflict between rule 48 and token "==" resolved as reduce ("==" < "<=>").
    Conflict between rule 48 and token "!=" resolved as reduce ("!=" < "<=>").
    Conflict between rule 48 and token "<=>" resolved as reduce (%left "<=>").
    Conflict between rule 48 and token "&&" resolved as reduce ("&&" < "<=>").
    Conflict between rule 48 and token "||" resolved as reduce ("||" < "<=>").
    Conflict between rule 48 and token "&" resolved as reduce ("&" < "<=>").
    Conflict between rule 48 and token "|" resolved as reduce ("|" < "<=>").
    Conflict between rule 48 and token "^" resolved as reduce ("^" < "<=>").
    Conflict between rule 48 and token "~" resolved as shift ("<=>" < "~").
    Conflict between rule 48 and token ">>" resolved as shift ("<=>" < ">>").
    Conflict between rule 48 and token "<<" resolved as shift ("<=>" < "<<").


State 408

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   51                   | rvalue_expression "&&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", ")", ":", ";"]
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 51 (prvalue_expression)

    Conflict between rule 51 and token "is" resolved as reduce ("is" < "&&").
    Conflict between rule 51 and token ">" resolved as shift ("&&" < ">").
    Conflict between rule 51 and token "+" resolved as shift ("&&" < "+").
    Conflict between rule 51 and token "-" resolved as shift ("&&" < "-").
    Conflict between rule 51 and token "/" resolved as shift ("&&" < "/").
    Conflict between rule 51 and token "//" resolved as shift ("&&" < "//").
    Conflict between rule 51 and token "*" resolved as shift ("&&" < "*").
    Conflict between rule 51 and token "^^" resolved as shift ("&&" < "^^").
    Conflict between rule 51 and token "<=" resolved as shift ("&&" < "<=").
    Conflict between rule 51 and token ">=" resolved as shift ("&&" < ">=").
    Conflict between rule 51 and token "==" resolved as shift ("&&" < "==").
    Conflict between rule 51 and token "!=" resolved as shift ("&&" < "!=").
    Conflict between rule 51 and token "<=>" resolved as shift ("&&" < "<=>").
    Conflict between rule 51 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 51 and token "||" resolved as reduce ("||" < "&&").
    Conflict between rule 51 and token "&" resolved as shift ("&&" < "&").
    Conflict between rule 51 and token "|" resolved as shift ("&&" < "|").
    Conflict between rule 51 and token "^" resolved as shift ("&&" < "^").
    Conflict between rule 51 and token "~" resolved as shift ("&&" < "~").
    Conflict between rule 51 and token ">>" resolved as shift ("&&" < ">>").
    Conflict between rule 51 and token "<<" resolved as shift ("&&" < "<<").


State 409

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   52                   | rvalue_expression "||" rvalue_expression •  ["in", "is", "]", ",", "||", ")", ":", ";"]
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 52 (prvalue_expression)

    Conflict between rule 52 and token "is" resolved as reduce ("is" < "||").
    Conflict between rule 52 and token ">" resolved as shift ("||" < ">").
    Conflict between rule 52 and token "+" resolved as shift ("||" < "+").
    Conflict between rule 52 and token "-" resolved as shift ("||" < "-").
    Conflict between rule 52 and token "/" resolved as shift ("||" < "/").
    Conflict between rule 52 and token "//" resolved as shift ("||" < "//").
    Conflict between rule 52 and token "*" resolved as shift ("||" < "*").
    Conflict between rule 52 and token "^^" resolved as shift ("||" < "^^").
    Conflict between rule 52 and token "<=" resolved as shift ("||" < "<=").
    Conflict between rule 52 and token ">=" resolved as shift ("||" < ">=").
    Conflict between rule 52 and token "==" resolved as shift ("||" < "==").
    Conflict between rule 52 and token "!=" resolved as shift ("||" < "!=").
    Conflict between rule 52 and token "<=>" resolved as shift ("||" < "<=>").
    Conflict between rule 52 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 52 and token "||" resolved as reduce (%left "||").
    Conflict between rule 52 and token "&" resolved as shift ("||" < "&").
    Conflict between rule 52 and token "|" resolved as shift ("||" < "|").
    Conflict between rule 52 and token "^" resolved as shift ("||" < "^").
    Conflict between rule 52 and token "~" resolved as shift ("||" < "~").
    Conflict between rule 52 and token ">>" resolved as shift ("||" < ">>").
    Conflict between rule 52 and token "<<" resolved as shift ("||" < "<<").


State 410

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   53                   | rvalue_expression "&" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "&", "|", "^", ")", ":", ";"]
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 53 (prvalue_expression)

    Conflict between rule 53 and token "is" resolved as reduce ("is" < "&").
    Conflict between rule 53 and token ">" resolved as shift ("&" < ">").
    Conflict between rule 53 and token "+" resolved as shift ("&" < "+").
    Conflict between rule 53 and token "-" resolved as shift ("&" < "-").
    Conflict between rule 53 and token "/" resolved as shift ("&" < "/").
    Conflict between rule 53 and token "//" resolved as shift ("&" < "//").
    Conflict between rule 53 and token "*" resolved as shift ("&" < "*").
    Conflict between rule 53 and token "^^" resolved as shift ("&" < "^^").
    Conflict between rule 53 and token "<=" resolved as shift ("&" < "<=").
    Conflict between rule 53 and token ">=" resolved as shift ("&" < ">=").
    Conflict between rule 53 and token "==" resolved as shift ("&" < "==").
    Conflict between rule 53 and token "!=" resolved as shift ("&" < "!=").
    Conflict between rule 53 and token "<=>" resolved as shift ("&" < "<=>").
    Conflict between rule 53 and token "&&" resolved as reduce ("&&" < "&").
    Conflict between rule 53 and token "||" resolved as reduce ("||" < "&").
    Conflict between rule 53 and token "&" resolved as reduce (%left "&").
    Conflict between rule 53 and token "|" resolved as reduce ("|" < "&").
    Conflict between rule 53 and token "^" resolved as reduce ("^" < "&").
    Conflict between rule 53 and token "~" resolved as shift ("&" < "~").
    Conflict between rule 53 and token ">>" resolved as shift ("&" < ">>").
    Conflict between rule 53 and token "<<" resolved as shift ("&" < "<<").


State 411

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   55                   | rvalue_expression "|" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", ")", ":", ";"]
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&"    shift, and go to state 311
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 55 (prvalue_expression)

    Conflict between rule 55 and token "is" resolved as reduce ("is" < "|").
    Conflict between rule 55 and token ">" resolved as shift ("|" < ">").
    Conflict between rule 55 and token "+" resolved as shift ("|" < "+").
    Conflict between rule 55 and token "-" resolved as shift ("|" < "-").
    Conflict between rule 55 and token "/" resolved as shift ("|" < "/").
    Conflict between rule 55 and token "//" resolved as shift ("|" < "//").
    Conflict between rule 55 and token "*" resolved as shift ("|" < "*").
    Conflict between rule 55 and token "^^" resolved as shift ("|" < "^^").
    Conflict between rule 55 and token "<=" resolved as shift ("|" < "<=").
    Conflict between rule 55 and token ">=" resolved as shift ("|" < ">=").
    Conflict between rule 55 and token "==" resolved as shift ("|" < "==").
    Conflict between rule 55 and token "!=" resolved as shift ("|" < "!=").
    Conflict between rule 55 and token "<=>" resolved as shift ("|" < "<=>").
    Conflict between rule 55 and token "&&" resolved as reduce ("&&" < "|").
    Conflict between rule 55 and token "||" resolved as reduce ("||" < "|").
    Conflict between rule 55 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 55 and token "|" resolved as reduce (%left "|").
    Conflict between rule 55 and token "^" resolved as shift ("|" < "^").
    Conflict between rule 55 and token "~" resolved as shift ("|" < "~").
    Conflict between rule 55 and token ">>" resolved as shift ("|" < ">>").
    Conflict between rule 55 and token "<<" resolved as shift ("|" < "<<").


State 412

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   54                   | rvalue_expression "^" rvalue_expression •  ["in", "is", "]", ",", "&&", "||", "|", "^", ")", ":", ";"]
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&"    shift, and go to state 311
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 54 (prvalue_expression)

    Conflict between rule 54 and token "is" resolved as reduce ("is" < "^").
    Conflict between rule 54 and token ">" resolved as shift ("^" < ">").
    Conflict between rule 54 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 54 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 54 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 54 and token "//" resolved as shift ("^" < "//").
    Conflict between rule 54 and token "*" resolved as shift ("^" < "*").
    Conflict between rule 54 and token "^^" resolved as shift ("^" < "^^").
    Conflict between rule 54 and token "<=" resolved as shift ("^" < "<=").
    Conflict between rule 54 and token ">=" resolved as shift ("^" < ">=").
    Conflict between rule 54 and token "==" resolved as shift ("^" < "==").
    Conflict between rule 54 and token "!=" resolved as shift ("^" < "!=").
    Conflict between rule 54 and token "<=>" resolved as shift ("^" < "<=>").
    Conflict between rule 54 and token "&&" resolved as reduce ("&&" < "^").
    Conflict between rule 54 and token "||" resolved as reduce ("||" < "^").
    Conflict between rule 54 and token "&" resolved as shift ("^" < "&").
    Conflict between rule 54 and token "|" resolved as reduce ("|" < "^").
    Conflict between rule 54 and token "^" resolved as reduce (%left "^").
    Conflict between rule 54 and token "~" resolved as shift ("^" < "~").
    Conflict between rule 54 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 54 and token "<<" resolved as shift ("^" < "<<").


State 413

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   56                   | rvalue_expression "~" rvalue_expression •  ["in", "is", "]", ">", ",", "+", "-", "/", "//", "*", "^^", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "~"  shift, and go to state 314

    $default  reduce using rule 56 (prvalue_expression)

    Conflict between rule 56 and token "is" resolved as reduce ("is" < "~").
    Conflict between rule 56 and token ">" resolved as reduce (">" < "~").
    Conflict between rule 56 and token "+" resolved as reduce ("+" < "~").
    Conflict between rule 56 and token "-" resolved as reduce ("-" < "~").
    Conflict between rule 56 and token "/" resolved as reduce ("/" < "~").
    Conflict between rule 56 and token "//" resolved as reduce ("//" < "~").
    Conflict between rule 56 and token "*" resolved as reduce ("*" < "~").
    Conflict between rule 56 and token "^^" resolved as reduce ("^^" < "~").
    Conflict between rule 56 and token "<=" resolved as reduce ("<=" < "~").
    Conflict between rule 56 and token ">=" resolved as reduce (">=" < "~").
    Conflict between rule 56 and token "==" resolved as reduce ("==" < "~").
    Conflict between rule 56 and token "!=" resolved as reduce ("!=" < "~").
    Conflict between rule 56 and token "<=>" resolved as reduce ("<=>" < "~").
    Conflict between rule 56 and token "&&" resolved as reduce ("&&" < "~").
    Conflict between rule 56 and token "||" resolved as reduce ("||" < "~").
    Conflict between rule 56 and token "&" resolved as reduce ("&" < "~").
    Conflict between rule 56 and token "|" resolved as reduce ("|" < "~").
    Conflict between rule 56 and token "^" resolved as reduce ("^" < "~").
    Conflict between rule 56 and token "~" resolved as shift (%right "~").
    Conflict between rule 56 and token ">>" resolved as reduce (">>" < "~").
    Conflict between rule 56 and token "<<" resolved as reduce ("<<" < "~").


State 414

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   57                   | rvalue_expression ">>" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "+"   shift, and go to state 298
    "-"   shift, and go to state 299
    "/"   shift, and go to state 300
    "//"  shift, and go to state 301
    "*"   shift, and go to state 302
    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 57 (prvalue_expression)

    Conflict between rule 57 and token "is" resolved as reduce ("is" < ">>").
    Conflict between rule 57 and token ">" resolved as reduce (">" < ">>").
    Conflict between rule 57 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 57 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 57 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 57 and token "//" resolved as shift (">>" < "//").
    Conflict between rule 57 and token "*" resolved as shift (">>" < "*").
    Conflict between rule 57 and token "^^" resolved as shift (">>" < "^^").
    Conflict between rule 57 and token "<=" resolved as reduce ("<=" < ">>").
    Conflict between rule 57 and token ">=" resolved as reduce (">=" < ">>").
    Conflict between rule 57 and token "==" resolved as reduce ("==" < ">>").
    Conflict between rule 57 and token "!=" resolved as reduce ("!=" < ">>").
    Conflict between rule 57 and token "<=>" resolved as reduce ("<=>" < ">>").
    Conflict between rule 57 and token "&&" resolved as reduce ("&&" < ">>").
    Conflict between rule 57 and token "||" resolved as reduce ("||" < ">>").
    Conflict between rule 57 and token "&" resolved as reduce ("&" < ">>").
    Conflict between rule 57 and token "|" resolved as reduce ("|" < ">>").
    Conflict between rule 57 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 57 and token "~" resolved as shift (">>" < "~").
    Conflict between rule 57 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 57 and token "<<" resolved as reduce (%left "<<").


State 415

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   58                   | rvalue_expression "<<" rvalue_expression •  ["in", "is", "]", ">", ",", "<=", ">=", "==", "!=", "<=>", "&&", "||", "&", "|", "^", ">>", "<<", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "+"   shift, and go to state 298
    "-"   shift, and go to state 299
    "/"   shift, and go to state 300
    "//"  shift, and go to state 301
    "*"   shift, and go to state 302
    "^^"  shift, and go to state 303
    "~"   shift, and go to state 314

    $default  reduce using rule 58 (prvalue_expression)

    Conflict between rule 58 and token "is" resolved as reduce ("is" < "<<").
    Conflict between rule 58 and token ">" resolved as reduce (">" < "<<").
    Conflict between rule 58 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 58 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 58 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 58 and token "//" resolved as shift ("<<" < "//").
    Conflict between rule 58 and token "*" resolved as shift ("<<" < "*").
    Conflict between rule 58 and token "^^" resolved as shift ("<<" < "^^").
    Conflict between rule 58 and token "<=" resolved as reduce ("<=" < "<<").
    Conflict between rule 58 and token ">=" resolved as reduce (">=" < "<<").
    Conflict between rule 58 and token "==" resolved as reduce ("==" < "<<").
    Conflict between rule 58 and token "!=" resolved as reduce ("!=" < "<<").
    Conflict between rule 58 and token "<=>" resolved as reduce ("<=>" < "<<").
    Conflict between rule 58 and token "&&" resolved as reduce ("&&" < "<<").
    Conflict between rule 58 and token "||" resolved as reduce ("||" < "<<").
    Conflict between rule 58 and token "&" resolved as reduce ("&" < "<<").
    Conflict between rule 58 and token "|" resolved as reduce ("|" < "<<").
    Conflict between rule 58 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 58 and token "~" resolved as shift ("<<" < "~").
    Conflict between rule 58 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 58 and token "<<" resolved as reduce (%left "<<").


State 416

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   39                   | xvalue_expression "+=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 39 (prvalue_expression)

    Conflict between rule 39 and token "is" resolved as shift (%right "is").
    Conflict between rule 39 and token ">" resolved as shift ("+=" < ">").
    Conflict between rule 39 and token "+" resolved as shift ("+=" < "+").
    Conflict between rule 39 and token "-" resolved as shift ("+=" < "-").
    Conflict between rule 39 and token "/" resolved as shift ("+=" < "/").
    Conflict between rule 39 and token "//" resolved as shift ("+=" < "//").
    Conflict between rule 39 and token "*" resolved as shift ("+=" < "*").
    Conflict between rule 39 and token "^^" resolved as shift ("+=" < "^^").
    Conflict between rule 39 and token "<=" resolved as shift ("+=" < "<=").
    Conflict between rule 39 and token ">=" resolved as shift ("+=" < ">=").
    Conflict between rule 39 and token "==" resolved as shift ("+=" < "==").
    Conflict between rule 39 and token "!=" resolved as shift ("+=" < "!=").
    Conflict between rule 39 and token "<=>" resolved as shift ("+=" < "<=>").
    Conflict between rule 39 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 39 and token "||" resolved as shift ("+=" < "||").
    Conflict between rule 39 and token "&" resolved as shift ("+=" < "&").
    Conflict between rule 39 and token "|" resolved as shift ("+=" < "|").
    Conflict between rule 39 and token "^" resolved as shift ("+=" < "^").
    Conflict between rule 39 and token "~" resolved as shift ("+=" < "~").
    Conflict between rule 39 and token ">>" resolved as shift ("+=" < ">>").
    Conflict between rule 39 and token "<<" resolved as shift ("+=" < "<<").


State 417

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   40                   | xvalue_expression "-=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 40 (prvalue_expression)

    Conflict between rule 40 and token "is" resolved as shift (%right "is").
    Conflict between rule 40 and token ">" resolved as shift ("-=" < ">").
    Conflict between rule 40 and token "+" resolved as shift ("-=" < "+").
    Conflict between rule 40 and token "-" resolved as shift ("-=" < "-").
    Conflict between rule 40 and token "/" resolved as shift ("-=" < "/").
    Conflict between rule 40 and token "//" resolved as shift ("-=" < "//").
    Conflict between rule 40 and token "*" resolved as shift ("-=" < "*").
    Conflict between rule 40 and token "^^" resolved as shift ("-=" < "^^").
    Conflict between rule 40 and token "<=" resolved as shift ("-=" < "<=").
    Conflict between rule 40 and token ">=" resolved as shift ("-=" < ">=").
    Conflict between rule 40 and token "==" resolved as shift ("-=" < "==").
    Conflict between rule 40 and token "!=" resolved as shift ("-=" < "!=").
    Conflict between rule 40 and token "<=>" resolved as shift ("-=" < "<=>").
    Conflict between rule 40 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 40 and token "||" resolved as shift ("-=" < "||").
    Conflict between rule 40 and token "&" resolved as shift ("-=" < "&").
    Conflict between rule 40 and token "|" resolved as shift ("-=" < "|").
    Conflict between rule 40 and token "^" resolved as shift ("-=" < "^").
    Conflict between rule 40 and token "~" resolved as shift ("-=" < "~").
    Conflict between rule 40 and token ">>" resolved as shift ("-=" < ">>").
    Conflict between rule 40 and token "<<" resolved as shift ("-=" < "<<").


State 418

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   41                   | xvalue_expression "*=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 41 (prvalue_expression)

    Conflict between rule 41 and token "is" resolved as shift (%right "is").
    Conflict between rule 41 and token ">" resolved as shift ("*=" < ">").
    Conflict between rule 41 and token "+" resolved as shift ("*=" < "+").
    Conflict between rule 41 and token "-" resolved as shift ("*=" < "-").
    Conflict between rule 41 and token "/" resolved as shift ("*=" < "/").
    Conflict between rule 41 and token "//" resolved as shift ("*=" < "//").
    Conflict between rule 41 and token "*" resolved as shift ("*=" < "*").
    Conflict between rule 41 and token "^^" resolved as shift ("*=" < "^^").
    Conflict between rule 41 and token "<=" resolved as shift ("*=" < "<=").
    Conflict between rule 41 and token ">=" resolved as shift ("*=" < ">=").
    Conflict between rule 41 and token "==" resolved as shift ("*=" < "==").
    Conflict between rule 41 and token "!=" resolved as shift ("*=" < "!=").
    Conflict between rule 41 and token "<=>" resolved as shift ("*=" < "<=>").
    Conflict between rule 41 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 41 and token "||" resolved as shift ("*=" < "||").
    Conflict between rule 41 and token "&" resolved as shift ("*=" < "&").
    Conflict between rule 41 and token "|" resolved as shift ("*=" < "|").
    Conflict between rule 41 and token "^" resolved as shift ("*=" < "^").
    Conflict between rule 41 and token "~" resolved as shift ("*=" < "~").
    Conflict between rule 41 and token ">>" resolved as shift ("*=" < ">>").
    Conflict between rule 41 and token "<<" resolved as shift ("*=" < "<<").


State 419

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   42                   | xvalue_expression "/=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 42 (prvalue_expression)

    Conflict between rule 42 and token "is" resolved as shift (%right "is").
    Conflict between rule 42 and token ">" resolved as shift ("/=" < ">").
    Conflict between rule 42 and token "+" resolved as shift ("/=" < "+").
    Conflict between rule 42 and token "-" resolved as shift ("/=" < "-").
    Conflict between rule 42 and token "/" resolved as shift ("/=" < "/").
    Conflict between rule 42 and token "//" resolved as shift ("/=" < "//").
    Conflict between rule 42 and token "*" resolved as shift ("/=" < "*").
    Conflict between rule 42 and token "^^" resolved as shift ("/=" < "^^").
    Conflict between rule 42 and token "<=" resolved as shift ("/=" < "<=").
    Conflict between rule 42 and token ">=" resolved as shift ("/=" < ">=").
    Conflict between rule 42 and token "==" resolved as shift ("/=" < "==").
    Conflict between rule 42 and token "!=" resolved as shift ("/=" < "!=").
    Conflict between rule 42 and token "<=>" resolved as shift ("/=" < "<=>").
    Conflict between rule 42 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 42 and token "||" resolved as shift ("/=" < "||").
    Conflict between rule 42 and token "&" resolved as shift ("/=" < "&").
    Conflict between rule 42 and token "|" resolved as shift ("/=" < "|").
    Conflict between rule 42 and token "^" resolved as shift ("/=" < "^").
    Conflict between rule 42 and token "~" resolved as shift ("/=" < "~").
    Conflict between rule 42 and token ">>" resolved as shift ("/=" < ">>").
    Conflict between rule 42 and token "<<" resolved as shift ("/=" < "<<").


State 420

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   43                   | xvalue_expression "//=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 43 (prvalue_expression)

    Conflict between rule 43 and token "is" resolved as shift (%right "is").
    Conflict between rule 43 and token ">" resolved as shift ("//=" < ">").
    Conflict between rule 43 and token "+" resolved as shift ("//=" < "+").
    Conflict between rule 43 and token "-" resolved as shift ("//=" < "-").
    Conflict between rule 43 and token "/" resolved as shift ("//=" < "/").
    Conflict between rule 43 and token "//" resolved as shift ("//=" < "//").
    Conflict between rule 43 and token "*" resolved as shift ("//=" < "*").
    Conflict between rule 43 and token "^^" resolved as shift ("//=" < "^^").
    Conflict between rule 43 and token "<=" resolved as shift ("//=" < "<=").
    Conflict between rule 43 and token ">=" resolved as shift ("//=" < ">=").
    Conflict between rule 43 and token "==" resolved as shift ("//=" < "==").
    Conflict between rule 43 and token "!=" resolved as shift ("//=" < "!=").
    Conflict between rule 43 and token "<=>" resolved as shift ("//=" < "<=>").
    Conflict between rule 43 and token "&&" resolved as shift ("//=" < "&&").
    Conflict between rule 43 and token "||" resolved as shift ("//=" < "||").
    Conflict between rule 43 and token "&" resolved as shift ("//=" < "&").
    Conflict between rule 43 and token "|" resolved as shift ("//=" < "|").
    Conflict between rule 43 and token "^" resolved as shift ("//=" < "^").
    Conflict between rule 43 and token "~" resolved as shift ("//=" < "~").
    Conflict between rule 43 and token ">>" resolved as shift ("//=" < ">>").
    Conflict between rule 43 and token "<<" resolved as shift ("//=" < "<<").


State 421

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   44                   | xvalue_expression "^^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 44 (prvalue_expression)

    Conflict between rule 44 and token "is" resolved as shift (%right "is").
    Conflict between rule 44 and token ">" resolved as shift ("^^=" < ">").
    Conflict between rule 44 and token "+" resolved as shift ("^^=" < "+").
    Conflict between rule 44 and token "-" resolved as shift ("^^=" < "-").
    Conflict between rule 44 and token "/" resolved as shift ("^^=" < "/").
    Conflict between rule 44 and token "//" resolved as shift ("^^=" < "//").
    Conflict between rule 44 and token "*" resolved as shift ("^^=" < "*").
    Conflict between rule 44 and token "^^" resolved as shift ("^^=" < "^^").
    Conflict between rule 44 and token "<=" resolved as shift ("^^=" < "<=").
    Conflict between rule 44 and token ">=" resolved as shift ("^^=" < ">=").
    Conflict between rule 44 and token "==" resolved as shift ("^^=" < "==").
    Conflict between rule 44 and token "!=" resolved as shift ("^^=" < "!=").
    Conflict between rule 44 and token "<=>" resolved as shift ("^^=" < "<=>").
    Conflict between rule 44 and token "&&" resolved as shift ("^^=" < "&&").
    Conflict between rule 44 and token "||" resolved as shift ("^^=" < "||").
    Conflict between rule 44 and token "&" resolved as shift ("^^=" < "&").
    Conflict between rule 44 and token "|" resolved as shift ("^^=" < "|").
    Conflict between rule 44 and token "^" resolved as shift ("^^=" < "^").
    Conflict between rule 44 and token "~" resolved as shift ("^^=" < "~").
    Conflict between rule 44 and token ">>" resolved as shift ("^^=" < ">>").
    Conflict between rule 44 and token "<<" resolved as shift ("^^=" < "<<").


State 422

   26 expression: xvalue_expression "=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 26 (expression)


State 423

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   59                   | xvalue_expression "&=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 59 (prvalue_expression)

    Conflict between rule 59 and token "is" resolved as shift (%right "is").
    Conflict between rule 59 and token ">" resolved as shift ("&=" < ">").
    Conflict between rule 59 and token "+" resolved as shift ("&=" < "+").
    Conflict between rule 59 and token "-" resolved as shift ("&=" < "-").
    Conflict between rule 59 and token "/" resolved as shift ("&=" < "/").
    Conflict between rule 59 and token "//" resolved as shift ("&=" < "//").
    Conflict between rule 59 and token "*" resolved as shift ("&=" < "*").
    Conflict between rule 59 and token "^^" resolved as shift ("&=" < "^^").
    Conflict between rule 59 and token "<=" resolved as shift ("&=" < "<=").
    Conflict between rule 59 and token ">=" resolved as shift ("&=" < ">=").
    Conflict between rule 59 and token "==" resolved as shift ("&=" < "==").
    Conflict between rule 59 and token "!=" resolved as shift ("&=" < "!=").
    Conflict between rule 59 and token "<=>" resolved as shift ("&=" < "<=>").
    Conflict between rule 59 and token "&&" resolved as shift ("&=" < "&&").
    Conflict between rule 59 and token "||" resolved as shift ("&=" < "||").
    Conflict between rule 59 and token "&" resolved as shift ("&=" < "&").
    Conflict between rule 59 and token "|" resolved as shift ("&=" < "|").
    Conflict between rule 59 and token "^" resolved as shift ("&=" < "^").
    Conflict between rule 59 and token "~" resolved as shift ("&=" < "~").
    Conflict between rule 59 and token ">>" resolved as shift ("&=" < ">>").
    Conflict between rule 59 and token "<<" resolved as shift ("&=" < "<<").


State 424

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   60                   | xvalue_expression "^=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 60 (prvalue_expression)

    Conflict between rule 60 and token "is" resolved as shift (%right "is").
    Conflict between rule 60 and token ">" resolved as shift ("^=" < ">").
    Conflict between rule 60 and token "+" resolved as shift ("^=" < "+").
    Conflict between rule 60 and token "-" resolved as shift ("^=" < "-").
    Conflict between rule 60 and token "/" resolved as shift ("^=" < "/").
    Conflict between rule 60 and token "//" resolved as shift ("^=" < "//").
    Conflict between rule 60 and token "*" resolved as shift ("^=" < "*").
    Conflict between rule 60 and token "^^" resolved as shift ("^=" < "^^").
    Conflict between rule 60 and token "<=" resolved as shift ("^=" < "<=").
    Conflict between rule 60 and token ">=" resolved as shift ("^=" < ">=").
    Conflict between rule 60 and token "==" resolved as shift ("^=" < "==").
    Conflict between rule 60 and token "!=" resolved as shift ("^=" < "!=").
    Conflict between rule 60 and token "<=>" resolved as shift ("^=" < "<=>").
    Conflict between rule 60 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 60 and token "||" resolved as shift ("^=" < "||").
    Conflict between rule 60 and token "&" resolved as shift ("^=" < "&").
    Conflict between rule 60 and token "|" resolved as shift ("^=" < "|").
    Conflict between rule 60 and token "^" resolved as shift ("^=" < "^").
    Conflict between rule 60 and token "~" resolved as shift ("^=" < "~").
    Conflict between rule 60 and token ">>" resolved as shift ("^=" < ">>").
    Conflict between rule 60 and token "<<" resolved as shift ("^=" < "<<").


State 425

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   61                   | xvalue_expression "|=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 61 (prvalue_expression)

    Conflict between rule 61 and token "is" resolved as shift (%right "is").
    Conflict between rule 61 and token ">" resolved as shift ("|=" < ">").
    Conflict between rule 61 and token "+" resolved as shift ("|=" < "+").
    Conflict between rule 61 and token "-" resolved as shift ("|=" < "-").
    Conflict between rule 61 and token "/" resolved as shift ("|=" < "/").
    Conflict between rule 61 and token "//" resolved as shift ("|=" < "//").
    Conflict between rule 61 and token "*" resolved as shift ("|=" < "*").
    Conflict between rule 61 and token "^^" resolved as shift ("|=" < "^^").
    Conflict between rule 61 and token "<=" resolved as shift ("|=" < "<=").
    Conflict between rule 61 and token ">=" resolved as shift ("|=" < ">=").
    Conflict between rule 61 and token "==" resolved as shift ("|=" < "==").
    Conflict between rule 61 and token "!=" resolved as shift ("|=" < "!=").
    Conflict between rule 61 and token "<=>" resolved as shift ("|=" < "<=>").
    Conflict between rule 61 and token "&&" resolved as shift ("|=" < "&&").
    Conflict between rule 61 and token "||" resolved as shift ("|=" < "||").
    Conflict between rule 61 and token "&" resolved as shift ("|=" < "&").
    Conflict between rule 61 and token "|" resolved as shift ("|=" < "|").
    Conflict between rule 61 and token "^" resolved as shift ("|=" < "^").
    Conflict between rule 61 and token "~" resolved as shift ("|=" < "~").
    Conflict between rule 61 and token ">>" resolved as shift ("|=" < ">>").
    Conflict between rule 61 and token "<<" resolved as shift ("|=" < "<<").


State 426

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   62                   | xvalue_expression "~=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 62 (prvalue_expression)

    Conflict between rule 62 and token "is" resolved as shift (%right "is").
    Conflict between rule 62 and token ">" resolved as shift ("~=" < ">").
    Conflict between rule 62 and token "+" resolved as shift ("~=" < "+").
    Conflict between rule 62 and token "-" resolved as shift ("~=" < "-").
    Conflict between rule 62 and token "/" resolved as shift ("~=" < "/").
    Conflict between rule 62 and token "//" resolved as shift ("~=" < "//").
    Conflict between rule 62 and token "*" resolved as shift ("~=" < "*").
    Conflict between rule 62 and token "^^" resolved as shift ("~=" < "^^").
    Conflict between rule 62 and token "<=" resolved as shift ("~=" < "<=").
    Conflict between rule 62 and token ">=" resolved as shift ("~=" < ">=").
    Conflict between rule 62 and token "==" resolved as shift ("~=" < "==").
    Conflict between rule 62 and token "!=" resolved as shift ("~=" < "!=").
    Conflict between rule 62 and token "<=>" resolved as shift ("~=" < "<=>").
    Conflict between rule 62 and token "&&" resolved as shift ("~=" < "&&").
    Conflict between rule 62 and token "||" resolved as shift ("~=" < "||").
    Conflict between rule 62 and token "&" resolved as shift ("~=" < "&").
    Conflict between rule 62 and token "|" resolved as shift ("~=" < "|").
    Conflict between rule 62 and token "^" resolved as shift ("~=" < "^").
    Conflict between rule 62 and token "~" resolved as shift ("~=" < "~").
    Conflict between rule 62 and token ">>" resolved as shift ("~=" < ">>").
    Conflict between rule 62 and token "<<" resolved as shift ("~=" < "<<").


State 427

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   64                   | xvalue_expression "<<=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 64 (prvalue_expression)

    Conflict between rule 64 and token "is" resolved as shift (%right "is").
    Conflict between rule 64 and token ">" resolved as shift ("<<=" < ">").
    Conflict between rule 64 and token "+" resolved as shift ("<<=" < "+").
    Conflict between rule 64 and token "-" resolved as shift ("<<=" < "-").
    Conflict between rule 64 and token "/" resolved as shift ("<<=" < "/").
    Conflict between rule 64 and token "//" resolved as shift ("<<=" < "//").
    Conflict between rule 64 and token "*" resolved as shift ("<<=" < "*").
    Conflict between rule 64 and token "^^" resolved as shift ("<<=" < "^^").
    Conflict between rule 64 and token "<=" resolved as shift ("<<=" < "<=").
    Conflict between rule 64 and token ">=" resolved as shift ("<<=" < ">=").
    Conflict between rule 64 and token "==" resolved as shift ("<<=" < "==").
    Conflict between rule 64 and token "!=" resolved as shift ("<<=" < "!=").
    Conflict between rule 64 and token "<=>" resolved as shift ("<<=" < "<=>").
    Conflict between rule 64 and token "&&" resolved as shift ("<<=" < "&&").
    Conflict between rule 64 and token "||" resolved as shift ("<<=" < "||").
    Conflict between rule 64 and token "&" resolved as shift ("<<=" < "&").
    Conflict between rule 64 and token "|" resolved as shift ("<<=" < "|").
    Conflict between rule 64 and token "^" resolved as shift ("<<=" < "^").
    Conflict between rule 64 and token "~" resolved as shift ("<<=" < "~").
    Conflict between rule 64 and token ">>" resolved as shift ("<<=" < ">>").
    Conflict between rule 64 and token "<<" resolved as shift ("<<=" < "<<").


State 428

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   63                   | xvalue_expression ">>=" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]
   65                   | rvalue_expression • "is" type

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 63 (prvalue_expression)

    Conflict between rule 63 and token "is" resolved as shift (%right "is").
    Conflict between rule 63 and token ">" resolved as shift (">>=" < ">").
    Conflict between rule 63 and token "+" resolved as shift (">>=" < "+").
    Conflict between rule 63 and token "-" resolved as shift (">>=" < "-").
    Conflict between rule 63 and token "/" resolved as shift (">>=" < "/").
    Conflict between rule 63 and token "//" resolved as shift (">>=" < "//").
    Conflict between rule 63 and token "*" resolved as shift (">>=" < "*").
    Conflict between rule 63 and token "^^" resolved as shift (">>=" < "^^").
    Conflict between rule 63 and token "<=" resolved as shift (">>=" < "<=").
    Conflict between rule 63 and token ">=" resolved as shift (">>=" < ">=").
    Conflict between rule 63 and token "==" resolved as shift (">>=" < "==").
    Conflict between rule 63 and token "!=" resolved as shift (">>=" < "!=").
    Conflict between rule 63 and token "<=>" resolved as shift (">>=" < "<=>").
    Conflict between rule 63 and token "&&" resolved as shift (">>=" < "&&").
    Conflict between rule 63 and token "||" resolved as shift (">>=" < "||").
    Conflict between rule 63 and token "&" resolved as shift (">>=" < "&").
    Conflict between rule 63 and token "|" resolved as shift (">>=" < "|").
    Conflict between rule 63 and token "^" resolved as shift (">>=" < "^").
    Conflict between rule 63 and token "~" resolved as shift (">>=" < "~").
    Conflict between rule 63 and token ">>" resolved as shift (">>=" < ">>").
    Conflict between rule 63 and token "<<" resolved as shift (">>=" < "<<").


State 429

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  135 else_if_statement: "else-if" "(" • expression ")" block_statement

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 480
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 430

  114 block_statement: • "{" statements0 "}"
  138 else_statement: "else" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 481


State 431

  129 if_statement_sequence: if_statement else_if_statements0 else_statement0 •

    $default  reduce using rule 129 (if_statement_sequence)


State 432

  136 else_statement0: else_statement •

    $default  reduce using rule 136 (else_statement0)


State 433

  134 else_if_statements: else_if_statements else_if_statement •

    $default  reduce using rule 134 (else_if_statements)


State 434

  152 catch_block: "catch" "(" • variable_declaration ")" block_statement
  168 variable_declaration: • "let" access_modifier0 variable_declaration_block_list

    "let"  shift, and go to state 11

    variable_declaration  go to state 482


State 435

  153 catch_block: "catch-all" block_statement •

    $default  reduce using rule 153 (catch_block)


State 436

  151 catch_blocks: catch_blocks catch_block •

    $default  reduce using rule 151 (catch_blocks)


State 437

  289 compeval0: "compeval" •

    $default  reduce using rule 289 (compeval0)


State 438

  284 constructor_header: "ctor" access_modifier compeval0 • IDENTIFIER "(" function_argument_list ")" throwable_expression

    IDENTIFIER  shift, and go to state 483


State 439

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  270 property: "let" access_modifier "property" • type IDENTIFIER "{" property_blocks "}" ";"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 484
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 440

  293 destructor_header: "~" IDENTIFIER "(" • ")"

    ")"  shift, and go to state 485


State 441

  282 constructor: constructor_header "=" function_options • ";"

    ";"  shift, and go to state 486


State 442

  285 initializer_list: "=>" "initailize" • "(" initializer_blocks_list ")"

    "("  shift, and go to state 487


State 443

  280 constructor: constructor_header initializer_list ";" •

    $default  reduce using rule 280 (constructor)


State 444

  279 constructor: constructor_header initializer_list block_statement •

    $default  reduce using rule 279 (constructor)


State 445

  292 destructor: destructor_header "=" function_options • ";"

    ";"  shift, and go to state 488


State 446

  283 constructor_header: template_header "ctor" access_modifier • compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression
  289 compeval0: • "compeval"
  290          | • %empty  [IDENTIFIER]

    "compeval"  shift, and go to state 437

    $default  reduce using rule 290 (compeval0)

    compeval0  go to state 489


State 447

  269 property: template_header "let" access_modifier • "property" type IDENTIFIER "{" property_blocks "}" ";"

    "property"  shift, and go to state 490


State 448

   20 type_template_paramaters: • T_BEGIN type_list T_END
  259 class_name: IDENTIFIER •  [",", "{"]
  260           | IDENTIFIER • type_template_paramaters

    T_BEGIN  shift, and go to state 50

    $default  reduce using rule 259 (class_name)

    type_template_paramaters  go to state 491


State 449

  256 inheritance: "inherits" class_names_list •  ["{"]
  258 class_names_list: class_names_list • "," class_name

    ","  shift, and go to state 492

    $default  reduce using rule 256 (inheritance)


State 450

  257 class_names_list: class_name •

    $default  reduce using rule 257 (class_names_list)


State 451

  191 function_argument_list: function_argument_list • "," function_argument
  207 operator_overload_header: template_declaration_type "operator" operator "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 362
    ")"  shift, and go to state 493


State 452

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  194 function_argument: type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 494
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 453

  191 function_argument_list: function_argument_list "," function_argument •

    $default  reduce using rule 191 (function_argument_list)


State 454

  195 throwable_expression: "nothrowable" •  ["=", "->", "{", "=>"]
  196                     | "nothrowable" • "(" expression ")"

    "("  shift, and go to state 495

    $default  reduce using rule 195 (throwable_expression)


State 455

  182 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 496


State 456

  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list • ")" throwable_expression "->" return_types_list
  191 function_argument_list: function_argument_list • "," function_argument

    ","  shift, and go to state 362
    ")"  shift, and go to state 497


State 457

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  172 variable_declaration_block: "let" type IDENTIFIER "=" • expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 498
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 458

  208 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 499


State 459

   27 expression0: expression •

    $default  reduce using rule 27 (expression0)


State 460

   99 array_index: expression0 ":" expression0 •

    $default  reduce using rule 99 (array_index)


State 461

   97 array_index_list: array_index_list "," array_index •

    $default  reduce using rule 97 (array_index_list)


State 462

  100 function_call: xvalue_expression "(" function_argument_list ")" •

    $default  reduce using rule 100 (function_call)


State 463

  307 type_definition: access_modifier0 "define" type "as" IDENTIFIER ";" •

    $default  reduce using rule 307 (type_definition)


State 464

   69 prvalue_expression: "castas" "<" type ">" • "(" rvalue_expression ")"

    "("  shift, and go to state 500


State 465

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
  154 clean_up_statement: "cleanup" "(" IDENTIFIER "," • clean_up_arg ")" ";"
  155 clean_up_arg: • IDENTIFIER
  156             | • lambda_expression
  157             | • function
  158             | • anonymous_function
  179 function: • template_header function_header block_statement
  180         | • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  201 anonymous_function: • template_header anonymous_function_header block_statement
  202                   | • anonymous_function_header block_statement
  203 anonymous_function_header: • "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  204                          | • "func" "(" function_argument_list ")" throwable_expression "->" return_types_list
  294 template_header: • template_declaration_list "=>"
  295 template_declaration_list: • template_declaration_type
  296                          | • template_declaration_list "," template_declaration_type
  297 template_declaration_type: • "type" IDENTIFIER
  298                          | • type IDENTIFIER
  299                          | • type

    IDENTIFIER  shift, and go to state 501
    TYPENAME    shift, and go to state 1
    "bit"       shift, and go to state 2
    "bool"      shift, and go to state 3
    "char"      shift, and go to state 4
    "const"     shift, and go to state 5
    "float"     shift, and go to state 7
    "func"      shift, and go to state 502
    "int"       shift, and go to state 10
    "long"      shift, and go to state 12
    "ref"       shift, and go to state 18
    "rref"      shift, and go to state 19
    "short"     shift, and go to state 20
    "("         shift, and go to state 503
    "type"      shift, and go to state 21

    type                       go to state 24
    type_root                  go to state 25
    non_reference_type         go to state 26
    type_core                  go to state 27
    reference_type             go to state 28
    lambda_expression          go to state 504
    clean_up_arg               go to state 505
    function                   go to state 506
    function_header            go to state 34
    anonymous_function         go to state 507
    anonymous_function_header  go to state 508
    template_header            go to state 509
    template_declaration_list  go to state 42
    template_declaration_type  go to state 510


State 466

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  123 do_loop_statement: "do" block_statement "while" "(" • expression ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 511
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 467

  114 block_statement: • "{" statements0 "}"
  124 for_loop_statement: "for" "(" for_loop_condition ")" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 512


State 468

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  126 for_loop_condition: variable_declaration "in" • expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 513
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 469

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [";"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  125 for_loop_condition: variable_declaration ";" • expression0 ";" expression0

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    $default  reduce using rule 28 (expression0)

    expression                 go to state 459
    expression0                go to state 514
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 470

  114 block_statement: • "{" statements0 "}"
  130 if_statement: "if" "(" expression ")" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 515


State 471

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
   95               | "new" "heap" type "(" • function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  102 function_call_list: • function_call_arg
  103                   | • function_call_list "," function_call_arg ";"
  104 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 472
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152
    function_call_list         go to state 516
    function_call_arg          go to state 474


State 472

  104 function_call_arg: expression •

    $default  reduce using rule 104 (function_call_arg)


State 473

   94 new_expression: "new" type "(" function_call_list • ")"
  103 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 517
    ")"  shift, and go to state 518


State 474

  102 function_call_list: function_call_arg •

    $default  reduce using rule 102 (function_call_list)


State 475

  139 switch_statement: "switch" "(" expression ")" • case_blocks0 default_block0
  140 case_blocks0: • case_blocks
  141             | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  142 case_blocks: • case_block
  143            | • case_blocks case_block
  144 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 519

    $default  reduce using rule 141 (case_blocks0)

    case_blocks0  go to state 520
    case_blocks   go to state 521
    case_block    go to state 522


State 476

   68 prvalue_expression: "typeof" "(" rvalue_expression ")" •

    $default  reduce using rule 68 (prvalue_expression)


State 477

  114 block_statement: • "{" statements0 "}"
  122 while_loop_statement: "while" "(" expression ")" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 523


State 478

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   70                   | "(" rvalue_expression ")" "?" • rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 524
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 479

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   93 lambda_expression: "(" function_argument_list ")" "->" • return_types_list "=>" block_statement
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 527
    return_type         go to state 528


State 480

  135 else_if_statement: "else-if" "(" expression • ")" block_statement

    ")"  shift, and go to state 529


State 481

  138 else_statement: "else" block_statement •

    $default  reduce using rule 138 (else_statement)


State 482

  152 catch_block: "catch" "(" variable_declaration • ")" block_statement

    ")"  shift, and go to state 530


State 483

  284 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER • "(" function_argument_list ")" throwable_expression

    "("  shift, and go to state 531


State 484

  270 property: "let" access_modifier "property" type • IDENTIFIER "{" property_blocks "}" ";"

    IDENTIFIER  shift, and go to state 532


State 485

  293 destructor_header: "~" IDENTIFIER "(" ")" •

    $default  reduce using rule 293 (destructor_header)


State 486

  282 constructor: constructor_header "=" function_options ";" •

    $default  reduce using rule 282 (constructor)


State 487

  285 initializer_list: "=>" "initailize" "(" • initializer_blocks_list ")"
  286 initializer_blocks_list: • initializer_block
  287                        | • initializer_blocks_list "," initializer_block
  288 initializer_block: • IDENTIFIER ":" rvalue_expression

    IDENTIFIER  shift, and go to state 533

    initializer_blocks_list  go to state 534
    initializer_block        go to state 535


State 488

  292 destructor: destructor_header "=" function_options ";" •

    $default  reduce using rule 292 (destructor)


State 489

  283 constructor_header: template_header "ctor" access_modifier compeval0 • IDENTIFIER "(" function_argument_list ")" throwable_expression

    IDENTIFIER  shift, and go to state 536


State 490

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  269 property: template_header "let" access_modifier "property" • type IDENTIFIER "{" property_blocks "}" ";"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                go to state 537
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28


State 491

  260 class_name: IDENTIFIER type_template_paramaters •

    $default  reduce using rule 260 (class_name)


State 492

  258 class_names_list: class_names_list "," • class_name
  259 class_name: • IDENTIFIER
  260           | • IDENTIFIER type_template_paramaters

    IDENTIFIER  shift, and go to state 448

    class_name  go to state 538


State 493

  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"
  207 operator_overload_header: template_declaration_type "operator" operator "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 539


State 494

  194 function_argument: type IDENTIFIER "=" expression •

    $default  reduce using rule 194 (function_argument)


State 495

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  196 throwable_expression: "nothrowable" "(" • expression ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 540
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 496

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  182 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 541
    return_type         go to state 528


State 497

  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" • throwable_expression "->" return_types_list
  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 542


State 498

  172 variable_declaration_block: "let" type IDENTIFIER "=" expression •

    $default  reduce using rule 172 (variable_declaration_block)


State 499

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"
  208 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 543
    return_type         go to state 528


State 500

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   69                   | "castas" "<" type ">" "(" • rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 544
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 501

  155 clean_up_arg: IDENTIFIER •

    $default  reduce using rule 155 (clean_up_arg)


State 502

  175 access_modifier: • "public"
  176                | • "private"
  177                | • "protected"
  181 function_header: "func" • access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | "func" • IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  203 anonymous_function_header: "func" • "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  204                          | "func" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    IDENTIFIER   shift, and go to state 54
    "compeval"   shift, and go to state 545
    "private"    shift, and go to state 15
    "protected"  shift, and go to state 16
    "public"     shift, and go to state 17
    "("          shift, and go to state 546

    access_modifier  go to state 55


State 503

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
   93 lambda_expression: "(" • function_argument_list ")" "->" return_types_list "=>" block_statement
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 294
    function_argument       go to state 238


State 504

  156 clean_up_arg: lambda_expression •

    $default  reduce using rule 156 (clean_up_arg)


State 505

  154 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg • ")" ";"

    ")"  shift, and go to state 547


State 506

  157 clean_up_arg: function •

    $default  reduce using rule 157 (clean_up_arg)


State 507

  158 clean_up_arg: anonymous_function •

    $default  reduce using rule 158 (clean_up_arg)


State 508

  114 block_statement: • "{" statements0 "}"
  202 anonymous_function: anonymous_function_header • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 548


State 509

  179 function: template_header • function_header block_statement
  181 function_header: • "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  182                | • "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list
  201 anonymous_function: template_header • anonymous_function_header block_statement
  203 anonymous_function_header: • "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list
  204                          | • "func" "(" function_argument_list ")" throwable_expression "->" return_types_list

    "func"  shift, and go to state 502

    function_header            go to state 113
    anonymous_function_header  go to state 549


State 510

  295 template_declaration_list: template_declaration_type •

    $default  reduce using rule 295 (template_declaration_list)


State 511

  123 do_loop_statement: "do" block_statement "while" "(" expression • ")"

    ")"  shift, and go to state 550


State 512

  124 for_loop_statement: "for" "(" for_loop_condition ")" block_statement •

    $default  reduce using rule 124 (for_loop_statement)


State 513

  126 for_loop_condition: variable_declaration "in" expression •

    $default  reduce using rule 126 (for_loop_condition)


State 514

  125 for_loop_condition: variable_declaration ";" expression0 • ";" expression0

    ";"  shift, and go to state 551


State 515

  130 if_statement: "if" "(" expression ")" block_statement •

    $default  reduce using rule 130 (if_statement)


State 516

   95 new_expression: "new" "heap" type "(" function_call_list • ")"
  103 function_call_list: function_call_list • "," function_call_arg ";"

    ","  shift, and go to state 517
    ")"  shift, and go to state 552


State 517

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  103 function_call_list: function_call_list "," • function_call_arg ";"
  104 function_call_arg: • expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 472
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152
    function_call_arg          go to state 553


State 518

   94 new_expression: "new" type "(" function_call_list ")" •

    $default  reduce using rule 94 (new_expression)


State 519

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  144 case_block: "case" • expression ":" block_statement jump_statement

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 554
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 520

  139 switch_statement: "switch" "(" expression ")" case_blocks0 • default_block0
  145 default_block0: • default_block
  146               | • %empty  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  147 default_block: • "default" ":" block_statement jump_statement

    "default"  shift, and go to state 555

    $default  reduce using rule 146 (default_block0)

    default_block0  go to state 556
    default_block   go to state 557


State 521

  140 case_blocks0: case_blocks •  [IDENTIFIER, NPTR, BOOL, INT, FLOAT, CHAR, STRING, "break", "castas", "cleanup", "continue", "default", "do", "for", "goto", "if", "let", "new", "rethrow", "return", "super", "switch", "this", "throw", "try", "typeof", "while", "yield", "[", "-", "*", "!", "++", "--", "(", "{", "}", ";"]
  143 case_blocks: case_blocks • case_block
  144 case_block: • "case" expression ":" block_statement jump_statement

    "case"  shift, and go to state 519

    $default  reduce using rule 140 (case_blocks0)

    case_block  go to state 558


State 522

  142 case_blocks: case_block •

    $default  reduce using rule 142 (case_blocks)


State 523

  122 while_loop_statement: "while" "(" expression ")" block_statement •

    $default  reduce using rule 122 (while_loop_statement)


State 524

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   70                   | "(" rvalue_expression ")" "?" rvalue_expression • ":" rvalue_expression

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316
    ":"    shift, and go to state 559


State 525

  200 return_type: "typeof" • "(" expression ")"

    "("  shift, and go to state 560


State 526

  199 return_type: type •

    $default  reduce using rule 199 (return_type)


State 527

   93 lambda_expression: "(" function_argument_list ")" "->" return_types_list • "=>" block_statement
  198 return_types_list: return_types_list • "," return_type

    ","   shift, and go to state 561
    "=>"  shift, and go to state 562


State 528

  197 return_types_list: return_type •

    $default  reduce using rule 197 (return_types_list)


State 529

  114 block_statement: • "{" statements0 "}"
  135 else_if_statement: "else-if" "(" expression ")" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 563


State 530

  114 block_statement: • "{" statements0 "}"
  152 catch_block: "catch" "(" variable_declaration ")" • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 564


State 531

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression
  284 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" • function_argument_list ")" throwable_expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 565
    function_argument       go to state 238


State 532

  270 property: "let" access_modifier "property" type IDENTIFIER • "{" property_blocks "}" ";"

    "{"  shift, and go to state 566


State 533

  288 initializer_block: IDENTIFIER • ":" rvalue_expression

    ":"  shift, and go to state 567


State 534

  285 initializer_list: "=>" "initailize" "(" initializer_blocks_list • ")"
  287 initializer_blocks_list: initializer_blocks_list • "," initializer_block

    ","  shift, and go to state 568
    ")"  shift, and go to state 569


State 535

  286 initializer_blocks_list: initializer_block •

    $default  reduce using rule 286 (initializer_blocks_list)


State 536

  283 constructor_header: template_header "ctor" access_modifier compeval0 IDENTIFIER • "(" function_argument_list ")" throwable_expression

    "("  shift, and go to state 570


State 537

  269 property: template_header "let" access_modifier "property" type • IDENTIFIER "{" property_blocks "}" ";"

    IDENTIFIER  shift, and go to state 571


State 538

  258 class_names_list: class_names_list "," class_name •

    $default  reduce using rule 258 (class_names_list)


State 539

  207 operator_overload_header: template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 572


State 540

  196 throwable_expression: "nothrowable" "(" expression • ")"

    ")"  shift, and go to state 573


State 541

  182 function_header: "func" IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  198 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 561

    $default  reduce using rule 182 (function_header)


State 542

  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 574


State 543

  198 return_types_list: return_types_list • "," return_type
  208 operator_overload_header: "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["=", "{"]

    ","  shift, and go to state 561

    $default  reduce using rule 208 (operator_overload_header)


State 544

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   69                   | "castas" "<" type ">" "(" rvalue_expression • ")"

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316
    ")"    shift, and go to state 575


State 545

  203 anonymous_function_header: "func" "compeval" • "(" function_argument_list ")" throwable_expression "->" return_types_list

    "("  shift, and go to state 576


State 546

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression
  204 anonymous_function_header: "func" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 577
    function_argument       go to state 238


State 547

  154 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" • ";"

    ";"  shift, and go to state 578


State 548

  202 anonymous_function: anonymous_function_header block_statement •

    $default  reduce using rule 202 (anonymous_function)


State 549

  114 block_statement: • "{" statements0 "}"
  201 anonymous_function: template_header anonymous_function_header • block_statement

    "{"  shift, and go to state 107

    block_statement  go to state 579


State 550

  123 do_loop_statement: "do" block_statement "while" "(" expression ")" •

    $default  reduce using rule 123 (do_loop_statement)


State 551

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   27 expression0: • expression
   28            | • %empty  [")"]
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  125 for_loop_condition: variable_declaration ";" expression0 ";" • expression0

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    $default  reduce using rule 28 (expression0)

    expression                 go to state 459
    expression0                go to state 580
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 552

   95 new_expression: "new" "heap" type "(" function_call_list ")" •

    $default  reduce using rule 95 (new_expression)


State 553

  103 function_call_list: function_call_list "," function_call_arg • ";"

    ";"  shift, and go to state 581


State 554

  144 case_block: "case" expression • ":" block_statement jump_statement

    ":"  shift, and go to state 582


State 555

  147 default_block: "default" • ":" block_statement jump_statement

    ":"  shift, and go to state 583


State 556

  139 switch_statement: "switch" "(" expression ")" case_blocks0 default_block0 •

    $default  reduce using rule 139 (switch_statement)


State 557

  145 default_block0: default_block •

    $default  reduce using rule 145 (default_block0)


State 558

  143 case_blocks: case_blocks case_block •

    $default  reduce using rule 143 (case_blocks)


State 559

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   70                   | "(" rvalue_expression ")" "?" rvalue_expression ":" • rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 584
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 560

   25 expression: • assignment_arg_expression
   26           | • xvalue_expression "=" rvalue_expression
   29 assignment_arg_expression: • xvalue_expression
   30                          | • prvalue_expression
   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  200 return_type: "typeof" "(" • expression ")"

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    expression                 go to state 585
    assignment_arg_expression  go to state 183
    prvalue_expression         go to state 184
    rvalue_expression          go to state 185
    xvalue_expression          go to state 186
    literal                    go to state 187
    lambda_expression          go to state 188
    new_expression             go to state 189
    function_call              go to state 152


State 561

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  198 return_types_list: return_types_list "," • return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_type         go to state 586


State 562

   93 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" • block_statement
  114 block_statement: • "{" statements0 "}"

    "{"  shift, and go to state 107

    block_statement  go to state 587


State 563

  135 else_if_statement: "else-if" "(" expression ")" block_statement •

    $default  reduce using rule 135 (else_if_statement)


State 564

  152 catch_block: "catch" "(" variable_declaration ")" block_statement •

    $default  reduce using rule 152 (catch_block)


State 565

  191 function_argument_list: function_argument_list • "," function_argument
  284 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list • ")" throwable_expression

    ","  shift, and go to state 362
    ")"  shift, and go to state 588


State 566

  270 property: "let" access_modifier "property" type IDENTIFIER "{" • property_blocks "}" ";"
  271 property_blocks: • get_block
  272                | • set_block
  273                | • get_block set_block
  274                | • set_block get_block
  275 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  276          | • "get" "(" ")" block_statement
  277 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  278          | • "set" "(" ")" block_statement

    "get"  shift, and go to state 589
    "set"  shift, and go to state 590

    property_blocks  go to state 591
    get_block        go to state 592
    set_block        go to state 593


State 567

   31 prvalue_expression: • literal
   32                   | • "super"
   33                   | • rvalue_expression "+" rvalue_expression
   34                   | • rvalue_expression "-" rvalue_expression
   35                   | • rvalue_expression "*" rvalue_expression
   36                   | • rvalue_expression "/" rvalue_expression
   37                   | • rvalue_expression "//" rvalue_expression
   38                   | • rvalue_expression "^^" rvalue_expression
   39                   | • xvalue_expression "+=" rvalue_expression
   40                   | • xvalue_expression "-=" rvalue_expression
   41                   | • xvalue_expression "*=" rvalue_expression
   42                   | • xvalue_expression "/=" rvalue_expression
   43                   | • xvalue_expression "//=" rvalue_expression
   44                   | • xvalue_expression "^^=" rvalue_expression
   45                   | • rvalue_expression ">" rvalue_expression
   46                   | • rvalue_expression ">=" rvalue_expression
   47                   | • rvalue_expression "<=" rvalue_expression
   48                   | • rvalue_expression "<=>" rvalue_expression
   49                   | • rvalue_expression "!=" rvalue_expression
   50                   | • rvalue_expression "==" rvalue_expression
   51                   | • rvalue_expression "&&" rvalue_expression
   52                   | • rvalue_expression "||" rvalue_expression
   53                   | • rvalue_expression "&" rvalue_expression
   54                   | • rvalue_expression "^" rvalue_expression
   55                   | • rvalue_expression "|" rvalue_expression
   56                   | • rvalue_expression "~" rvalue_expression
   57                   | • rvalue_expression ">>" rvalue_expression
   58                   | • rvalue_expression "<<" rvalue_expression
   59                   | • xvalue_expression "&=" rvalue_expression
   60                   | • xvalue_expression "^=" rvalue_expression
   61                   | • xvalue_expression "|=" rvalue_expression
   62                   | • xvalue_expression "~=" rvalue_expression
   63                   | • xvalue_expression ">>=" rvalue_expression
   64                   | • xvalue_expression "<<=" rvalue_expression
   65                   | • rvalue_expression "is" type
   66                   | • "!" rvalue_expression
   67                   | • "-" rvalue_expression
   68                   | • "typeof" "(" rvalue_expression ")"
   69                   | • "castas" "<" type ">" "(" rvalue_expression ")"
   70                   | • "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression
   71                   | • new_expression
   72                   | • lambda_expression
   73 rvalue_expression: • prvalue_expression
   74                  | • xvalue_expression
   75 xvalue_expression: • IDENTIFIER
   76                  | • "this"
   77                  | • "++" xvalue_expression
   78                  | • "--" xvalue_expression
   79                  | • xvalue_expression "++"
   80                  | • xvalue_expression "--"
   81                  | • "*" xvalue_expression
   82                  | • xvalue_expression "." xvalue_expression
   83                  | • xvalue_expression "->" xvalue_expression
   84                  | • "(" rvalue_expression ")"
   85                  | • "[" array_index_list "]"
   86                  | • function_call
   87 literal: • BOOL
   88        | • NPTR
   89        | • INT
   90        | • FLOAT
   91        | • STRING
   92        | • CHAR
   93 lambda_expression: • "(" function_argument_list ")" "->" return_types_list "=>" block_statement
   94 new_expression: • "new" type "(" function_call_list ")"
   95               | • "new" "heap" type "(" function_call_list ")"
  100 function_call: • xvalue_expression "(" function_argument_list ")"
  101              | • xvalue_expression "(" ")"
  288 initializer_block: IDENTIFIER ":" • rvalue_expression

    IDENTIFIER  shift, and go to state 144
    NPTR        shift, and go to state 154
    BOOL        shift, and go to state 155
    INT         shift, and go to state 156
    FLOAT       shift, and go to state 157
    CHAR        shift, and go to state 158
    STRING      shift, and go to state 159
    "castas"    shift, and go to state 161
    "new"       shift, and go to state 168
    "super"     shift, and go to state 171
    "this"      shift, and go to state 145
    "typeof"    shift, and go to state 175
    "["         shift, and go to state 146
    "-"         shift, and go to state 178
    "*"         shift, and go to state 147
    "!"         shift, and go to state 179
    "++"        shift, and go to state 148
    "--"        shift, and go to state 149
    "("         shift, and go to state 180

    prvalue_expression  go to state 263
    rvalue_expression   go to state 594
    xvalue_expression   go to state 265
    literal             go to state 187
    lambda_expression   go to state 188
    new_expression      go to state 189
    function_call       go to state 152


State 568

  287 initializer_blocks_list: initializer_blocks_list "," • initializer_block
  288 initializer_block: • IDENTIFIER ":" rvalue_expression

    IDENTIFIER  shift, and go to state 533

    initializer_block  go to state 595


State 569

  285 initializer_list: "=>" "initailize" "(" initializer_blocks_list ")" •

    $default  reduce using rule 285 (initializer_list)


State 570

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression
  283 constructor_header: template_header "ctor" access_modifier compeval0 IDENTIFIER "(" • function_argument_list ")" throwable_expression

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 596
    function_argument       go to state 238


State 571

  269 property: template_header "let" access_modifier "property" type IDENTIFIER • "{" property_blocks "}" ";"

    "{"  shift, and go to state 597


State 572

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"
  207 operator_overload_header: template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 598
    return_type         go to state 528


State 573

  196 throwable_expression: "nothrowable" "(" expression ")" •

    $default  reduce using rule 196 (throwable_expression)


State 574

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" • return_types_list
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 599
    return_type         go to state 528


State 575

   69 prvalue_expression: "castas" "<" type ">" "(" rvalue_expression ")" •

    $default  reduce using rule 69 (prvalue_expression)


State 576

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  190 function_argument_list: • function_argument
  191                       | • function_argument_list "," function_argument
  192 function_argument: • type IDENTIFIER
  193                  | • type "..."
  194                  | • type IDENTIFIER "=" expression
  203 anonymous_function_header: "func" "compeval" "(" • function_argument_list ")" throwable_expression "->" return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20

    type                    go to state 236
    type_root               go to state 25
    non_reference_type      go to state 26
    type_core               go to state 27
    reference_type          go to state 28
    function_argument_list  go to state 600
    function_argument       go to state 238


State 577

  191 function_argument_list: function_argument_list • "," function_argument
  204 anonymous_function_header: "func" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 362
    ")"  shift, and go to state 601


State 578

  154 clean_up_statement: "cleanup" "(" IDENTIFIER "," clean_up_arg ")" ";" •

    $default  reduce using rule 154 (clean_up_statement)


State 579

  201 anonymous_function: template_header anonymous_function_header block_statement •

    $default  reduce using rule 201 (anonymous_function)


State 580

  125 for_loop_condition: variable_declaration ";" expression0 ";" expression0 •

    $default  reduce using rule 125 (for_loop_condition)


State 581

  103 function_call_list: function_call_list "," function_call_arg ";" •

    $default  reduce using rule 103 (function_call_list)


State 582

  114 block_statement: • "{" statements0 "}"
  144 case_block: "case" expression ":" • block_statement jump_statement

    "{"  shift, and go to state 107

    block_statement  go to state 602


State 583

  114 block_statement: • "{" statements0 "}"
  147 default_block: "default" ":" • block_statement jump_statement

    "{"  shift, and go to state 107

    block_statement  go to state 603


State 584

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
   70                   | "(" rvalue_expression ")" "?" rvalue_expression ":" rvalue_expression •  ["in", "]", ",", ")", ":", ";"]

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 70 (prvalue_expression)

    Conflict between rule 70 and token "is" resolved as shift (%right "is").
    Conflict between rule 70 and token ">" resolved as shift (TERN < ">").
    Conflict between rule 70 and token "+" resolved as shift (TERN < "+").
    Conflict between rule 70 and token "-" resolved as shift (TERN < "-").
    Conflict between rule 70 and token "/" resolved as shift (TERN < "/").
    Conflict between rule 70 and token "//" resolved as shift (TERN < "//").
    Conflict between rule 70 and token "*" resolved as shift (TERN < "*").
    Conflict between rule 70 and token "^^" resolved as shift (TERN < "^^").
    Conflict between rule 70 and token "<=" resolved as shift (TERN < "<=").
    Conflict between rule 70 and token ">=" resolved as shift (TERN < ">=").
    Conflict between rule 70 and token "==" resolved as shift (TERN < "==").
    Conflict between rule 70 and token "!=" resolved as shift (TERN < "!=").
    Conflict between rule 70 and token "<=>" resolved as shift (TERN < "<=>").
    Conflict between rule 70 and token "&&" resolved as shift (TERN < "&&").
    Conflict between rule 70 and token "||" resolved as shift (TERN < "||").
    Conflict between rule 70 and token "&" resolved as shift (TERN < "&").
    Conflict between rule 70 and token "|" resolved as shift (TERN < "|").
    Conflict between rule 70 and token "^" resolved as shift (TERN < "^").
    Conflict between rule 70 and token "~" resolved as shift (TERN < "~").
    Conflict between rule 70 and token ">>" resolved as shift (TERN < ">>").
    Conflict between rule 70 and token "<<" resolved as shift (TERN < "<<").


State 585

  200 return_type: "typeof" "(" expression • ")"

    ")"  shift, and go to state 604


State 586

  198 return_types_list: return_types_list "," return_type •

    $default  reduce using rule 198 (return_types_list)


State 587

   93 lambda_expression: "(" function_argument_list ")" "->" return_types_list "=>" block_statement •

    $default  reduce using rule 93 (lambda_expression)


State 588

  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"
  284 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" • throwable_expression

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 605


State 589

  275 get_block: "get" • "(" ")" "=>" IDENTIFIER ";"
  276          | "get" • "(" ")" block_statement

    "("  shift, and go to state 606


State 590

  277 set_block: "set" • "(" ")" "=>" IDENTIFIER ";"
  278          | "set" • "(" ")" block_statement

    "("  shift, and go to state 607


State 591

  270 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks • "}" ";"

    "}"  shift, and go to state 608


State 592

  271 property_blocks: get_block •  ["}"]
  273                | get_block • set_block
  277 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  278          | • "set" "(" ")" block_statement

    "set"  shift, and go to state 590

    $default  reduce using rule 271 (property_blocks)

    set_block  go to state 609


State 593

  272 property_blocks: set_block •  ["}"]
  274                | set_block • get_block
  275 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  276          | • "get" "(" ")" block_statement

    "get"  shift, and go to state 589

    $default  reduce using rule 272 (property_blocks)

    get_block  go to state 610


State 594

   33 prvalue_expression: rvalue_expression • "+" rvalue_expression
   34                   | rvalue_expression • "-" rvalue_expression
   35                   | rvalue_expression • "*" rvalue_expression
   36                   | rvalue_expression • "/" rvalue_expression
   37                   | rvalue_expression • "//" rvalue_expression
   38                   | rvalue_expression • "^^" rvalue_expression
   45                   | rvalue_expression • ">" rvalue_expression
   46                   | rvalue_expression • ">=" rvalue_expression
   47                   | rvalue_expression • "<=" rvalue_expression
   48                   | rvalue_expression • "<=>" rvalue_expression
   49                   | rvalue_expression • "!=" rvalue_expression
   50                   | rvalue_expression • "==" rvalue_expression
   51                   | rvalue_expression • "&&" rvalue_expression
   52                   | rvalue_expression • "||" rvalue_expression
   53                   | rvalue_expression • "&" rvalue_expression
   54                   | rvalue_expression • "^" rvalue_expression
   55                   | rvalue_expression • "|" rvalue_expression
   56                   | rvalue_expression • "~" rvalue_expression
   57                   | rvalue_expression • ">>" rvalue_expression
   58                   | rvalue_expression • "<<" rvalue_expression
   65                   | rvalue_expression • "is" type
  288 initializer_block: IDENTIFIER ":" rvalue_expression •  [",", ")"]

    "is"   shift, and go to state 296
    ">"    shift, and go to state 297
    "+"    shift, and go to state 298
    "-"    shift, and go to state 299
    "/"    shift, and go to state 300
    "//"   shift, and go to state 301
    "*"    shift, and go to state 302
    "^^"   shift, and go to state 303
    "<="   shift, and go to state 304
    ">="   shift, and go to state 305
    "=="   shift, and go to state 306
    "!="   shift, and go to state 307
    "<=>"  shift, and go to state 308
    "&&"   shift, and go to state 309
    "||"   shift, and go to state 310
    "&"    shift, and go to state 311
    "|"    shift, and go to state 312
    "^"    shift, and go to state 313
    "~"    shift, and go to state 314
    ">>"   shift, and go to state 315
    "<<"   shift, and go to state 316

    $default  reduce using rule 288 (initializer_block)


State 595

  287 initializer_blocks_list: initializer_blocks_list "," initializer_block •

    $default  reduce using rule 287 (initializer_blocks_list)


State 596

  191 function_argument_list: function_argument_list • "," function_argument
  283 constructor_header: template_header "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list • ")" throwable_expression

    ","  shift, and go to state 362
    ")"  shift, and go to state 611


State 597

  269 property: template_header "let" access_modifier "property" type IDENTIFIER "{" • property_blocks "}" ";"
  271 property_blocks: • get_block
  272                | • set_block
  273                | • get_block set_block
  274                | • set_block get_block
  275 get_block: • "get" "(" ")" "=>" IDENTIFIER ";"
  276          | • "get" "(" ")" block_statement
  277 set_block: • "set" "(" ")" "=>" IDENTIFIER ";"
  278          | • "set" "(" ")" block_statement

    "get"  shift, and go to state 589
    "set"  shift, and go to state 590

    property_blocks  go to state 612
    get_block        go to state 592
    set_block        go to state 593


State 598

  198 return_types_list: return_types_list • "," return_type
  207 operator_overload_header: template_declaration_type "operator" operator "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["=", "{"]

    ","  shift, and go to state 561

    $default  reduce using rule 207 (operator_overload_header)


State 599

  181 function_header: "func" access_modifier function_modifiers IDENTIFIER "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]
  198 return_types_list: return_types_list • "," return_type

    ","  shift, and go to state 561

    $default  reduce using rule 181 (function_header)


State 600

  191 function_argument_list: function_argument_list • "," function_argument
  203 anonymous_function_header: "func" "compeval" "(" function_argument_list • ")" throwable_expression "->" return_types_list

    ","  shift, and go to state 362
    ")"  shift, and go to state 613


State 601

  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"
  204 anonymous_function_header: "func" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 614


State 602

  144 case_block: "case" expression ":" block_statement • jump_statement
  159 jump_statement: • "return" ";"
  160               | • "break" ";"
  161               | • "continue" ";"
  162               | • "rethrow" ";"
  163               | • "throw" expression ";"
  164               | • "yield" ";"
  165               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 160
    "continue"  shift, and go to state 163
    "goto"      shift, and go to state 166
    "rethrow"   shift, and go to state 169
    "return"    shift, and go to state 170
    "throw"     shift, and go to state 173
    "yield"     shift, and go to state 177

    jump_statement  go to state 615


State 603

  147 default_block: "default" ":" block_statement • jump_statement
  159 jump_statement: • "return" ";"
  160               | • "break" ";"
  161               | • "continue" ";"
  162               | • "rethrow" ";"
  163               | • "throw" expression ";"
  164               | • "yield" ";"
  165               | • "goto" IDENTIFIER ";"

    "break"     shift, and go to state 160
    "continue"  shift, and go to state 163
    "goto"      shift, and go to state 166
    "rethrow"   shift, and go to state 169
    "return"    shift, and go to state 170
    "throw"     shift, and go to state 173
    "yield"     shift, and go to state 177

    jump_statement  go to state 616


State 604

  200 return_type: "typeof" "(" expression ")" •

    $default  reduce using rule 200 (return_type)


State 605

  284 constructor_header: "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression •

    $default  reduce using rule 284 (constructor_header)


State 606

  275 get_block: "get" "(" • ")" "=>" IDENTIFIER ";"
  276          | "get" "(" • ")" block_statement

    ")"  shift, and go to state 617


State 607

  277 set_block: "set" "(" • ")" "=>" IDENTIFIER ";"
  278          | "set" "(" • ")" block_statement

    ")"  shift, and go to state 618


State 608

  270 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" • ";"

    ";"  shift, and go to state 619


State 609

  273 property_blocks: get_block set_block •

    $default  reduce using rule 273 (property_blocks)


State 610

  274 property_blocks: set_block get_block •

    $default  reduce using rule 274 (property_blocks)


State 611

  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"
  283 constructor_header: template_header "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" • throwable_expression

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 620


State 612

  269 property: template_header "let" access_modifier "property" type IDENTIFIER "{" property_blocks • "}" ";"

    "}"  shift, and go to state 621


State 613

  195 throwable_expression: • "nothrowable"
  196                     | • "nothrowable" "(" expression ")"
  203 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" • throwable_expression "->" return_types_list

    "nothrowable"  shift, and go to state 454

    throwable_expression  go to state 622


State 614

  204 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 623


State 615

  144 case_block: "case" expression ":" block_statement jump_statement •

    $default  reduce using rule 144 (case_block)


State 616

  147 default_block: "default" ":" block_statement jump_statement •

    $default  reduce using rule 147 (default_block)


State 617

  114 block_statement: • "{" statements0 "}"
  275 get_block: "get" "(" ")" • "=>" IDENTIFIER ";"
  276          | "get" "(" ")" • block_statement

    "{"   shift, and go to state 107
    "=>"  shift, and go to state 624

    block_statement  go to state 625


State 618

  114 block_statement: • "{" statements0 "}"
  277 set_block: "set" "(" ")" • "=>" IDENTIFIER ";"
  278          | "set" "(" ")" • block_statement

    "{"   shift, and go to state 107
    "=>"  shift, and go to state 626

    block_statement  go to state 627


State 619

  270 property: "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";" •

    $default  reduce using rule 270 (property)


State 620

  283 constructor_header: template_header "ctor" access_modifier compeval0 IDENTIFIER "(" function_argument_list ")" throwable_expression •

    $default  reduce using rule 283 (constructor_header)


State 621

  269 property: template_header "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" • ";"

    ";"  shift, and go to state 628


State 622

  203 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression • "->" return_types_list

    "->"  shift, and go to state 629


State 623

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"
  204 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 630
    return_type         go to state 528


State 624

  275 get_block: "get" "(" ")" "=>" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 631


State 625

  276 get_block: "get" "(" ")" block_statement •

    $default  reduce using rule 276 (get_block)


State 626

  277 set_block: "set" "(" ")" "=>" • IDENTIFIER ";"

    IDENTIFIER  shift, and go to state 632


State 627

  278 set_block: "set" "(" ")" block_statement •

    $default  reduce using rule 278 (set_block)


State 628

  269 property: template_header "let" access_modifier "property" type IDENTIFIER "{" property_blocks "}" ";" •

    $default  reduce using rule 269 (property)


State 629

    3 type: • "const" type_root
    4     | • type_root
    5 type_root: • non_reference_type
    6          | • reference_type
    7 non_reference_type: • type_core
    8                   | • type_core POINTER_TYPE
    9                   | • type_core "weak" POINTER_TYPE
   10                   | • type_core ARRAYL xvalue_expression ARRAYR
   11 type_core: • TYPENAME type_template_paramaters
   12          | • TYPENAME
   13          | • "bit"
   14          | • "bool"
   15          | • "short"
   16          | • "int"
   17          | • "long"
   18          | • "float"
   19          | • "char"
   23 reference_type: • "ref" non_reference_type
   24               | • "rref" non_reference_type
  197 return_types_list: • return_type
  198                  | • return_types_list "," return_type
  199 return_type: • type
  200            | • "typeof" "(" expression ")"
  203 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" • return_types_list

    TYPENAME  shift, and go to state 1
    "bit"     shift, and go to state 2
    "bool"    shift, and go to state 3
    "char"    shift, and go to state 4
    "const"   shift, and go to state 5
    "float"   shift, and go to state 7
    "int"     shift, and go to state 10
    "long"    shift, and go to state 12
    "ref"     shift, and go to state 18
    "rref"    shift, and go to state 19
    "short"   shift, and go to state 20
    "typeof"  shift, and go to state 525

    type                go to state 526
    type_root           go to state 25
    non_reference_type  go to state 26
    type_core           go to state 27
    reference_type      go to state 28
    return_types_list   go to state 633
    return_type         go to state 528


State 630

  198 return_types_list: return_types_list • "," return_type
  204 anonymous_function_header: "func" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 561

    $default  reduce using rule 204 (anonymous_function_header)


State 631

  275 get_block: "get" "(" ")" "=>" IDENTIFIER • ";"

    ";"  shift, and go to state 634


State 632

  277 set_block: "set" "(" ")" "=>" IDENTIFIER • ";"

    ";"  shift, and go to state 635


State 633

  198 return_types_list: return_types_list • "," return_type
  203 anonymous_function_header: "func" "compeval" "(" function_argument_list ")" throwable_expression "->" return_types_list •  ["{"]

    ","  shift, and go to state 561

    $default  reduce using rule 203 (anonymous_function_header)


State 634

  275 get_block: "get" "(" ")" "=>" IDENTIFIER ";" •

    $default  reduce using rule 275 (get_block)


State 635

  277 set_block: "set" "(" ")" "=>" IDENTIFIER ";" •

    $default  reduce using rule 277 (set_block)
